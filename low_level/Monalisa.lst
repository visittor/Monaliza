CCS PCD C Compiler, Version 5.015, 5967               15-Nov-17 22:51

               Filename:   C:\Users\Nasrun\Documents\Monalisa\MainMonalisa\Monaliza\low_level\Monalisa.lst

               ROM used:   8648 bytes (26%)
                           Largest free fragment is 22068
               RAM used:   511 (6%) at main() level
                           674 (8%) worst case
               Stack size: 128

*
0C00:  GOTO    2C32
*
0C28:  GOTO    1AD6
*
0C38:  GOTO    1B4A
*
0C50:  GOTO    1F0C
0C54:  GOTO    20B2
*
0C74:  GOTO    2148
*
0C94:  GOTO    1858
0C98:  GOTO    20F6
*
0CB8:  GOTO    1BB8
0CBC:  GOTO    1C2C
.................... #import(file="BITWISE_LIB.o") 
.................... /* 
.................... *************************** C SOURCE FILE ************************************ 
....................  
.................... project   : 
.................... filename  : BITWISE_LIB.C 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #define BITWISE_LIB_C_SRC 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                             MODULES USED                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #include "BITWISE_LIB.H" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : BITWISE_LIB.H 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx , 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  BITWISE_LIB_INCLUDED 
.................... #define  BITWISE_LIB_INCLUDED 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... #include "CONFIG_PIC24.H"   
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CONFIG_PIC24.H 
.................... version   :  
.................... date      : 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  CONFIG_PIC24_INCLUDED 
.................... #define  CONFIG_PIC24_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... #include <24FJ48GA002.H> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0EF0:  MOV     W8,[W15++]
0EF2:  MOV     #12,W8
0EF4:  REPEAT  #4
0EF6:  MOV     [W8++],[W15++]
0EF8:  CLR     W11
0EFA:  MUL.UU  W12,#0,W12
0EFC:  MOV     W3,W8
0EFE:  MOV     W7,W9
0F00:  MOV     #7FF,W10
0F02:  BCLR.B  42.0
0F04:  BCLR.B  42.1
0F06:  ASR     W8,#4,W8
0F08:  AND     W10,W8,W8
0F0A:  CP0     W8
0F0C:  BRA     Z,FF0
0F0E:  BCLR.B  42.0
0F10:  BCLR.B  42.1
0F12:  ASR     W9,#4,W9
0F14:  AND     W10,W9,W9
0F16:  CP0     W9
0F18:  BRA     Z,FF0
0F1A:  ADD     W9,W8,W8
0F1C:  BTSC    W9.B
0F1E:  BRA     F28
0F20:  SUB     #3FF,W8
0F22:  BRA     Z,FF0
0F24:  BRA     NC,FF0
0F26:  BRA     F2E
0F28:  MOV     #401,W10
0F2A:  ADD.B   W10L,W5L,W5L
0F2C:  BRA     C,FF0
0F2E:  XOR     W3,W7,W13
0F30:  BCLR.B  42.0
0F32:  BCLR.B  42.1
0F34:  AND     #F,W3
0F36:  BSET    W3.4
0F38:  AND     #F,W7
0F3A:  BSET    W7.4
0F3C:  MOV     W8,[W15++]
0F3E:  MUL.UU  W4,W1,W8
0F40:  MUL.UU  W5,W0,W10
0F42:  ADD     W8,W10,W10
0F44:  ADDC    W9,W11,W11
0F46:  ADDC    #0,W12
0F48:  MUL.UU  W4,W2,W8
0F4A:  ADD     W8,W11,W11
0F4C:  ADDC    W9,W12,W12
0F4E:  MUL.UU  W5,W1,W8
0F50:  CLR     W10
0F52:  ADD     W8,W11,W11
0F54:  ADDC    W9,W12,W12
0F56:  ADDC    #0,W10
0F58:  MUL.UU  W6,W0,W8
0F5A:  ADD     W8,W11,W11
0F5C:  ADDC    W9,W12,W12
0F5E:  ADDC    #0,W10
0F60:  CLR     W11
0F62:  MUL.UU  W4,W3,W8
0F64:  ADD     W8,W12,W12
0F66:  ADDC    W9,W10,W10
0F68:  ADDC    #0,W11
0F6A:  MUL.UU  W5,W2,W8
0F6C:  ADD     W8,W12,W12
0F6E:  ADDC    W9,W10,W10
0F70:  ADDC    #0,W11
0F72:  MUL.UU  W6,W1,W8
0F74:  ADD     W8,W12,W12
0F76:  ADDC    W9,W10,W10
0F78:  ADDC    #0,W11
0F7A:  MUL.UU  W7,W0,W8
0F7C:  ADD     W8,W12,W12
0F7E:  ADDC    W9,W10,W10
0F80:  ADDC    #0,W11
0F82:  MOV     W12,W0
0F84:  CLR     W12
0F86:  MUL.UU  W5,W3,W8
0F88:  ADD     W8,W10,W10
0F8A:  ADDC    W9,W11,W11
0F8C:  ADDC    #0,W12
0F8E:  MUL.UU  W6,W2,W8
0F90:  ADD     W8,W10,W10
0F92:  ADDC    W9,W11,W11
0F94:  ADDC    #0,W12
0F96:  MUL.UU  W6,W3,W8
0F98:  ADD     W8,W11,W11
0F9A:  ADDC    W9,W12,W12
0F9C:  MUL.UU  W7,W1,W8
0F9E:  ADD     W8,W10,W10
0FA0:  ADDC    W9,W11,W11
0FA2:  ADDC    #0,W12
0FA4:  MUL.UU  W7,W2,W8
0FA6:  ADD     W8,W11,W11
0FA8:  ADDC    W9,W12,W12
0FAA:  MUL.UU  W7,W3,W8
0FAC:  ADD     W8,W12,W12
0FAE:  MOV     W10,W1
0FB0:  MOV     W11,W2
0FB2:  MOV     W12,W3
0FB4:  MOV     #5,W4
0FB6:  BCLR.B  42.0
0FB8:  RRC     W3,W3
0FBA:  RRC     W2,W2
0FBC:  RRC     W1,W1
0FBE:  RRC     W0,W0
0FC0:  DEC     W4,W4
0FC2:  BRA     NZ,FB6
0FC4:  MOV     [--W15],W8
0FC6:  INC     W8,W8
0FC8:  IOR      W0,  W1,W6
0FCA:  BRA     Z,FCE
0FCC:  BRA     FD2
0FCE:  IOR      W2,  W3,W6
0FD0:  BRA     Z,FE2
0FD2:  BTSC    W3.4
0FD4:  BRA     FE2
0FD6:  BCLR.B  42.0
0FD8:  RLC     W0,W0
0FDA:  RLC     W1,W1
0FDC:  RLC     W2,W2
0FDE:  RLC     W3,W3
0FE0:  DEC     W8,W8
0FE2:  SL      W8,#4,W8
0FE4:  BCLR    W3.F
0FE6:  BTSC    W13.F
0FE8:  BSET    W3.F
0FEA:  BCLR    W3.4
0FEC:  XOR     W8,W3,W3
0FEE:  BRA     FF6
0FF0:  MUL.UU  W0,#0,W0
0FF2:  MUL.UU  W0,#0,W2
0FF4:  BRA     FF6
0FF6:  MOV     #1A,W8
0FF8:  REPEAT  #4
0FFA:  MOV     [--W15],[W8--]
0FFC:  MOV     [--W15],W8
0FFE:  RETURN  
1000:  MOV     W8,[W15++]
1002:  MOV     #12,W8
1004:  REPEAT  #4
1006:  MOV     [W8++],[W15++]
1008:  XOR     W3,W7,W13
100A:  MOV     W3,W8
100C:  MOV     W7,W9
100E:  MOV     #7FF,W10
1010:  BCLR.B  42.0
1012:  BCLR.B  42.1
1014:  ASR     W8,#4,W8
1016:  AND     W10,W8,W8
1018:  CP0     W8
101A:  BRA     Z,10F4
101C:  BCLR.B  42.0
101E:  BCLR.B  42.1
1020:  ASR     W9,#4,W9
1022:  AND     W10,W9,W9
1024:  CP0     W9
1026:  BRA     Z,10F4
1028:  CLR     W10
102A:  SUB     W8,W9,W12
102C:  BRA     NC,1034
102E:  ADD     #3FF,W12
1030:  BRA     C,10F4
1032:  BRA     103C
1034:  MOV     #401,W11
1036:  SUB     W12,W11,W12
1038:  BRA     NC,10F4
103A:  BRA     Z,10F4
103C:  CLR     W8
103E:  CLR     W9
1040:  CLR     W10
1042:  CLR     W11
1044:  AND     #1F,W3
1046:  BSET    W3.4
1048:  AND     #1F,W7
104A:  BSET    W7.4
104C:  MOV     W12,[W15++]
104E:  MOV     #36,W12
1050:  SUB     W0,W4,W0
1052:  SUBB    W1,W5,W1
1054:  SUBB    W2,W6,W2
1056:  SUBB    W3,W7,W3
1058:  BRA     N,105E
105A:  BRA     C,1068
105C:  BRA     NZ,106A
105E:  ADD     W0,W4,W0
1060:  ADDC    W1,W5,W1
1062:  ADDC    W2,W6,W2
1064:  ADDC    W3,W7,W3
1066:  BRA     106A
1068:  BSET    W8.0
106A:  DEC     W12,W12
106C:  BRA     Z,1084
106E:  BCLR.B  42.0
1070:  RLC     W0,W0
1072:  RLC     W1,W1
1074:  RLC     W2,W2
1076:  RLC     W3,W3
1078:  BCLR.B  42.0
107A:  RLC     W8,W8
107C:  RLC     W9,W9
107E:  RLC     W10,W10
1080:  RLC     W11,W11
1082:  BRA     1050
1084:  MOV     [--W15],W12
1086:  BTSC    W11.5
1088:  BRA     108C
108A:  BRA     1098
108C:  BCLR.B  42.0
108E:  RRC     W11,W11
1090:  RRC     W10,W10
1092:  RRC     W9,W9
1094:  RRC     W8,W8
1096:  BRA     109E
1098:  DEC     W12,W12
109A:  BCLR.B  42.0
109C:  BRA     Z,10F4
109E:  BTSC.B  42.0
10A0:  BRA     10B4
10A2:  RLC     W0,W0
10A4:  RLC     W1,W1
10A6:  RLC     W2,W2
10A8:  RLC     W3,W3
10AA:  SUB     W0,W4,W4
10AC:  SUBB    W1,W5,W5
10AE:  SUBB    W2,W6,W6
10B0:  SUBB    W3,W7,W7
10B2:  BRA     NC,10DE
10B4:  INC     W8,W8
10B6:  BRA     NZ,10DE
10B8:  INC     W9,W9
10BA:  BRA     NZ,10DE
10BC:  INC     W10,W10
10BE:  BRA     NZ,10DE
10C0:  INC     W11,W11
10C2:  BRA     NZ,10DE
10C4:  INC     W12,W12
10C6:  BRA     Z,10F4
10C8:  BRA     10DE
10CA:  DEC     W12,W12
10CC:  BRA     Z,10F4
10CE:  BTSC    W11.4
10D0:  BRA     10DE
10D2:  BCLR.B  42.0
10D4:  RLC     W8,W8
10D6:  RLC     W9,W9
10D8:  RLC     W10,W10
10DA:  RLC     W11,W11
10DC:  BRA     10CE
10DE:  SL      W12,#4,W12
10E0:  BCLR.B  42.0
10E2:  BCLR    W12.F
10E4:  BTSC    W13.F
10E6:  BSET    W12.F
10E8:  BCLR    W11.4
10EA:  XOR     W12,W11,W3
10EC:  MOV     W10,W2
10EE:  MOV     W9,W1
10F0:  MOV     W8,W0
10F2:  BRA     10FE
10F4:  MOV     #0,W0
10F6:  MOV     #0,W1
10F8:  MOV     #0,W2
10FA:  MOV     #0,W3
10FC:  BRA     10FE
10FE:  MOV     #1A,W8
1100:  REPEAT  #4
1102:  MOV     [--W15],[W8--]
1104:  MOV     [--W15],W8
1106:  RETURN  
*
1310:  MOV     W5,[W15++]
1312:  MOV     #C,W5
1314:  REPEAT  #3
1316:  MOV     [W5++],[W15++]
1318:  CLR     W9
131A:  MOV     #8000,W8
131C:  BTSC.B  43.0
131E:  XOR     W8,W3,W3
1320:  CP0     W0
1322:  BRA     NZ,132A
1324:  MOV     #7FFF,W10
1326:  AND     W1,W10,W10
1328:  BTSS.B  42.1
132A:  MOV     W1,W10
132C:  XOR     W3,W10,W11
132E:  MOV     W1,W6
1330:  MOV     W3,W7
1332:  MOV     W3,W12
1334:  BCLR.B  42.1
1336:  BCLR.B  42.0
1338:  RLC     W6,W6
133A:  SWAP    W6
133C:  AND     #FF,W6
133E:  CP0     W6
1340:  BRA     Z,1484
1342:  BCLR.B  42.1
1344:  BCLR.B  42.0
1346:  RLC     W7,W7
1348:  SWAP    W7
134A:  AND     #FF,W7
134C:  CP0     W7
134E:  BRA     Z,148E
1350:  BCLR.B  42.1
1352:  BCLR.B  42.0
1354:  CP      W7,W6
1356:  BRA     Z,1490
1358:  BRA     N,14A0
135A:  BCLR    W9.0
135C:  BSET    W9.1
135E:  SUB     W7,W6,W8
1360:  MOV     W7,W6
1362:  AND     #FF,W1
1364:  BSET    W1.7
1366:  AND     #FF,W3
1368:  BSET    W3.7
136A:  MOV     #28,W7
136C:  CP      W7,W8
136E:  BRA     N,1392
1370:  BCLR.B  42.1
1372:  BCLR.B  42.0
1374:  RRC     W1,W1
1376:  RRC     W0,W0
1378:  DEC     W8,W8
137A:  BRA     NZ,1370
137C:  BRA     1398
137E:  MOV     #28,W7
1380:  CP      W7,W8
1382:  BRA     N,1396
1384:  BCLR.B  42.1
1386:  BCLR.B  42.0
1388:  RRC     W3,W3
138A:  RRC     W2,W2
138C:  DEC     W8,W8
138E:  BRA     NZ,1384
1390:  BRA     13B0
1392:  MOV     W2,W0
1394:  MOV     W3,W1
1396:  BRA     141E
1398:  BTSS    W11.F
139A:  BRA     13BE
139C:  BTSC    W9.4
139E:  MOV     W12,W11
13A0:  NEG     W0,W0
13A2:  BRA     Z,13A8
13A4:  COM.B   W1L,W1L
13A6:  BRA     13AA
13A8:  NEG     W1,W1
13AA:  BTSC    W9.4
13AC:  BRA     1404
13AE:  BRA     13BE
13B0:  BTSS    W11.F
13B2:  BRA     13BE
13B4:  NEG     W2,W2
13B6:  BRA     Z,13BC
13B8:  COM.B   W3L,W3L
13BA:  BRA     13BE
13BC:  NEG     W3,W3
13BE:  AND     #FF,W5
13C0:  BCLR.B  42.1
13C2:  BCLR.B  42.0
13C4:  ADD     W0,W2,W0
13C6:  ADDC.B  W1L,W3L,W1L
13C8:  BTSC.B  42.0
13CA:  BSET    W9.3
13CC:  BTSC    W9.0
13CE:  BRA     13E2
13D0:  BTSC    W9.1
13D2:  BRA     13D6
13D4:  BRA     13EC
13D6:  BTSC    W11.F
13D8:  BRA     1404
13DA:  BTSC    W9.3
13DC:  BRA     1430
13DE:  BSET    W9.6
13E0:  BRA     141E
13E2:  BTSC    W11.F
13E4:  BRA     1404
13E6:  BTSC    W9.3
13E8:  BRA     1430
13EA:  BRA     141E
13EC:  BCLR    W9.2
13EE:  BTSC    W11.F
13F0:  BRA     13FA
13F2:  MOV     W10,W11
13F4:  BTSC    W9.3
13F6:  BRA     1430
13F8:  BRA     1466
13FA:  BSET    W9.4
13FC:  XOR.B   #80,W1L
13FE:  BTSC    W1.7
1400:  BRA     139C
1402:  MOV     W10,W11
1404:  AND     #FF,W1
1406:  IOR      W0,  W1,W7
1408:  BRA     Z,141E
140A:  BTSC    W1.7
140C:  BRA     141E
140E:  BCLR.B  42.1
1410:  BCLR.B  42.0
1412:  RLC     W0,W0
1414:  RLC     W1,W1
1416:  DEC     W6,W6
1418:  BTSC.B  42.1
141A:  BRA     147E
141C:  BRA     140A
141E:  BTSC    W9.0
1420:  MOV     W10,W11
1422:  BTSC    W9.1
1424:  MOV     W12,W11
1426:  BTSS    W9.5
1428:  BRA     145E
142A:  BTSC    W10.F
142C:  BSET    W0.8
142E:  BRA     1466
1430:  BSET.B  42.0
1432:  RRC.B   W1L,W1L
1434:  RRC     W0,W0
1436:  BTSC.B  42.0
1438:  BSET    W9.5
143A:  INC     W6,W6
143C:  BRA     Z,147E
143E:  BTSS    W9.5
1440:  BRA     1452
1442:  INC     W0,W0
1444:  BRA     NZ,1452
1446:  INC.B   W1L,W1L
1448:  BRA     NZ,1452
144A:  RRC.B   W1L,W1L
144C:  RRC     W0,W0
144E:  INC     W6,W6
1450:  BRA     Z,147E
1452:  BTSC    W9.0
1454:  MOV     W10,W11
1456:  BTSC    W9.1
1458:  MOV     W12,W11
145A:  BTSC.B  42.1
145C:  BRA     147E
145E:  BTSC    W9.6
1460:  MOV     W10,W11
1462:  BTSC    W9.7
1464:  MOV     W12,W11
1466:  IOR      W0,  W1,W2
1468:  BRA     Z,14B0
146A:  BCLR    W1.7
146C:  SWAP    W6
146E:  BCLR.B  42.1
1470:  BCLR.B  42.0
1472:  RRC     W6,W6
1474:  XOR     W6,W1,W1
1476:  BSET    W1.F
1478:  BTSS    W11.F
147A:  BCLR    W1.F
147C:  BRA     14B0
147E:  MOV     #0,W0
1480:  MOV     #0,W1
1482:  BRA     14B0
1484:  BTSC    W10.F
1486:  XOR     W8,W3,W3
1488:  MOV     W2,W0
148A:  MOV     W3,W1
148C:  BRA     14B0
148E:  BRA     14B0
1490:  AND     #FF,W3
1492:  BSET    W3.7
1494:  AND     #FF,W1
1496:  BSET    W1.7
1498:  BTSC    W11.F
149A:  BCLR    W3.7
149C:  BSET    W9.2
149E:  BRA     13B0
14A0:  SUB     W6,W7,W8
14A2:  AND     #FF,W1
14A4:  BSET    W1.7
14A6:  AND     #FF,W3
14A8:  BSET    W3.7
14AA:  BCLR    W9.1
14AC:  BSET    W9.0
14AE:  BRA     137E
14B0:  MOV     #12,W5
14B2:  REPEAT  #3
14B4:  MOV     [--W15],[W5--]
14B6:  MOV     [--W15],W5
14B8:  RETURN  
*
1522:  MOV     W5,[W15++]
1524:  MOV     #C,W5
1526:  REPEAT  #4
1528:  MOV     [W5++],[W15++]
152A:  MOV     W0,W4
152C:  MOV     W1,W5
152E:  MOV     W3,W7
1530:  MOV     W2,W6
1532:  BCLR.B  42.0
1534:  BCLR.B  42.1
1536:  RLC     W1,W1
1538:  SWAP    W1
153A:  AND     #FF,W1
153C:  CP0     W1
153E:  BRA     Z,15D6
1540:  BCLR.B  42.0
1542:  BCLR.B  42.1
1544:  RLC     W3,W3
1546:  SWAP    W3
1548:  AND     #FF,W3
154A:  CP0     W3
154C:  BRA     Z,15D6
154E:  ZE      W0,W0
1550:  ADD.B   W3L,W1L,W0L
1552:  BRA     C,155C
1554:  SUB     #7F,W0
1556:  BRA     Z,15D6
1558:  BRA     NC,15D6
155A:  BRA     1560
155C:  ADD.B   #81,W0L
155E:  BRA     C,15D6
1560:  XOR     W5,W7,W10
1562:  BCLR.B  42.0
1564:  BCLR.B  42.1
1566:  AND     #FF,W5
1568:  BSET    W5.7
156A:  BCLR.B  42.0
156C:  AND     #FF,W7
156E:  BSET    W7.7
1570:  MUL.UU  W4,W6,W2
1572:  MUL.UU  W5,W6,W8
1574:  ADDC    W8,W3,W3
1576:  MOV     W9,W1
1578:  BTSC.B  42.0
157A:  INC     W1,W1
157C:  BCLR.B  42.0
157E:  MUL.UU  W7,W4,W8
1580:  ADDC    W8,W3,W3
1582:  ADDC    W9,W1,W1
1584:  MUL.UU  W5,W7,W8
1586:  ADDC    W8,W1,W1
1588:  INC     W0,W0
158A:  CP0     W1
158C:  BTSC.B  42.1
158E:  BRA     1592
1590:  BRA     1598
1592:  CP0     W3
1594:  BTSC.B  42.1
1596:  BRA     15A2
1598:  BTSC    W1.F
159A:  BRA     15A2
159C:  RLC     W3,W3
159E:  RLC     W1,W1
15A0:  DEC     W0,W0
15A2:  MOV     W1,W2
15A4:  BCLR.B  42.0
15A6:  BTSS    W3.7
15A8:  BRA     15BC
15AA:  MOV     #FF00,W7
15AC:  AND     W3,W7,W3
15AE:  ADD     #100,W3
15B0:  ADDC    W2,#0,W2
15B2:  CP0     W2
15B4:  BRA     NZ,15BC
15B6:  CP0     W3
15B8:  BRA     NZ,15BC
15BA:  INC     W0,W0
15BC:  SWAP    W0
15BE:  BCLR.B  42.0
15C0:  BCLR.B  42.1
15C2:  RRC     W0,W1
15C4:  BTSC    W10.F
15C6:  BSET    W1.F
15C8:  BCLR    W2.F
15CA:  SWAP    W2
15CC:  XOR.B   W2L,W1L,W1L
15CE:  SWAP    W3
15D0:  MOV.B   W3L,W2L
15D2:  MOV     W2,W0
15D4:  BRA     15DC
15D6:  MOV     #0,W0
15D8:  MOV     #0,W1
15DA:  BRA     15DC
15DC:  MOV     #14,W5
15DE:  REPEAT  #4
15E0:  MOV     [--W15],[W5--]
15E2:  MOV     [--W15],W5
15E4:  RETURN  
*
244A:  MOV     W5,[W15++]
244C:  MOV     #C,W5
244E:  REPEAT  #4
2450:  MOV     [W5++],[W15++]
2452:  CLR     W9
2454:  XOR     W1,W3,W9
2456:  MOV     W1,W6
2458:  MOV     W0,W5
245A:  MOV     W3,W8
245C:  MOV     W2,W7
245E:  RLC     W1,W1
2460:  SWAP    W1
2462:  ZE      W1,W1
2464:  CP0     W1
2466:  BRA     Z,2504
2468:  RLC     W3,W3
246A:  SWAP    W3
246C:  ZE      W3,W3
246E:  CP0     W3
2470:  BRA     Z,2504
2472:  CLR     W0
2474:  SUB.B   W1L,W3L,W0L
2476:  BRA     NC,247E
2478:  ADD.B   #7F,W0L
247A:  BRA     C,2504
247C:  BRA     2484
247E:  SUB.B   #81,W0L
2480:  BRA     NC,2504
2482:  BRA     Z,2504
2484:  MOV     W5,W1
2486:  MOV     W6,W2
2488:  BSET    W2.7
248A:  AND     #FF,W2
248C:  AND     #FF,W8
248E:  BSET    W8.7
2490:  MOV     #19,W10
2492:  CLR     W3
2494:  CLR     W4
2496:  SUB     W1,W7,W1
2498:  SUBB    W2,W8,W2
249A:  BRA     N,24A0
249C:  BRA     C,24A6
249E:  BRA     NZ,24A8
24A0:  ADD     W1,W7,W1
24A2:  ADDC    W2,W8,W2
24A4:  BRA     24A8
24A6:  BSET    W4.0
24A8:  DEC     W10,W10
24AA:  BRA     Z,24BA
24AC:  BCLR.B  42.0
24AE:  RLC     W1,W1
24B0:  RLC     W2,W2
24B2:  BCLR.B  42.0
24B4:  RLC     W4,W4
24B6:  RLC     W3,W3
24B8:  BRA     2496
24BA:  CLR     W10
24BC:  BTSC    W3.8
24BE:  BRA     24C2
24C0:  BRA     24CE
24C2:  BCLR.B  42.0
24C4:  RRC     W3,W3
24C6:  BCLR    W3.7
24C8:  RRC     W4,W4
24CA:  RLC     W10,W10
24CC:  BRA     24D2
24CE:  DEC     W0,W0
24D0:  BRA     Z,2504
24D2:  BTSC    W10.F
24D4:  BRA     NC,24E0
24D6:  RLC     W1,W1
24D8:  RLC     W2,W2
24DA:  SUB     W1,W7,W1
24DC:  SUBB    W2,W8,W2
24DE:  BRA     NC,24F2
24E0:  INC     W4,W4
24E2:  BRA     NZ,24F2
24E4:  INC     W3,W3
24E6:  BRA     NZ,24F2
24E8:  INC     W0,W0
24EA:  BRA     Z,2504
24EC:  BRA     24F2
24EE:  DEC     W0,W0
24F0:  BRA     Z,2504
24F2:  SWAP    W0
24F4:  RRC     W0,W1
24F6:  BSET    W1.F
24F8:  BTSS    W9.F
24FA:  BCLR    W1.F
24FC:  BCLR    W3.7
24FE:  XOR.B   W3L,W1L,W1L
2500:  MOV     W4,W0
2502:  BRA     250A
2504:  MOV     #0,W0
2506:  MOV     #0,W1
2508:  BRA     250A
250A:  MOV     #14,W5
250C:  REPEAT  #4
250E:  MOV     [--W15],[W5--]
2510:  MOV     [--W15],W5
2512:  RETURN  
....................  
.................... #list 
....................  
.................... //#include <24FJ16GA002.H> 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #DEVICE ADC=10 
.................... #fuses NOIOL1WAY, NODEBUG, NOWRT, NOPROTECT, NOJTAG, NOWDT 
.................... #fuses OSCIO 
.................... #fuses FRC_PLL 
.................... #case 
.................... #type signed 
.................... #use delay(internal=8 MHz, clock = 32000000)  
.................... #use fast_io(ALL) 
.................... #pin_select U1TX = PIN_B13 
.................... #pin_select U1RX = PIN_B12 
.................... #use RS232 (UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12, STREAM = COM_A) 
.................... #BIT TX1IF = 0x0084.12  // Tx1 Interrupt flag  IFS0.12 
....................  
.................... ////////////////////////////////////////////////// 
.................... // EXT INT pins 
.................... #if 1 
.................... // INT0 is RB7 
.................... #pin_select INT1 = PIN_B1 
.................... #pin_select INT2 = PIN_B3 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... #if 0 
....................  
.................... #pin_select U2TX = PIN_B10 
.................... #pin_select U2RX = PIN_B11 
....................  
.................... //#use RS232 (UART2, BAUD = 9600, XMIT = PIN_B9, RCV = PIN_B8, STREAM = COM_B) 
.................... //#use RS232 (BAUD = 9600, XMIT = PIN_B10, RCV = PIN_B11, STREAM = COM_B) 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... // REMAP i/o pins 
.................... #if 1 
....................  
.................... #pin_select IC1 = PIN_B4  // RP0  AX2 
.................... #pin_select IC2 = PIN_B5  // RP1  AX3 
.................... #pin_select OC1 = PIN_B2 
....................  
.................... #pin_select IC3 = PIN_B6   
.................... #pin_select IC4 = PIN_B7   
.................... #pin_select OC2 = PIN_B0 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
....................  
.................... #include <stdlib.h>   
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #if defined(__PCD__) 
....................  
.................... char * itoa(signed int48 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int48 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... char * itoa(signed int64 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int64 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................       
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1;         
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................              
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #endif 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <stdlibm.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... /*********************************************************************/ 
.................... #ifndef _STDLIBM 
.................... #define _STDLIBM 
.................... #USE DYNAMIC_MEMORY 
.................... /* Memory Management Functions*/ 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int8 next; }node_t; 
.................... #elif defined(__PCM__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCH__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCD__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #endif 
....................  
....................  
.................... #ifndef debug_stdlibm 
....................    #define debug_stdlibm(s) 
.................... #else 
....................    #define __DO_DEBUG_STDLIBM 
....................     
....................    char g_DebugStdlibmStr[50]; 
....................     
....................    #if defined(__PCD__) 
....................       #if (defined(__PIC24E__)||defined(__dsPIC33E__)) 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x800)) || bit_test(x, 0)) 
....................       #else 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x1000)) || bit_test(x, 0)) 
....................       #endif 
....................    #else 
....................       #define INVALID_MEMORY_LOCATION(x) (x >= getenv("RAM")) 
....................    #endif 
.................... #endif 
....................  
.................... #include <memmgmt.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__PCH__) 
....................  #define _MEMMGMT_CSIZE 32768 
....................  #define _MEMMGMT_POS 15 
.................... #elif defined(__PCD__) 
....................    #define _MEMMGMT_CSIZE 32768 
....................    #define _MEMMGMT_POS 15 
.................... #else 
....................    #define _MEMMGMT_CSIZE 127 
....................    #define _MEMMGMT_POS 7 
.................... #endif 
....................  
.................... node_t * create_node(unsigned int16 size, node_t *ptr) // create node at given location 
*
1E02:  MOV     W5,[W15++]
.................... { 
....................    node_t *result; 
....................    result =ptr; 
1E04:  PUSH    A14
1E06:  POP     A16
....................    result->size=size; 
1E08:  MOV     #0,W0
1E0A:  ADD     A16,W0
1E0C:  MOV     W0,W5
1E0E:  MOV     A12,W4
1E10:  MOV     W4,[W5+#0]
....................    result->next = NULL; 
1E12:  MOV     #2,W0
1E14:  ADD     A16,W0
1E16:  MOV     W0,W5
1E18:  CLR.B   [W5]
1E1A:  MOV.B   #0,W0L
1E1C:  MOV.B   W0L,[W5+#1]
....................    return result; 
1E1E:  PUSH    A16
1E20:  POP     0
1E22:  MOV     [--W15],W5
1E24:  RETURN  
.................... } 
.................... void update_node(node_t *node, unsigned int16 size) // update the size of given node 
*
1D04:  MOV     W5,[W15++]
.................... { 
....................    node->size=size; 
1D06:  MOV     #0,W0
1D08:  ADD     A1A,W0
1D0A:  MOV     W0,W5
1D0C:  MOV     A1C,W4
1D0E:  MOV     W4,[W5+#0]
1D10:  MOV     [--W15],W5
1D12:  RETURN  
.................... } 
....................  
.................... /* Insert node immediately after place */ //old,new 
.................... void insert_node_after(node_t *place, node_t *node)// place the node after another given node 
*
1E26:  MOV     W5,[W15++]
.................... { 
....................     if (place->next==NULL) 
1E28:  MOV     #2,W0
1E2A:  ADD     A08,W0
1E2C:  MOV     [W0],W5
1E2E:  CP0     W5
1E30:  BRA     NZ,1E40
....................        node->next= NULL; 
1E32:  MOV     #2,W0
1E34:  ADD     A0A,W0
1E36:  MOV     W0,W5
1E38:  CLR.B   [W5]
1E3A:  MOV.B   #0,W0L
1E3C:  MOV.B   W0L,[W5+#1]
1E3E:  BRA     1E4C
....................     else 
....................        node->next=place->next; 
1E40:  MOV     #2,W0
1E42:  ADD     A0A,W0
1E44:  MOV     W0,W5
1E46:  MOV     #2,W0
1E48:  ADD     A08,W0
1E4A:  MOV     [W0],[W5]
....................     place->next=node; 
1E4C:  MOV     #2,W0
1E4E:  ADD     A08,W0
1E50:  MOV     W0,W5
1E52:  MOV     A0A,W4
1E54:  MOV     W4,[W5+#0]
1E56:  MOV     [--W15],W5
1E58:  RETURN  
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void remove_node(node_t *node) {// remove the given node from the memlist 
*
1D14:  MOV     W5,[W15++]
....................    node_t *ptr; 
....................    for(ptr=__DYNAMIC_HEAD;ptr->next!=node;ptr=ptr->next); 
1D16:  PUSH    806
1D18:  POP     A20
1D1A:  MOV     #2,W0
1D1C:  ADD     A20,W0
1D1E:  MOV     [W0],W5
1D20:  MOV     A1E,W4
1D22:  CP      W4,W5
1D24:  BRA     Z,1D30
1D26:  MOV     #2,W0
1D28:  ADD     A20,W0
1D2A:  MOV     [W0],[W15++]
1D2C:  POP     A20
1D2E:  BRA     1D1A
....................    ptr->next=node->next; 
1D30:  MOV     #2,W0
1D32:  ADD     A20,W0
1D34:  MOV     W0,W5
1D36:  MOV     #2,W0
1D38:  ADD     A1E,W0
1D3A:  MOV     [W0],[W5]
....................    node=NULL; 
1D3C:  CLR     A1E
1D3E:  MOV     [--W15],W5
1D40:  RETURN  
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__DO_DEBUG_STDLIBM) 
.................... void print_list() { // print the current memlist 
....................     node_t *node; 
....................     debug_stdlibm("\r\nThe list is \n\r"); 
....................     for(node = __DYNAMIC_HEAD; node != NULL; node = node->next) 
....................     { 
....................         sprintf(g_DebugStdlibmStr, "H:0x%lx S:0x%lx N:0x%lx\n\r", node, node->size, node->next); 
....................         debug_stdlibm(g_DebugStdlibmStr); 
....................         if (INVALID_MEMORY_LOCATION(node->next)) 
....................         { 
....................            debug_stdlibm("Breaking because of invalid next node\r\n"); 
....................            break; 
....................         }    
....................     } 
....................     sprintf(g_DebugStdlibmStr, "size of node_t %u\r\n",sizeof(node_t)); 
....................     debug_stdlibm(g_DebugStdlibmStr); 
.................... } 
.................... #endif 
....................  
....................  
....................  
....................  
.................... void traverse() 
1D42:  MOV     W5,[W15++]
1D44:  MOV     W6,[W15++]
.................... { 
....................    node_t *node,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    node=__DYNAMIC_HEAD; 
1D46:  PUSH    806
1D48:  POP     A02
....................    while(node!=NULL) 
1D4A:  CP0     A02
1D4C:  BRA     Z,1DBA
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "traverse() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          break; 
....................       }    
....................      #endif 
....................      if(!bit_test(node->size,_MEMMGMT_POS))// node free 
1D4E:  MOV     #0,W0
1D50:  ADD     A02,W0
1D52:  MOV     [W0],W5
1D54:  BTSC    W5.F
1D56:  BRA     1DB0
....................       { 
....................          nsize=node->size; 
1D58:  MOV     #0,W0
1D5A:  ADD     A02,W0
1D5C:  MOV     [W0],[W15++]
1D5E:  POP     A06
....................          temp=(unsigned int16)node->next; 
1D60:  MOV     #2,W0
1D62:  ADD     A02,W0
1D64:  MOV     [W0],[W15++]
1D66:  POP     A04
....................         #if defined(__DO_DEBUG_STDLIBM) 
....................          if (INVALID_MEMORY_LOCATION(temp)) 
....................          { 
....................             sprintf(g_DebugStdlibmStr, "traverse() invalid temp (0x%LX)\r\n", node); 
....................             debug_stdlibm(g_DebugStdlibmStr); 
....................             break; 
....................          } 
....................         #endif 
....................          if(!bit_test(temp->size,_MEMMGMT_POS)&& (temp==((unsigned int16)node+nsize+sizeof(node_t))))//next node free and consecutive, so combine 
1D68:  MOV     #0,W0
1D6A:  ADD     A04,W0
1D6C:  MOV     [W0],W5
1D6E:  BTSC    W5.F
1D70:  BRA     1DA6
1D72:  MOV     A02,W0
1D74:  ADD     A06,W0
1D76:  MOV     W0,W6
1D78:  ADD     W6,#4,W6
1D7A:  MOV     W6,W0
1D7C:  CP      A04
1D7E:  BRA     NZ,1DA6
....................          { 
....................             nextsize=temp->size; 
1D80:  MOV     #0,W0
1D82:  ADD     A04,W0
1D84:  MOV     [W0],[W15++]
1D86:  POP     A08
....................             nsize+=nextsize+sizeof(node_t); 
1D88:  MOV     A08,W4
1D8A:  ADD     W4,#4,W4
1D8C:  MOV     W4,W0
1D8E:  ADD     A06
....................             remove_node(temp); 
1D90:  PUSH    A04
1D92:  POP     A1E
1D94:  CALL    1D14
....................             update_node(node,nsize); 
1D98:  PUSH    A02
1D9A:  POP     A1A
1D9C:  PUSH    A06
1D9E:  POP     A1C
1DA0:  CALL    1D04
....................          } 
1DA4:  BRA     1DAE
....................          else 
....................          node=node->next; 
1DA6:  MOV     #2,W0
1DA8:  ADD     A02,W0
1DAA:  MOV     [W0],[W15++]
1DAC:  POP     A02
....................       } 
1DAE:  BRA     1DB8
....................       else 
....................       node=node->next; 
1DB0:  MOV     #2,W0
1DB2:  ADD     A02,W0
1DB4:  MOV     [W0],[W15++]
1DB6:  POP     A02
1DB8:  BRA     1D4A
....................    } 
1DBA:  MOV     [--W15],W6
1DBC:  MOV     [--W15],W5
1DBE:  RETURN  
.................... } 
....................  
.................... char *malloc(size_t size) 
*
1E5A:  MOV     W5,[W15++]
1E5C:  MOV     W6,[W15++]
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize; 
....................    #if defined(__PCD__) 
....................    if (size % 2) 
1E5E:  MOV     9F6,W0
1E60:  AND     W0,#1,W0
1E62:  CP0     W0
1E64:  BRA     Z,1E68
....................       size++; 
1E66:  INC     09F6
....................    #endif 
....................    node=__DYNAMIC_HEAD; 
1E68:  PUSH    806
1E6A:  POP     9F8
....................     
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "malloc() size=%lu\r\n", size); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................          
....................    while(node!=NULL) // chk until end of memlist 
1E6C:  CP0     9F8
1E6E:  BRA     Z,1EF2
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=size) // node is free and > = req size 
1E70:  MOV     #0,W0
1E72:  ADD     9F8,W0
1E74:  MOV     [W0],W5
1E76:  BTSC    W5.F
1E78:  BRA     1EE8
1E7A:  MOV     #0,W0
1E7C:  ADD     9F8,W0
1E7E:  MOV     [W0],W6
1E80:  MOV     9F6,W4
1E82:  CP      W4,W6
1E84:  BRA     GTU,1EE8
....................       { 
....................          nsize=node->size;    //nsize = size of the node that "node" being pointed at 
1E86:  MOV     #0,W0
1E88:  ADD     9F8,W0
1E8A:  MOV     [W0],[W15++]
1E8C:  POP     9FC
....................          if(nsize>size +sizeof(node_t)) //node > req size, so split and add new node to memlist 
1E8E:  MOV     9F6,W4
1E90:  ADD     W4,#4,W4
1E92:  MOV     W4,W0
1E94:  MOV     9FC,W4
1E96:  CP      W4,W0
1E98:  BRA     LEU,1ED6
....................          { 
....................             new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
1E9A:  MOV     9FC,W4
1E9C:  MOV     9F6,W3
1E9E:  SUB     W4,W3,W5
1EA0:  SUB     W5,#4,W5
1EA2:  MOV     9F8,W4
1EA4:  ADD     W4,#4,W4
1EA6:  MOV     W4,W6
1EA8:  MOV     W6,W0
1EAA:  ADD     9F6,W0
1EAC:  MOV     W0,W6
1EAE:  MOV     W5,A12
1EB0:  MOV     W6,A14
1EB2:  CALL    1E02
1EB6:  MOV     W0,9FA
....................             insert_node_after(node,new); 
1EB8:  PUSH    9F8
1EBA:  POP     A08
1EBC:  PUSH    9FA
1EBE:  POP     A0A
1EC0:  CALL    1E26
....................             update_node(node,size+_MEMMGMT_CSIZE); 
1EC4:  MOV     #8000,W4
1EC6:  MOV     9F6,W3
1EC8:  ADD     W3,W4,W5
1ECA:  PUSH    9F8
1ECC:  POP     A1A
1ECE:  MOV     W5,A1C
1ED0:  CALL    1D04
....................          } 
1ED4:  BRA     1EE6
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
1ED6:  MOV     #8000,W4
1ED8:  MOV     9FC,W3
1EDA:  ADD     W3,W4,W5
1EDC:  PUSH    9F8
1EDE:  POP     A1A
1EE0:  MOV     W5,A1C
1EE2:  CALL    1D04
....................          //end if 
....................          break; 
1EE6:  BRA     1EF2
....................       }//end if 
....................       node=node->next; 
1EE8:  MOV     #2,W0
1EEA:  ADD     9F8,W0
1EEC:  MOV     [W0],[W15++]
1EEE:  POP     9F8
1EF0:  BRA     1E6C
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
1EF2:  CP0     9F8
1EF4:  BRA     NZ,1EFC
....................    { 
....................       debug_stdlibm("Not enough memory for mallocation\r\n"); 
....................       return NULL; 
1EF6:  CLR     0
1EF8:  BRA     1F06
....................    } 
1EFA:  BRA     1F06
....................    else 
....................    return (char *)node+sizeof(node_t); // return pounsigned int8er to allocated space 
1EFC:  MOV     9F8,W4
1EFE:  ADD     W4,#4,W4
1F00:  MOV     W4,W0
1F02:  MOV     W0,0
1F04:  BRA     1F06
1F06:  MOV     [--W15],W6
1F08:  MOV     [--W15],W5
1F0A:  RETURN  
.................... } 
....................  
.................... char *calloc(size_t nmemb,size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize,resize; 
....................    node=__DYNAMIC_HEAD; 
....................    resize=nmemb*size; 
....................    #if defined(__PCD__) 
....................    if(resize%2) 
....................       resize++; 
....................    #endif 
....................    while(node!=NULL) // chk until end of memlist 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=resize)// node is free and > = req size 
....................       { 
....................          nsize=node->size; 
....................          if(nsize>resize+sizeof(node_t))//node > req size, so split and add new node to memlist 
....................          { 
....................             new=create_node(nsize-resize-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+resize); 
....................             insert_node_after(node,new); 
....................             update_node(node,resize+_MEMMGMT_CSIZE); 
....................          } 
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
....................          //end if 
....................          break; 
....................       }//end if 
....................       node=node->next; 
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
....................    { 
....................       debug_stdlibm("Not enough memory for callocation\r\n"); 
....................       return NULL; 
....................    } 
....................    else 
....................    { 
....................       memset((unsigned int16)node+sizeof(node_t),0,resize);// initialize to 0 
....................       return (char *)(unsigned int16)node+sizeof(node_t);// return pounsigned int8er to allocated space 
....................    } 
.................... } 
.................... void free( void * ptr) 
*
1DC0:  MOV     W5,[W15++]
.................... { 
....................    node_t *node; 
....................    unsigned int16 nsize; 
....................  
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "free() 0x%LX\r\n", ptr); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................  
....................    if(ptr==NULL) // not a valid pounsigned int8er 
1DC2:  CP0     9F4
1DC4:  BRA     NZ,1DCA
....................       return; 
1DC6:  BRA     1DFE
1DC8:  BRA     1DFA
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
1DCA:  MOV     9F4,W4
1DCC:  SUB     W4,#4,W0
1DCE:  MOV     W0,9F6
....................       if(bit_test(node->size,_MEMMGMT_POS))// node occupied 
1DD0:  MOV     #0,W0
1DD2:  ADD     9F6,W0
1DD4:  MOV     [W0],W5
1DD6:  BTSS    W5.F
1DD8:  BRA     1DF6
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
1DDA:  MOV     #0,W0
1DDC:  ADD     9F6,W0
1DDE:  MOV     [W0],W5
1DE0:  MOV     #8000,W4
1DE2:  SUB     W5,W4,W0
1DE4:  MOV     W0,9F8
....................          update_node(node,nsize); 
1DE6:  PUSH    9F6
1DE8:  POP     A1A
1DEA:  PUSH    9F8
1DEC:  POP     A1C
1DEE:  CALL    1D04
....................          ptr=NULL; 
1DF2:  CLR     9F4
....................  
....................       } 
1DF4:  BRA     1DFA
....................       else // wrong input, return 
....................       { 
....................          ptr=NULL; 
1DF6:  CLR     9F4
....................          return; 
1DF8:  BRA     1DFE
....................       } 
....................    } 
....................    traverse(); 
1DFA:  CALL    1D42
1DFE:  MOV     [--W15],W5
1E00:  RETURN  
.................... } 
....................  
.................... char *realloc(void *ptr,size_t size) 
.................... { 
....................    node_t *node,*new,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    char *newptr; 
....................    #if defined(__PCD__) 
....................    if(size %2) 
....................       size++; 
....................    #endif 
....................    if(ptr==NULL)// null pounsigned int8er, so malloc the req memory 
....................       return(malloc(size)); 
....................    else if(size==0) 
....................    { 
....................       free(ptr); 
....................       return(NULL); 
....................    } 
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
....................       if(bit_test(node->size,_MEMMGMT_POS))// chk if valid pounsigned int8er 
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
....................          temp=(unsigned int16)node->next; 
....................          if(nsize>size)// block > req size 
....................          { 
....................         
....................                if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   nextsize=temp->size; 
....................                   remove_node(temp); 
....................                   new=create_node(nextsize+(nsize-size),(unsigned int16)node+size+sizeof(node_t)); 
....................                   insert_node_after(node,new); 
....................                    
....................  
....................                } 
....................                else if (nsize>size +sizeof(node_t))//node > req size, so split and add new node to memlist 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
....................                   insert_node_after(node,new); 
....................                } 
....................                else//not enough space for new node so use original size 
....................                update_node(node,nsize+_MEMMGMT_CSIZE); // update block 
....................  
....................          } 
....................          else // block < req size 
....................          { 
....................             if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................             { 
....................                nextsize=temp->size; 
....................                if(nextsize>=size-nsize) // next block >=difference 
....................                { 
....................                   if(nextsize>size-nsize+sizeof(node_t))//next node > req size, so split and add new node to memlist 
....................                   { 
....................                       update_node(node,size+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                       new=create_node(nextsize-(size-nsize),(unsigned int16)node+size+sizeof(node_t)); 
....................                       insert_node_after(node,new); 
....................                   } 
....................                   else//not enough space for new node in next node, so use original size 
....................                   { 
....................                       update_node(node,nsize+nextsize+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                   } 
....................                } 
....................                else  //next block free but too small for new size 
....................                { 
....................                   newptr = malloc(size);  //use malloc to find new block 
....................                   if(newptr == NULL) 
....................                      return(NULL);        //return NULL if malloc was unable to find new block 
....................                     
....................                   memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                   free(ptr);                    //free original block 
....................                   return(newptr);               //return new pointer 
....................                } 
....................             } 
....................             else  //next block not free 
....................             { 
....................                newptr = malloc(size);  //use malloc to find new block 
....................                if(newptr == NULL)       
....................                   return(NULL);        //return NULL if malloc was unable to find new block 
....................                 
....................                memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                free(ptr);                    //free original block 
....................                return(newptr);               //return new pointer 
....................             } 
....................          } 
....................          return (char *)node+sizeof(node_t); // return pounsigned int8er to the reallocated block 
....................       } 
....................       else // not allocated use malloc 
....................       { 
....................          return(malloc(size)); 
....................       } 
....................    } 
....................  } 
.................... #ENDIF 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include "BL_support.h" 
.................... /******************************************************************************/ 
.................... /* File:    BL_Support.h													  */ 
.................... /* Author:  Dr.Santi Nuratch												  */ 
.................... /*          Embedded Computing and Control Lab., INC-KMUTT 				      */ 
.................... /* Created on 22 September 2016, 13:14										  */ 
.................... /******************************************************************************/ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... /****************************************************************************/ 
.................... // o/p pins  LED 
.................... #define  LED0  PIN_A2 
.................... #define  LED1  PIN_A4 
.................... #define  LED2  PIN_B2 
.................... #define  LED3  PIN_B3 
....................  
.................... // i/p pins  PBSW 
.................... #define  SW0  PIN_B4 
.................... #define  SW1  PIN_B5 
.................... #define  SW2  PIN_B6 
.................... #define  SW3  PIN_B7 
....................  
.................... // ADC  or  i/o pins if not use ADC 
.................... #define  AX0  PIN_A0 
.................... #define  AX1  PIN_A1 
.................... #define  AX2  PIN_B0  // RP0 remap pin 
.................... #define  AX3  PIN_B1  // RP1 remap pin 
....................  
.................... /****************************************************************************/ 
....................  
.................... #endif 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... #include "CDATPIC24.H" 
.................... /* 
.................... ***************************   C DATA TYPE   ******************************* 
.................... **                                                                              
.................... **  project     : C Data Types Extension                                                 
.................... **  filename  : CDATPIC24.H                                                                 
.................... **                                                                                                                
.................... *************************************************************************** 
.................... */ 
....................  
.................... #ifndef   CDATPIC24_INCLUDED 
.................... #define   CDATPIC24_INCLUDED 
....................  
.................... /* 
.................... *************************************************************************** 
....................                             C  TYPEDEFS                                            
.................... *************************************************************************** 
.................... */ 
....................  
.................... /**** C type extensions ****/ 
.................... typedef unsigned char      int8u; 
.................... typedef signed   char      int8s; 
.................... typedef unsigned int       int16u; 
.................... typedef signed   int       int16s; 
.................... typedef unsigned long      int32u; 
.................... typedef signed   long      int32s; 
.................... typedef unsigned long long int64u; 
.................... typedef signed   long long int64s; 
....................  
....................  
.................... #endif 
.................... /* 
.................... ************************************************************************** 
....................                                EOF                                                    
.................... /************************************************************************* 
.................... */ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                         EXPORTED VARIABLES                             **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... #ifndef BITWISE_LIB_C_SRC 
.................... #endif 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                       EXPORTED FUNCTIONS                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //                 Bitwise Library functions (Passed by value) 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //                            FUNCTION : BitSet  
.................... // 
.................... // Description : Set a specified bit in 16-bit unsigned data to logic 1, other   
.................... //               bits are not changed 
.................... // Arguments   : "dat"     is the data whose a bit will be set 
.................... //               "bitPos"  is a specified bit position in "dat" which will be set,  
.................... //                            0 <= bitPos <= 15  (bit 0 is LSB, bit 15 is MSB)  
.................... // Returns     : value of "dat" with a bit at position "bitPos" was set to logic 1 
.................... /****************************************************************************/ 
....................  
.................... int16u BitSet (int16u dat, int16u bitPos); 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... int16u BitClear (int16u dat, int16u bitPos); 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... int16u BitInvt (int16u dat, int16u bitPos); 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... int16u BitTest (int16u dat, int16u bitPos); 
.................... /****************************************************************************/ 
....................  
.................... /*****************************************************************************/ 
.................... //                 Bitwise Library functions (Passed by address) 
.................... /*****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //                            FUNCTION : BitSetP  
.................... // 
.................... // Description : Set a specified bit in 16-bit unsigned variable to logic 1,    
.................... //               other bits are not changed 
.................... // Arguments   : "datPtr"  is the address of a variable whose a bit will be set 
.................... //               "bitPos"  is a specified bit position in the variable which   
.................... //                         will be set,   0 <= bitPos <= 15   
.................... //                         (bit 0 is LSB, bit 15 is MSB)  
.................... // Returns     : none 
.................... /****************************************************************************/ 
....................  
.................... void BitSetP (int16u *datPtr, int16u bitPos); 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... void BitClearP (int16u *datPtr, int16u bitPos); 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... void BitInvtP (int16u *datPtr, int16u bitPos); 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... int16u BitTestP (int16u *datPtr, int16u bitPos); 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                      PROTOTYPES OF LOCAL FUNCTIONS                     **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                           EXPORTED VARIABLES                           **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                            GLOBAL VARIABLES                            **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                           EXPORTED FUNCTIONS                           **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... /*                           	Pass by Value                              	*/ 
.................... /****************************************************************************/ 
....................  
.................... int16u BitSet (int16u dat,int16u bitPos){ 
.................... 	bitPos = bitPos % 16; 
.................... 	dat = dat | (1 << bitPos); 
.................... 	return dat; 
.................... } 
....................  
.................... int16u BitClear (int16u dat,int16u bitPos){ 
.................... 	bitPos = bitPos % 16; 
.................... 	dat = dat & (~(1<<bitPos)); 
.................... 	return dat; 
.................... } 
....................  
.................... int16u BitInvt (int16u dat,int16u bitPos){ 
.................... 	bitPos = bitPos % 16; 
.................... 	dat = dat ^ (1<<bitPos); 
.................... 	return dat;	 
.................... } 
....................  
.................... int16u BitTest (int16u dat,int16u bitPos){ 
.................... 	bitPos = bitPos % 16; 
.................... 	dat = (dat & (1 << bitPos)) >> bitPos; 
.................... 	return dat; 
.................... } 
....................  
.................... /****************************************************************************/ 
.................... /**                        	  Pass by Reference                            **/ 
.................... /****************************************************************************/ 
....................  
.................... /*						Wait for Typing Now I'm Lazy  XD		            */ 
.................... void BitSetP (int16u *datPtr , int16u bitPos) 
.................... { 
.................... 	bitPos = bitPos % 16; 
.................... 	*datPtr = *datPtr | (1<<bitPos); 
.................... 	return; 
.................... } 
.................... void BitClearP (int16u *datPtr , int16u bitPos) 
.................... { 
.................... 	bitPos = bitPos % 16; 
.................... 	*datPtr = *datPtr & (~(1<<bitPos)); 
.................... 	return; 
.................... }  
.................... void BitInvtP (int16u *datPtr , int16u bitPos) 
.................... { 
.................... 	bitPos = bitPos % 16; 
.................... 	*datPtr = *datPtr ^ (1<<bitPos); 
.................... 	return; 
.................... }  
.................... int16u BitTestP (int16u *datPtr , int16u bitPos) 
.................... { 
.................... 	int16u result; 
.................... 	bitPos = bitPos % 16; 
.................... 	*datPtr = (*datPtr & (1 << bitPos)) >> bitPos; 
.................... 	return result; 
.................... }  
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                             LOCAL FUNCTIONS                            **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                                 EOF                                    **/ 
.................... /**                                                                        **/ 
.................... /***************************************************************************/ 
....................  
.................... #import(file="EVENT_DRIVEN_CCS.o") 
.................... /* 
.................... *************************** C SOURCE FILE ************************************ 
....................  
.................... project   : 
.................... filename  : EVENT_DRIVEN_CCS.C 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #define EVENT_DRIVEN_CCS_C_SRC 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                             MODULES USED                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #include "EVENT_DRIVEN_CCS.h" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : EVENT_DRIVEN_CCS.H 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx , 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  EVENT_DRIVEN_CCS_INCLUDED 
.................... #define  EVENT_DRIVEN_CCS_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #include "CONFIG_PIC24.h" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CONFIG_PIC24.H 
.................... version   :  
.................... date      : 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  CONFIG_PIC24_INCLUDED 
.................... #define  CONFIG_PIC24_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... #include <24FJ48GA002.H> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
....................  
.................... #list 
....................  
.................... //#include <24FJ16GA002.H> 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #DEVICE ADC=10 
.................... #fuses NOIOL1WAY, NODEBUG, NOWRT, NOPROTECT, NOJTAG, NOWDT 
.................... #fuses OSCIO 
.................... #fuses FRC_PLL 
.................... #case 
.................... #type signed 
.................... #use delay(internal=8 MHz, clock = 32000000)  
.................... #use fast_io(ALL) 
.................... #pin_select U1TX = PIN_B13 
.................... #pin_select U1RX = PIN_B12 
.................... #use RS232 (UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12, STREAM = COM_A) 
.................... #BIT TX1IF = 0x0084.12  // Tx1 Interrupt flag  IFS0.12 
....................  
.................... ////////////////////////////////////////////////// 
.................... // EXT INT pins 
.................... #if 1 
.................... // INT0 is RB7 
.................... #pin_select INT1 = PIN_B1 
.................... #pin_select INT2 = PIN_B3 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... #if 0 
....................  
.................... #pin_select U2TX = PIN_B10 
.................... #pin_select U2RX = PIN_B11 
....................  
.................... //#use RS232 (UART2, BAUD = 9600, XMIT = PIN_B9, RCV = PIN_B8, STREAM = COM_B) 
.................... //#use RS232 (BAUD = 9600, XMIT = PIN_B10, RCV = PIN_B11, STREAM = COM_B) 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... // REMAP i/o pins 
.................... #if 1 
....................  
.................... #pin_select IC1 = PIN_B4  // RP0  AX2 
.................... #pin_select IC2 = PIN_B5  // RP1  AX3 
.................... #pin_select OC1 = PIN_B2 
....................  
.................... #pin_select IC3 = PIN_B6   
.................... #pin_select IC4 = PIN_B7   
.................... #pin_select OC2 = PIN_B0 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
....................  
.................... #include <stdlib.h>   
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #if defined(__PCD__) 
....................  
.................... char * itoa(signed int48 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int48 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... char * itoa(signed int64 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int64 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................       
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1;         
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................              
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #endif 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <stdlibm.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... /*********************************************************************/ 
.................... #ifndef _STDLIBM 
.................... #define _STDLIBM 
.................... #USE DYNAMIC_MEMORY 
.................... /* Memory Management Functions*/ 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int8 next; }node_t; 
.................... #elif defined(__PCM__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCH__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCD__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #endif 
....................  
....................  
.................... #ifndef debug_stdlibm 
....................    #define debug_stdlibm(s) 
.................... #else 
....................    #define __DO_DEBUG_STDLIBM 
....................     
....................    char g_DebugStdlibmStr[50]; 
....................     
....................    #if defined(__PCD__) 
....................       #if (defined(__PIC24E__)||defined(__dsPIC33E__)) 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x800)) || bit_test(x, 0)) 
....................       #else 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x1000)) || bit_test(x, 0)) 
....................       #endif 
....................    #else 
....................       #define INVALID_MEMORY_LOCATION(x) (x >= getenv("RAM")) 
....................    #endif 
.................... #endif 
....................  
.................... #include <memmgmt.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__PCH__) 
....................  #define _MEMMGMT_CSIZE 32768 
....................  #define _MEMMGMT_POS 15 
.................... #elif defined(__PCD__) 
....................    #define _MEMMGMT_CSIZE 32768 
....................    #define _MEMMGMT_POS 15 
.................... #else 
....................    #define _MEMMGMT_CSIZE 127 
....................    #define _MEMMGMT_POS 7 
.................... #endif 
....................  
.................... node_t * create_node(unsigned int16 size, node_t *ptr) // create node at given location 
.................... { 
....................    node_t *result; 
....................    result =ptr; 
....................    result->size=size; 
....................    result->next = NULL; 
....................    return result; 
.................... } 
.................... void update_node(node_t *node, unsigned int16 size) // update the size of given node 
.................... { 
....................    node->size=size; 
.................... } 
....................  
.................... /* Insert node immediately after place */ //old,new 
.................... void insert_node_after(node_t *place, node_t *node)// place the node after another given node 
.................... { 
....................     if (place->next==NULL) 
....................        node->next= NULL; 
....................     else 
....................        node->next=place->next; 
....................     place->next=node; 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void remove_node(node_t *node) {// remove the given node from the memlist 
....................    node_t *ptr; 
....................    for(ptr=__DYNAMIC_HEAD;ptr->next!=node;ptr=ptr->next); 
....................    ptr->next=node->next; 
....................    node=NULL; 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__DO_DEBUG_STDLIBM) 
.................... void print_list() { // print the current memlist 
....................     node_t *node; 
....................     debug_stdlibm("\r\nThe list is \n\r"); 
....................     for(node = __DYNAMIC_HEAD; node != NULL; node = node->next) 
....................     { 
....................         sprintf(g_DebugStdlibmStr, "H:0x%lx S:0x%lx N:0x%lx\n\r", node, node->size, node->next); 
....................         debug_stdlibm(g_DebugStdlibmStr); 
....................         if (INVALID_MEMORY_LOCATION(node->next)) 
....................         { 
....................            debug_stdlibm("Breaking because of invalid next node\r\n"); 
....................            break; 
....................         }    
....................     } 
....................     sprintf(g_DebugStdlibmStr, "size of node_t %u\r\n",sizeof(node_t)); 
....................     debug_stdlibm(g_DebugStdlibmStr); 
.................... } 
.................... #endif 
....................  
....................  
....................  
....................  
.................... void traverse() 
.................... { 
....................    node_t *node,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    node=__DYNAMIC_HEAD; 
....................    while(node!=NULL) 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "traverse() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          break; 
....................       }    
....................      #endif 
....................      if(!bit_test(node->size,_MEMMGMT_POS))// node free 
....................       { 
....................          nsize=node->size; 
....................          temp=(unsigned int16)node->next; 
....................         #if defined(__DO_DEBUG_STDLIBM) 
....................          if (INVALID_MEMORY_LOCATION(temp)) 
....................          { 
....................             sprintf(g_DebugStdlibmStr, "traverse() invalid temp (0x%LX)\r\n", node); 
....................             debug_stdlibm(g_DebugStdlibmStr); 
....................             break; 
....................          } 
....................         #endif 
....................          if(!bit_test(temp->size,_MEMMGMT_POS)&& (temp==((unsigned int16)node+nsize+sizeof(node_t))))//next node free and consecutive, so combine 
....................          { 
....................             nextsize=temp->size; 
....................             nsize+=nextsize+sizeof(node_t); 
....................             remove_node(temp); 
....................             update_node(node,nsize); 
....................          } 
....................          else 
....................          node=node->next; 
....................       } 
....................       else 
....................       node=node->next; 
....................    } 
.................... } 
....................  
.................... char *malloc(size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize; 
....................    #if defined(__PCD__) 
....................    if (size % 2) 
....................       size++; 
....................    #endif 
....................    node=__DYNAMIC_HEAD; 
....................     
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "malloc() size=%lu\r\n", size); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................          
....................    while(node!=NULL) // chk until end of memlist 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=size) // node is free and > = req size 
....................       { 
....................          nsize=node->size;    //nsize = size of the node that "node" being pointed at 
....................          if(nsize>size +sizeof(node_t)) //node > req size, so split and add new node to memlist 
....................          { 
....................             new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
....................             insert_node_after(node,new); 
....................             update_node(node,size+_MEMMGMT_CSIZE); 
....................          } 
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
....................          //end if 
....................          break; 
....................       }//end if 
....................       node=node->next; 
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
....................    { 
....................       debug_stdlibm("Not enough memory for mallocation\r\n"); 
....................       return NULL; 
....................    } 
....................    else 
....................    return (char *)node+sizeof(node_t); // return pounsigned int8er to allocated space 
.................... } 
....................  
.................... char *calloc(size_t nmemb,size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize,resize; 
....................    node=__DYNAMIC_HEAD; 
....................    resize=nmemb*size; 
....................    #if defined(__PCD__) 
....................    if(resize%2) 
....................       resize++; 
....................    #endif 
....................    while(node!=NULL) // chk until end of memlist 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=resize)// node is free and > = req size 
....................       { 
....................          nsize=node->size; 
....................          if(nsize>resize+sizeof(node_t))//node > req size, so split and add new node to memlist 
....................          { 
....................             new=create_node(nsize-resize-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+resize); 
....................             insert_node_after(node,new); 
....................             update_node(node,resize+_MEMMGMT_CSIZE); 
....................          } 
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
....................          //end if 
....................          break; 
....................       }//end if 
....................       node=node->next; 
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
....................    { 
....................       debug_stdlibm("Not enough memory for callocation\r\n"); 
....................       return NULL; 
....................    } 
....................    else 
....................    { 
....................       memset((unsigned int16)node+sizeof(node_t),0,resize);// initialize to 0 
....................       return (char *)(unsigned int16)node+sizeof(node_t);// return pounsigned int8er to allocated space 
....................    } 
.................... } 
.................... void free( void * ptr) 
.................... { 
....................    node_t *node; 
....................    unsigned int16 nsize; 
....................  
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "free() 0x%LX\r\n", ptr); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................  
....................    if(ptr==NULL) // not a valid pounsigned int8er 
....................       return; 
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
....................       if(bit_test(node->size,_MEMMGMT_POS))// node occupied 
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
....................          update_node(node,nsize); 
....................          ptr=NULL; 
....................  
....................       } 
....................       else // wrong input, return 
....................       { 
....................          ptr=NULL; 
....................          return; 
....................       } 
....................    } 
....................    traverse(); 
.................... } 
....................  
.................... char *realloc(void *ptr,size_t size) 
.................... { 
....................    node_t *node,*new,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    char *newptr; 
....................    #if defined(__PCD__) 
....................    if(size %2) 
....................       size++; 
....................    #endif 
....................    if(ptr==NULL)// null pounsigned int8er, so malloc the req memory 
....................       return(malloc(size)); 
....................    else if(size==0) 
....................    { 
....................       free(ptr); 
....................       return(NULL); 
....................    } 
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
....................       if(bit_test(node->size,_MEMMGMT_POS))// chk if valid pounsigned int8er 
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
....................          temp=(unsigned int16)node->next; 
....................          if(nsize>size)// block > req size 
....................          { 
....................         
....................                if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   nextsize=temp->size; 
....................                   remove_node(temp); 
....................                   new=create_node(nextsize+(nsize-size),(unsigned int16)node+size+sizeof(node_t)); 
....................                   insert_node_after(node,new); 
....................                    
....................  
....................                } 
....................                else if (nsize>size +sizeof(node_t))//node > req size, so split and add new node to memlist 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
....................                   insert_node_after(node,new); 
....................                } 
....................                else//not enough space for new node so use original size 
....................                update_node(node,nsize+_MEMMGMT_CSIZE); // update block 
....................  
....................          } 
....................          else // block < req size 
....................          { 
....................             if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................             { 
....................                nextsize=temp->size; 
....................                if(nextsize>=size-nsize) // next block >=difference 
....................                { 
....................                   if(nextsize>size-nsize+sizeof(node_t))//next node > req size, so split and add new node to memlist 
....................                   { 
....................                       update_node(node,size+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                       new=create_node(nextsize-(size-nsize),(unsigned int16)node+size+sizeof(node_t)); 
....................                       insert_node_after(node,new); 
....................                   } 
....................                   else//not enough space for new node in next node, so use original size 
....................                   { 
....................                       update_node(node,nsize+nextsize+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                   } 
....................                } 
....................                else  //next block free but too small for new size 
....................                { 
....................                   newptr = malloc(size);  //use malloc to find new block 
....................                   if(newptr == NULL) 
....................                      return(NULL);        //return NULL if malloc was unable to find new block 
....................                     
....................                   memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                   free(ptr);                    //free original block 
....................                   return(newptr);               //return new pointer 
....................                } 
....................             } 
....................             else  //next block not free 
....................             { 
....................                newptr = malloc(size);  //use malloc to find new block 
....................                if(newptr == NULL)       
....................                   return(NULL);        //return NULL if malloc was unable to find new block 
....................                 
....................                memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                free(ptr);                    //free original block 
....................                return(newptr);               //return new pointer 
....................             } 
....................          } 
....................          return (char *)node+sizeof(node_t); // return pounsigned int8er to the reallocated block 
....................       } 
....................       else // not allocated use malloc 
....................       { 
....................          return(malloc(size)); 
....................       } 
....................    } 
....................  } 
.................... #ENDIF 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include "BL_support.h" 
.................... /******************************************************************************/ 
.................... /* File:    BL_Support.h													  */ 
.................... /* Author:  Dr.Santi Nuratch												  */ 
.................... /*          Embedded Computing and Control Lab., INC-KMUTT 				      */ 
.................... /* Created on 22 September 2016, 13:14										  */ 
.................... /******************************************************************************/ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... /****************************************************************************/ 
.................... // o/p pins  LED 
.................... #define  LED0  PIN_A2 
.................... #define  LED1  PIN_A4 
.................... #define  LED2  PIN_B2 
.................... #define  LED3  PIN_B3 
....................  
.................... // i/p pins  PBSW 
.................... #define  SW0  PIN_B4 
.................... #define  SW1  PIN_B5 
.................... #define  SW2  PIN_B6 
.................... #define  SW3  PIN_B7 
....................  
.................... // ADC  or  i/o pins if not use ADC 
.................... #define  AX0  PIN_A0 
.................... #define  AX1  PIN_A1 
.................... #define  AX2  PIN_B0  // RP0 remap pin 
.................... #define  AX3  PIN_B1  // RP1 remap pin 
....................  
.................... /****************************************************************************/ 
....................  
.................... #endif 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... #include "CDATPIC24.h" 
.................... /* 
.................... ***************************   C DATA TYPE   ******************************* 
.................... **                                                                              
.................... **  project     : C Data Types Extension                                                 
.................... **  filename  : CDATPIC24.H                                                                 
.................... **                                                                                                                
.................... *************************************************************************** 
.................... */ 
....................  
.................... #ifndef   CDATPIC24_INCLUDED 
.................... #define   CDATPIC24_INCLUDED 
....................  
.................... /* 
.................... *************************************************************************** 
....................                             C  TYPEDEFS                                            
.................... *************************************************************************** 
.................... */ 
....................  
.................... /**** C type extensions ****/ 
.................... typedef unsigned char      int8u; 
.................... typedef signed   char      int8s; 
.................... typedef unsigned int       int16u; 
.................... typedef signed   int       int16s; 
.................... typedef unsigned long      int32u; 
.................... typedef signed   long      int32s; 
.................... typedef unsigned long long int64u; 
.................... typedef signed   long long int64s; 
....................  
....................  
.................... #endif 
.................... /* 
.................... ************************************************************************** 
....................                                EOF                                                    
.................... /************************************************************************* 
.................... */ 
....................  
....................  
.................... #include "EVENT_TYPE_CCS.h" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CTEMPLATE.H 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx , 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  EVENT_TYPE_CCS_H_INCLUDED 
.................... #define  EVENT_TYPE_CCS_H_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... //#include <stdlib.h>  // depend on application requirements. 
.................... //#include "cdat68k.h"  // define data types 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... typedef enum  
.................... { 
.................... 	EV_NULL, 
.................... 	EV_TIMER1, 
.................... 	EV_TIMER2, 
.................... 	EV_TIMER3, 
.................... 	EV_STMR0, 
.................... 	EV_STMR1, 
.................... 	EV_STMR2, 
.................... 	EV_STMR3, 
.................... 	EV_STMR4, 
.................... 	EV_SW0, 
.................... 	EV_SW1, 
.................... 	EV_SW2, 
.................... 	EV_SW3, 
.................... 	EV_TBE1, 
.................... 	EV_RDA1, 
.................... 	EV_OC1, 
.................... 	EV_OC2, 
.................... 	EV_IC1, 
.................... 	EV_IC2, 
.................... 	EV_EXT0, 
.................... 	EV_EXT1, 
.................... 	EV_EXT2 
.................... }EV_TYPE; 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                         EXPORTED VARIABLES                             **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                       EXPORTED FUNCTIONS                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... //#include <stdlib.h>  // depend on application requirements. 
.................... //#include "cdat68k.h"  // define data types 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... #define DECLARE_MEM(BLOCK_TYPE_DEF , MEM_ARRAY, STRUCT_Q_ARRAY, N_BLOCK);\ 
.................... PTR_STRUCT STRUCT_Q_ARRAY[N_BLOCK]; \ 
.................... BLOCK_TYPE_DEF MEM_ARRAY[N_BLOCK]; 
....................  
.................... /****************************************************************************/ 
.................... // Queue error code 
.................... #define Q_OK 0 
.................... #define Q_FULL 1 
.................... #define Q_EMPTY 2 
....................  
.................... #define SINGLE 0 
.................... #define REPEAT 1 
....................  
.................... #define ON 1 
.................... #define OFF 0 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... // Data type for Tick counter 
.................... typedef volatile int32u tickType; 
....................  
.................... //Event structure 
.................... typedef volatile struct  
.................... { 
.................... 	EV_TYPE evType; 
.................... 	void *evDataPtr; 
.................... } EV_STRUCT; 
....................  
.................... typedef volatile struct  
.................... { 
.................... 	int8u evQLength; 
.................... 	int8u evQCount; 
.................... 	int8u evQPut; 
.................... 	int8u evQGet; 
.................... 	EV_STRUCT *evQArray; 
.................... }EVQ_STRUCT; 
....................  
.................... // Event Queue function error codes 
.................... typedef enum 
.................... { 
.................... 	EVQ_OK, 
.................... 	EVQ_FULL, 
.................... 	EVQ_EMPTY 
.................... } Q_ERR; 
....................  
.................... // Struct of pointer for mem qeue array  
.................... typedef volatile struct voidPtrStruct 
.................... { 
.................... 	void *blockPtr; 
.................... } PTR_STRUCT; 
....................  
.................... // Structure type for Mem Control Block 
.................... typedef volatile struct memControlStruct 
.................... { 
.................... 	void *memPtr; 
.................... 	int16u qArrayLength; 
.................... 	int16u count; 
.................... 	int16u put; 
.................... 	int16u get; 
.................... 	PTR_STRUCT *qArrayPtr; // Pointer to array of pointer to void 
.................... 	 
.................... } MCB_STRUCT; 
....................  
.................... // struct type for queue of pointer 
.................... typedef volatile struct qPtrXStruct 
.................... { 
.................... 	int16u arrayLength; 
.................... 	int16u count; 
.................... 	int16u put; 
.................... 	int16u get; 
.................... 	PTR_STRUCT *arrayPtr; // Pointer to array of pointer to void 
.................... } QPTRX_STRUCT; 
....................  
.................... // struct type for queue of int8u 
.................... typedef volatile struct q8UStruct 
.................... { 
.................... 	int16u arrayLength; 
.................... 	int16u count; 
.................... 	int16u put; 
.................... 	int16u get; 
.................... 	int8u *arrayPtr; // Pointer to array of int8u	 
.................... } Q8UX_STRUCT; 
....................  
.................... //STimer struct 
.................... typedef volatile struct  
.................... { 
.................... 	int8u tmrEnb; //enable (ON) / disable (OFF) software timer 
.................... 	int8u tmrMode; // Opareting mode : SINGLE / REPEAT 
.................... 	tickType tmrInit; // Initial value of tick count 
.................... 	tickType tmrCount; // Down counter value 
.................... 	EVQ_STRUCT *evQPtr; // Pointer to event queue 
.................... 	EV_STRUCT sTmrEvStruct; // Software Timer Event  Struct  
.................... } STMR_STRUCT; 
....................  
.................... // RX Frame State 
.................... typedef volatile enum  
.................... { 
.................... 	FRAME_WAIT, 
.................... 	FRAME_PROGRESS, 
.................... 	FRAME_PROGRESS2 
....................  
.................... } FRAME_STATE; 
....................  
.................... // Tx State 
.................... typedef volatile enum  
.................... { 
.................... 	TX1_BUSY, 
.................... 	TX1_READY 
.................... } TX1_STATUS;   
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                         EXPORTED VARIABLES                             **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #ifndef EVENT_DRIVEN_CCS_C_SRC 
.................... extern volatile int16u EvQFullCount; 
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                       EXPORTED FUNCTIONS                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //							Library Functions 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //							Event Queue Functions 
.................... /****************************************************************************/ 
.................... void EvStructInit (EVQ_STRUCT *evStruct, EV_TYPE evType, void *evDataPtr); 
....................  
.................... void EvQInit (EVQ_STRUCT *evQ, EV_STRUCT *evArray, int8u qL); 
....................  
.................... void EvQPut (EVQ_STRUCT *evQ, EV_STRUCT evSource, Q_ERR *errPtr); 
....................  
.................... void EvQGet (EVQ_STRUCT *evQ, EV_STRUCT *evDest, Q_ERR *errPtr); 
....................  
.................... int16u EVQCount (EVQ_STRUCT *evQ); 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //								Memory Functions  
.................... /****************************************************************************/ 
....................  
.................... void MemStructArrayInit (void *memArrayPtr, int16u blockByteSize, int16u nblock, PTR_STRUCT *memQArrayPtr, MCB_STRUCT *memQcbPtr); 
....................  
.................... void MemPtrPut (MCB_STRUCT *memQcbPtr, void *memBlockPtr, int8u *errPtr); 
....................  
.................... void MemPtrGet (MCB_STRUCT *memQcbPtr, PTR_STRUCT *destStructPtr, int8u *errPtr); 
....................  
.................... int16u MemQReadyCount (MCB_STRUCT *memQcbPtr); 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //								QPTXR Functions  
.................... /****************************************************************************/ 
.................... void QPtrXInit (QPTRX_STRUCT *qStructPtr, PTR_STRUCT *buffPtr, int16u qL); 
....................  
.................... void QPtrXPut (QPTRX_STRUCT *qStructPtr, PTR_STRUCT ptrStruct, int8u *errPtr); 
....................  
.................... void QPtrXGet (QPTRX_STRUCT *qStructPtr, PTR_STRUCT *destPtr, int8u *errPtr); 
....................  
.................... int16u QPtrXCount (QPTRX_STRUCT *qStructPtr); 
....................  
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //								Q8UX Functions  
.................... /****************************************************************************/ 
....................  
.................... void Q8UXInit (Q8UX_STRUCT *qStructPtr, int8u *buffPtr, int16u qL); 
....................  
.................... void Q8UXPut (Q8UX_STRUCT *qStructPtr, int8u dataSource, int8u *errPtr); 
....................  
.................... void Q8UXGet (Q8UX_STRUCT *qStructPtr, int8u *destPtr, int8u *errPtr); 
....................  
.................... int16u Q8UXCount (Q8UX_STRUCT *qStructPtr); 
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //								Software  Timer Function 
.................... /****************************************************************************/ 
....................  
.................... void SoftwareTimer (STMR_STRUCT *sTmrPtr, int8u nMaxSTmr); 
....................  
.................... void STmrSystemDeInit (STMR_STRUCT *sTmrPtr, int8u nMaxSTmr); 
....................  
.................... void STmrInit (STMR_STRUCT *sTmrPtr, int8u z, tickType initValue, int8u mode, EV_TYPE evType, void *evDataPtr, EVQ_STRUCT *evQPtr); 
....................  
.................... void STmrStart (STMR_STRUCT *sTmrPtr, int8u z); 
....................  
.................... void STmrPause (STMR_STRUCT *sTmrPtr, int8u z); 
....................  
.................... void STmrStop (STMR_STRUCT *sTmrPtr, int8u z);	 
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //								CPU Dependent Functions 
.................... /****************************************************************************/ 
....................  
.................... void DisableIntr (void); 
....................  
.................... void EnableIntr (void); 
....................  
.................... void CpuIdle (void); 
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                      PROTOTYPES OF LOCAL FUNCTIONS                     **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                           EXPORTED VARIABLES                           **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... volatile int16u EvQFullCount = 0; 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                            GLOBAL VARIABLES                            **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                           EXPORTED FUNCTIONS                           **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //							Library Functions 
.................... /****************************************************************************/ 
....................  
.................... /***************************************************************************/ 
.................... //							Event Queue Functions 
.................... /***************************************************************************/ 
.................... void EvStructInit (EV_STRUCT *evStruct, EV_TYPE evType, void *evDataPtr) 
.................... { 
.................... 	evStruct->evType = evType; 
.................... 	evStruct->evDataPtr = evDataPtr; 
.................... } 
....................  
.................... void EvQInit (EVQ_STRUCT *evQ, EV_STRUCT *evArray, int8u qL) 
.................... { 
.................... 	evQ->evQLength = qL; 
.................... 	evQ->evQCount = 0; 
.................... 	evQ->evQPut = 0; 
.................... 	evQ->evQGet = 0; 
.................... 	evQ->evQArray = evArray; 
.................... } 
....................  
.................... void EvQPut (EVQ_STRUCT *evQ, EV_STRUCT evSource, Q_ERR *errPtr) 
.................... { 
.................... 	if (evQ->evQCount == evQ->evQLength) 
.................... 	{ 
.................... 		*errPtr = EVQ_FULL; 
.................... 	} 
.................... 	else 
.................... 	{ 
.................... 		evQ->evQCount++; 
.................... 		evQ->evQArray[evQ->evQPut] = evSource; 
.................... 		evQ->evQPut ++ ; 
.................... 		if (evQ->evQPut == evQ->evQLength) 
.................... 		{ 
.................... 			evQ->evQPut = 0; 
.................... 		} 
.................... 		*errPtr = EVQ_OK; 
.................... 	} 
.................... } 
....................  
.................... void EvQGet (EVQ_STRUCT *evQ, EV_STRUCT *evDest, Q_ERR *errPtr) 
.................... { 
.................... 	EV_STRUCT tempEvDest; 
.................... 	if (evQ->evQCount == 0) 
.................... 	{ 
.................... 		*errPtr = EVQ_EMPTY; 
.................... 	} 
.................... 	else 
.................... 	{ 
.................... 		evQ->evQCount--; 
.................... 		tempEvDest = evQ->evQArray[evQ->evQGet]; 
.................... 		*evDest = tempEvDest; 
.................... 		evQ->evQGet++; 
.................... 		if (evQ->evQGet == evQ->evQLength) 
.................... 		{ 
.................... 			evQ->evQGet = 0; 
.................... 		} 
.................... 		*errPtr = EVQ_OK; 
.................... 	} 
.................... } 
....................  
.................... int16u EvQCount (EVQ_STRUCT *evQ) 
.................... { 
.................... 	return evQ->evQCount; 
.................... } 
....................  
.................... /***************************************************************************/ 
.................... //							Memory Functions 
.................... /***************************************************************************/ 
....................  
.................... void MemStructArrayInit (void *memArrayPtr, int16u blockByteSize, int16u nBlock, PTR_STRUCT *memQArrayPtr, MCB_STRUCT *memQcbPtr) 
.................... { 
.................... 	int16u i; 
.................... 	for (i=0; i < nBlock; i++) 
.................... 	{ 
.................... 		memQArrayPtr[i].blockPtr = (void *)((int8u *)memArrayPtr + (blockByteSize * i));		 
.................... 	} 
.................... 	memQcbPtr->memPtr = memArrayPtr; 
.................... 	memQcbPtr->qArrayLength = nBlock; 
.................... 	memQcbPtr->count = nBlock; 
.................... 	memQcbPtr->put = 0; 
.................... 	memQcbPtr->get = 0; 
.................... 	memQcbPtr->qArrayPtr = memQArrayPtr; 
.................... } 
....................  
.................... void MemPtrPut (MCB_STRUCT *memQcbPtr, void *memBlockPtr, int8u *errPtr) 
.................... { 
.................... 	if (memQcbPtr->count == memQcbPtr->qArrayLength) 
.................... 	{ 
.................... 		*errPtr = Q_FULL; 
.................... 	} 
.................... 	else 
.................... 	{ 
.................... 		memQcbPtr->count++; 
.................... 		memQcbPtr->qArrayPtr[memQcbPtr->put].blockPtr = memBlockPtr; 
.................... 		memQcbPtr->put++; 
.................... 		if (memQcbPtr->put == memQcbPtr->qArrayLength) 
.................... 		{ 
.................... 			memQcbPtr->put = 0; 
.................... 		} 
.................... 		*errPtr = 0; 
.................... 	} 
.................... } 
....................  
.................... void MemPtrGet (MCB_STRUCT *memQcbPtr, PTR_STRUCT *destStructPtr, int8u *errPtr) 
.................... { 
.................... 	if (memQcbPtr->count == 0) 
.................... 	{ 
.................... 		destStructPtr->blockPtr = (void *)NULL; 
.................... 		*errPtr = Q_EMPTY; 
.................... 	} 
.................... 	else 
.................... 	{ 
.................... 		memQcbPtr->count --; 
.................... 		destStructPtr->blockPtr = memQcbPtr->qArrayPtr[memQcbPtr->get].blockPtr; 
.................... 		memQcbPtr->get++; 
.................... 		if (memQcbPtr->get == memQcbPtr->qArrayLength) 
.................... 		{ 
.................... 			memQcbPtr->get = 0; 
.................... 		} 
.................... 		*errPtr = Q_OK; 
.................... 	} 
.................... } 
....................  
.................... int16u MemQReadyCount (MCB_STRUCT *memQcbPtr) 
.................... { 
.................... 	return memQcbPtr->count; 
.................... } 
....................  
.................... /***************************************************************************/ 
.................... //							QPTRX Functions 
.................... /***************************************************************************/ 
....................  
.................... void QPtrXInit (QPTRX_STRUCT *qStructPtr, PTR_STRUCT *buffPtr, int16u qL) 
*
22E6:  MOV     W5,[W15++]
.................... { 
.................... 	qStructPtr->arrayLength = qL; 
22E8:  MOV     #0,W0
22EA:  ADD     982,W0
22EC:  MOV     W0,W5
22EE:  MOV     986,W4
22F0:  MOV     W4,[W5+#0]
.................... 	qStructPtr->count = 0; 
22F2:  MOV     #2,W0
22F4:  ADD     982,W0
22F6:  MOV     W0,W5
22F8:  CLR.B   [W5]
22FA:  MOV.B   #0,W0L
22FC:  MOV.B   W0L,[W5+#1]
.................... 	qStructPtr->put = 0; 
22FE:  MOV     #4,W0
2300:  ADD     982,W0
2302:  MOV     W0,W5
2304:  CLR.B   [W5]
2306:  MOV.B   #0,W0L
2308:  MOV.B   W0L,[W5+#1]
.................... 	qStructPtr->get = 0; 
230A:  MOV     #6,W0
230C:  ADD     982,W0
230E:  MOV     W0,W5
2310:  CLR.B   [W5]
2312:  MOV.B   #0,W0L
2314:  MOV.B   W0L,[W5+#1]
.................... 	qStructPtr->arrayPtr = buffPtr; 
2316:  MOV     #8,W0
2318:  ADD     982,W0
231A:  MOV     W0,W5
231C:  MOV     984,W4
231E:  MOV     W4,[W5+#0]
2320:  MOV     [--W15],W5
2322:  RETURN  
.................... } 
....................  
.................... void QPtrXPut (QPTRX_STRUCT *qStructPtr, PTR_STRUCT ptrStruct, int8u *errPtr) 
*
1C9A:  MOV     W5,[W15++]
1C9C:  MOV     W6,[W15++]
.................... { 
.................... 	if (qStructPtr->count == qStructPtr->arrayLength) 
1C9E:  MOV     #2,W0
1CA0:  ADD     9E6,W0
1CA2:  MOV     [W0],W5
1CA4:  MOV     #0,W0
1CA6:  ADD     9E6,W0
1CA8:  MOV     W0,W4
1CAA:  MOV     [W4],W0
1CAC:  CP      W5,W0
1CAE:  BRA     NZ,1CB8
.................... 	{ 
.................... 		*errPtr = Q_FULL; 
1CB0:  MOV     9EA,W5
1CB2:  MOV.B   #1,W0L
1CB4:  MOV.B   W0L,[W5]
.................... 	} 
1CB6:  BRA     1CFE
.................... 	else 
.................... 	{ 
.................... 		qStructPtr->count++; 
1CB8:  MOV     #2,W0
1CBA:  ADD     9E6,W0
1CBC:  MOV     W0,W5
1CBE:  INC     [W5],[W5]
.................... 		qStructPtr->arrayPtr[qStructPtr->put] = ptrStruct; 
1CC0:  MOV     #8,W0
1CC2:  ADD     9E6,W0
1CC4:  MOV     [W0],W5
1CC6:  MOV     #4,W0
1CC8:  ADD     9E6,W0
1CCA:  MOV     [W0],W6
1CCC:  SL      W6,#1,W0
1CCE:  ADD     W0,W5,W6
1CD0:  MOV     9E8,W4
1CD2:  MOV     W4,[W6+#0]
.................... 		qStructPtr->put++; 
1CD4:  MOV     #4,W0
1CD6:  ADD     9E6,W0
1CD8:  MOV     W0,W5
1CDA:  INC     [W5],[W5]
.................... 		if (qStructPtr->put == qStructPtr->arrayLength) 
1CDC:  MOV     #4,W0
1CDE:  ADD     9E6,W0
1CE0:  MOV     [W0],W5
1CE2:  MOV     #0,W0
1CE4:  ADD     9E6,W0
1CE6:  MOV     W0,W4
1CE8:  MOV     [W4],W0
1CEA:  CP      W5,W0
1CEC:  BRA     NZ,1CFA
.................... 		{ 
.................... 			qStructPtr->put = 0; 
1CEE:  MOV     #4,W0
1CF0:  ADD     9E6,W0
1CF2:  MOV     W0,W5
1CF4:  CLR.B   [W5]
1CF6:  MOV.B   #0,W0L
1CF8:  MOV.B   W0L,[W5+#1]
.................... 		} 
.................... 		*errPtr = Q_OK; 
1CFA:  MOV     9EA,W5
1CFC:  CLR.B   [W5]
.................... 	} 
1CFE:  MOV     [--W15],W6
1D00:  MOV     [--W15],W5
1D02:  RETURN  
.................... } 
....................  
.................... void QPtrXGet (QPTRX_STRUCT *qStructPtr, PTR_STRUCT *destPtr, int8u *errPtr) 
*
238C:  MOV     W5,[W15++]
238E:  MOV     W6,[W15++]
2390:  MOV     W7,[W15++]
.................... { 
.................... 	if (qStructPtr->count == 0) 
2392:  MOV     #2,W0
2394:  ADD     982,W0
2396:  MOV     [W0],W5
2398:  CP0     W5
239A:  BRA     NZ,23A4
.................... 	{ 
.................... 		*errPtr = Q_EMPTY; 
239C:  MOV     986,W5
239E:  MOV.B   #2,W0L
23A0:  MOV.B   W0L,[W5]
.................... 	} 
23A2:  BRA     23EE
.................... 	else 
.................... 	{ 
.................... 		qStructPtr->count--; 
23A4:  MOV     #2,W0
23A6:  ADD     982,W0
23A8:  MOV     W0,W5
23AA:  DEC     [W5],[W5]
.................... 		destPtr->blockPtr = qStructPtr->arrayPtr[qStructPtr->get].blockPtr; 
23AC:  MOV     #0,W0
23AE:  ADD     984,W0
23B0:  MOV     W0,W5
23B2:  MOV     #8,W0
23B4:  ADD     982,W0
23B6:  MOV     [W0],W6
23B8:  MOV     #6,W0
23BA:  ADD     982,W0
23BC:  MOV     [W0],W7
23BE:  SL      W7,#1,W7
23C0:  ADD     W6,W7,W0
23C2:  MOV     [W0],[W5]
.................... 		qStructPtr->get++; 
23C4:  MOV     #6,W0
23C6:  ADD     982,W0
23C8:  MOV     W0,W5
23CA:  INC     [W5],[W5]
.................... 		if (qStructPtr->get == qStructPtr->arrayLength) 
23CC:  MOV     #6,W0
23CE:  ADD     982,W0
23D0:  MOV     [W0],W5
23D2:  MOV     #0,W0
23D4:  ADD     982,W0
23D6:  MOV     W0,W4
23D8:  MOV     [W4],W0
23DA:  CP      W5,W0
23DC:  BRA     NZ,23EA
.................... 		{ 
.................... 			qStructPtr->get = 0; 
23DE:  MOV     #6,W0
23E0:  ADD     982,W0
23E2:  MOV     W0,W5
23E4:  CLR.B   [W5]
23E6:  MOV.B   #0,W0L
23E8:  MOV.B   W0L,[W5+#1]
.................... 		} 
.................... 		*errPtr = Q_OK; 
23EA:  MOV     986,W5
23EC:  CLR.B   [W5]
.................... 	} 
23EE:  MOV     [--W15],W7
23F0:  MOV     [--W15],W6
23F2:  MOV     [--W15],W5
23F4:  RETURN  
.................... } 
....................  
.................... int16u QPtrXCount (QPTRX_STRUCT *qStructPtr) 
.................... { 
.................... 	return qStructPtr->count; 
.................... } 
....................  
.................... /***************************************************************************/ 
.................... //							Q8UX Functions 
.................... /***************************************************************************/ 
....................  
.................... void Q8UXInit (Q8UX_STRUCT *qStructPtr, int8u *buffPtr, int16u qL) 
*
2324:  MOV     W5,[W15++]
.................... { 
.................... 	qStructPtr->arrayLength = qL; 
2326:  MOV     #0,W0
2328:  ADD     982,W0
232A:  MOV     W0,W5
232C:  MOV     986,W4
232E:  MOV     W4,[W5+#0]
.................... 	qStructPtr->count = 0; 
2330:  MOV     #2,W0
2332:  ADD     982,W0
2334:  MOV     W0,W5
2336:  CLR.B   [W5]
2338:  MOV.B   #0,W0L
233A:  MOV.B   W0L,[W5+#1]
.................... 	qStructPtr->put = 0; 
233C:  MOV     #4,W0
233E:  ADD     982,W0
2340:  MOV     W0,W5
2342:  CLR.B   [W5]
2344:  MOV.B   #0,W0L
2346:  MOV.B   W0L,[W5+#1]
.................... 	qStructPtr->get = 0; 
2348:  MOV     #6,W0
234A:  ADD     982,W0
234C:  MOV     W0,W5
234E:  CLR.B   [W5]
2350:  MOV.B   #0,W0L
2352:  MOV.B   W0L,[W5+#1]
.................... 	qStructPtr->arrayPtr = buffPtr; 
2354:  MOV     #8,W0
2356:  ADD     982,W0
2358:  MOV     W0,W5
235A:  MOV     984,W4
235C:  MOV     W4,[W5+#0]
235E:  MOV     [--W15],W5
2360:  RETURN  
.................... } 
....................  
.................... void Q8UXPut (Q8UX_STRUCT *qStructPtr, int8u dataSource, int8u *errPtr) 
*
2524:  MOV     W5,[W15++]
2526:  MOV     W6,[W15++]
2528:  MOV     W7,[W15++]
.................... { 
.................... 	if (qStructPtr->count == qStructPtr->arrayLength) 
252A:  MOV     #2,W0
252C:  ADD     99C,W0
252E:  MOV     [W0],W5
2530:  MOV     #0,W0
2532:  ADD     99C,W0
2534:  MOV     W0,W4
2536:  MOV     [W4],W0
2538:  CP      W5,W0
253A:  BRA     NZ,2544
.................... 	{ 
.................... 		*errPtr = Q_FULL; 
253C:  MOV     9A0,W5
253E:  MOV.B   #1,W0L
2540:  MOV.B   W0L,[W5]
.................... 	} 
2542:  BRA     2588
.................... 	else 
.................... 	{ 
.................... 		qStructPtr->count ++; 
2544:  MOV     #2,W0
2546:  ADD     99C,W0
2548:  MOV     W0,W5
254A:  INC     [W5],[W5]
.................... 		qStructPtr->arrayPtr[qStructPtr->put] = dataSource; 
254C:  MOV     #8,W0
254E:  ADD     99C,W0
2550:  MOV     [W0],W5
2552:  MOV     #4,W0
2554:  ADD     99C,W0
2556:  MOV     [W0],W6
2558:  ADD     W5,W6,W7
255A:  MOV     99E,W0
255C:  MOV.B   W0L,[W7+#0]
.................... 		qStructPtr->put++; 
255E:  MOV     #4,W0
2560:  ADD     99C,W0
2562:  MOV     W0,W5
2564:  INC     [W5],[W5]
.................... 		if (qStructPtr->put == qStructPtr->arrayLength) 
2566:  MOV     #4,W0
2568:  ADD     99C,W0
256A:  MOV     [W0],W5
256C:  MOV     #0,W0
256E:  ADD     99C,W0
2570:  MOV     W0,W4
2572:  MOV     [W4],W0
2574:  CP      W5,W0
2576:  BRA     NZ,2584
.................... 		{ 
.................... 			qStructPtr->put = 0; 
2578:  MOV     #4,W0
257A:  ADD     99C,W0
257C:  MOV     W0,W5
257E:  CLR.B   [W5]
2580:  MOV.B   #0,W0L
2582:  MOV.B   W0L,[W5+#1]
.................... 		} 
.................... 		*errPtr = Q_OK; 
2584:  MOV     9A0,W5
2586:  CLR.B   [W5]
.................... 	} 
2588:  MOV     [--W15],W7
258A:  MOV     [--W15],W6
258C:  MOV     [--W15],W5
258E:  RETURN  
.................... } 
....................  
.................... void Q8UXGet (Q8UX_STRUCT *qStructPtr, int8u *destPtr, int8u *errPtr) 
*
204E:  MOV     W5,[W15++]
2050:  MOV     W6,[W15++]
2052:  MOV     W7,[W15++]
.................... { 
.................... 	if (qStructPtr->count == 0) 
2054:  MOV     #2,W0
2056:  ADD     9DE,W0
2058:  MOV     [W0],W5
205A:  CP0     W5
205C:  BRA     NZ,2066
.................... 	{ 
.................... 		*errPtr = Q_EMPTY; 
205E:  MOV     9E2,W5
2060:  MOV.B   #2,W0L
2062:  MOV.B   W0L,[W5]
.................... 	} 
2064:  BRA     20AA
.................... 	else 
.................... 	{ 
.................... 		qStructPtr->count--; 
2066:  MOV     #2,W0
2068:  ADD     9DE,W0
206A:  MOV     W0,W5
206C:  DEC     [W5],[W5]
.................... 		*destPtr = qStructPtr->arrayPtr[qStructPtr->get]; 
206E:  MOV     9E0,W5
2070:  MOV     #8,W0
2072:  ADD     9DE,W0
2074:  MOV     [W0],W6
2076:  MOV     #6,W0
2078:  ADD     9DE,W0
207A:  MOV     [W0],W7
207C:  ADD     W6,W7,W0
207E:  MOV.B   [W0],[W5]
.................... 		qStructPtr->get++; 
2080:  MOV     #6,W0
2082:  ADD     9DE,W0
2084:  MOV     W0,W5
2086:  INC     [W5],[W5]
.................... 		if(qStructPtr->get == qStructPtr->arrayLength) 
2088:  MOV     #6,W0
208A:  ADD     9DE,W0
208C:  MOV     [W0],W5
208E:  MOV     #0,W0
2090:  ADD     9DE,W0
2092:  MOV     W0,W4
2094:  MOV     [W4],W0
2096:  CP      W5,W0
2098:  BRA     NZ,20A6
.................... 		{ 
.................... 			qStructPtr->get = 0; 
209A:  MOV     #6,W0
209C:  ADD     9DE,W0
209E:  MOV     W0,W5
20A0:  CLR.B   [W5]
20A2:  MOV.B   #0,W0L
20A4:  MOV.B   W0L,[W5+#1]
.................... 		} 
.................... 		*errPtr = 0; 
20A6:  MOV     9E2,W5
20A8:  CLR.B   [W5]
.................... 	} 
20AA:  MOV     [--W15],W7
20AC:  MOV     [--W15],W6
20AE:  MOV     [--W15],W5
20B0:  RETURN  
.................... } 
....................  
.................... int16u Q8UXCount (Q8UX_STRUCT *qStructPtr) 
*
2514:  MOV     W5,[W15++]
.................... { 
.................... 	return qStructPtr->count; 
2516:  MOV     #2,W0
2518:  ADD     99A,W0
251A:  MOV     W0,W5
251C:  MOV     [W5],[W15++]
251E:  POP     0
2520:  MOV     [--W15],W5
2522:  RETURN  
.................... } 
....................  
.................... /***************************************************************************/ 
.................... //							Q8UX Functions 
.................... /***************************************************************************/ 
....................  
.................... void SoftwareTimer (STMR_STRUCT *sTmrPtr, int8u nMaxSTmr) 
.................... { 
.................... 	int8u k; 
.................... 	Q_ERR err; 
.................... 	for (k=0 ; k < nMaxSTmr; k++) 
.................... 	{ 
.................... 		if (sTmrPtr[k].tmrEnb == ON) 
.................... 		{ 
.................... 			sTmrPtr[k].tmrCount--; 
.................... 			if (sTmrPtr[k].tmrCount == 0) 
.................... 			{ 
.................... 				EvQPut (sTmrPtr[k].evQPtr, sTmrPtr[k].sTmrEvStruct, &err); 
.................... 				if (err == EVQ_FULL) 
.................... 				{ 
.................... 					EvQFullCount ++; 
.................... 				} 
.................... 				sTmrPtr[k].tmrCount = sTmrPtr[k].tmrInit; 
.................... 				if (sTmrPtr[k].tmrMode == SINGLE) 
.................... 				{ 
.................... 					sTmrPtr[k].tmrEnb = OFF; 
.................... 				} 
.................... 			} 
.................... 		} 
.................... 	} 
.................... } 
....................  
.................... /*****************************************************************************/ 
....................  
.................... void STmrSystemDeInit (STMR_STRUCT *sTmrPtr, int8u nMaxSTmr) 
.................... { 
.................... 	int8u k; 
.................... 	for (k=0; k<nMaxSTmr; k++) 
.................... 	{ 
.................... 		sTmrPtr[k].tmrEnb = OFF; 
.................... 		sTmrPtr[k].evQPtr = NULL; 
.................... 	} 
.................... } 
....................  
.................... /*****************************************************************************/ 
....................  
.................... void STmrInit (STMR_STRUCT *sTmrPtr, int8u z, tickType initValue, int8u mode, EV_TYPE evType, void *evDataPtr, EVQ_STRUCT *evQPtr) 
.................... { 
.................... 	sTmrPtr[z].tmrEnb = OFF; 
.................... 	sTmrPtr[z].tmrMode = mode; 
.................... 	sTmrPtr[z].tmrInit = initValue; 
.................... 	sTmrPtr[z].tmrCount = initValue; 
.................... 	sTmrPtr[z].evQPtr = evQPtr; 
.................... 	EvStructInit (&(sTmrPtr[z].sTmrEvStruct), evType, evDataPtr); 
.................... } 
....................  
.................... /*****************************************************************************/ 
....................  
.................... void STmrStart (STMR_STRUCT *sTmrPtr, int8u z) 
.................... { 
.................... 	Q_ERR err; 
.................... 	if (sTmrPtr[z].tmrEnb == OFF) 
.................... 	{ 
.................... 		if (sTmrPtr[z].tmrCount != 0) 
.................... 		{ 
.................... 			sTmrPtr[z].tmrEnb = ON; 
.................... 		} 
.................... 		else 
.................... 		{ 
.................... 			EvQPut (sTmrPtr[z].evQPtr, sTmrPtr[z].sTmrEvStruct, &err); 
.................... 			if (err == EVQ_FULL) 
.................... 			{ 
.................... 				EvQFullCount++; 
.................... 			} 
.................... 		} 
.................... 	} 
.................... } 
....................  
.................... /*****************************************************************************/ 
....................  
.................... void STmrPause (STMR_STRUCT *sTmrPtr, int8u z) 
.................... { 
.................... 	(sTmrPtr + z)->tmrEnb = OFF; 
.................... } 
.................... /*****************************************************************************/ 
....................  
.................... void STmrStop (STMR_STRUCT *sTmrPtr, int8u z) 
.................... { 
.................... 	sTmrPtr[z].tmrEnb = OFF; 
.................... 	sTmrPtr[z].tmrCount = sTmrPtr[z].tmrInit; 
.................... } 
.................... /*****************************************************************************/ 
....................  
.................... /*****************************************************************************/ 
.................... //								CPU Dependent Functions 
.................... /*****************************************************************************/ 
....................  
.................... void DisableIntr(void) 
.................... { 
.................... 	disable_interrupts (INTR_GLOBAL); 
*
222C:  BCLR.B  81.7
222E:  MOV     #E0,W4
2230:  MOV     W4,42
2232:  BSET.B  81.7
2234:  RETURN  
.................... } 
....................  
.................... void EnableIntr(void) 
.................... { 
.................... 	enable_interrupts (INTR_GLOBAL); 
*
2384:  BCLR.B  81.7
2386:  CLR     42
2388:  BSET.B  81.7
238A:  RETURN  
.................... } 
....................  
.................... void CpuIdle (void) 
.................... { 
.................... } 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                             LOCAL FUNCTIONS                            **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                                 EOF                                    **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #import(file="MainMonalisa.o") 
.................... /* 
.................... *************************** C SOURCE FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CTEMPLATE.C 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #define MainMonalisa_C_SRC 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                             MODULES USED                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #include "MainMonalisa.h" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CTEMPLATE.H 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx , 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  MainMonalisa_INCLUDED 
.................... #define  MainMonalisa_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... //#include <stdlib.h>  // depend on application requirements. 
.................... //#include "cdat68k.h"  // define data types 
.................... #include "CONFIG_PIC24.H" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CONFIG_PIC24.H 
.................... version   :  
.................... date      : 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  CONFIG_PIC24_INCLUDED 
.................... #define  CONFIG_PIC24_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... #include <24FJ48GA002.H> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #1C,W3
0E00:  SUB     W0,W3,W3
0E02:  BRA     C,E0E
0E04:  MOV     #E18,W3
0E06:  ADD     W3,W0,W0
0E08:  TBLRDL.B[W0],W0L
0E0A:  CLR.B   1
0E0C:  RETURN  
0E0E:  MOV     #E18,W0
0E10:  ADD     W3,W3,W3
0E12:  ADD     W3,W0,W3
0E14:  TBLRDH  [W3],W0
0E16:  RETURN  
0E18:  DATA    58,20,20
0E1A:  DATA    3A,20,2C
0E1C:  DATA    4B,70,20
0E1E:  DATA    20,3D,4B
0E20:  DATA    20,25,69
0E22:  DATA    64,2E,20
0E24:  DATA    25,64,3D
0E26:  DATA    20,2C,20
0E28:  DATA    20,4B,25
0E2A:  DATA    64,20,64
0E2C:  DATA    3D,20,2E
0E2E:  DATA    25,64,25
0E30:  DATA    2E,25,64
0E32:  DATA    64,0A,00
0E34:  CLR     32
0E36:  MOV     #1C,W3
0E38:  SUB     W0,W3,W3
0E3A:  BRA     C,E46
0E3C:  MOV     #E50,W3
0E3E:  ADD     W3,W0,W0
0E40:  TBLRDL.B[W0],W0L
0E42:  CLR.B   1
0E44:  RETURN  
0E46:  MOV     #E50,W0
0E48:  ADD     W3,W3,W3
0E4A:  ADD     W3,W0,W3
0E4C:  TBLRDH  [W3],W0
0E4E:  RETURN  
0E50:  DATA    59,20,20
0E52:  DATA    3A,20,2C
0E54:  DATA    4B,70,20
0E56:  DATA    20,3D,4B
0E58:  DATA    20,25,69
0E5A:  DATA    64,2E,20
0E5C:  DATA    25,64,3D
0E5E:  DATA    20,2C,20
0E60:  DATA    20,4B,25
0E62:  DATA    64,20,64
0E64:  DATA    3D,20,2E
0E66:  DATA    25,64,25
0E68:  DATA    2E,25,64
0E6A:  DATA    64,0A,00
0E6C:  CLR     32
0E6E:  MOV     #E78,W3
0E70:  ADD     W3,W0,W0
0E72:  TBLRDL.B[W0],W0L
0E74:  CLR.B   1
0E76:  RETURN  
0E78:  DATA    58,20,00
0E7A:  DATA    3A,20,00
0E7C:  DATA    25,64,00
0E7E:  DATA    2C,25,00
0E80:  DATA    64,2C,00
0E82:  DATA    25,64,00
0E84:  DATA    2C,25,00
0E86:  DATA    64,2C,00
0E88:  DATA    25,64,00
0E8A:  DATA    0A,00,00
0E8C:  MOV     W5,[W15++]
0E8E:  MOV     #C,W5
0E90:  REPEAT  #3
0E92:  MOV     [W5++],[W15++]
0E94:  MOV     W0,W4
0E96:  MOV     W1,W5
0E98:  MOV     W2,W6
0E9A:  MOV     W3,W7
0E9C:  CLR     W0
0E9E:  CLR     W1
0EA0:  CLR     W2
0EA2:  CLR     W3
0EA4:  BCLR    W8.0
0EA6:  BTSS    W7.F
0EA8:  BRA     EB4
0EAA:  BSET    W8.0
0EAC:  NEG     W4,W4
0EAE:  COM     W5,W5
0EB0:  COM     W6,W6
0EB2:  COM     W7,W7
0EB4:  IOR      W4,  W5,W9
0EB6:  BRA     NZ,EBC
0EB8:  IOR      W6,  W7,W9
0EBA:  BRA     Z,EE6
0EBC:  MOV     #473,W9
0EBE:  BTSC    W3.4
0EC0:  BRA     ED8
0EC2:  BCLR.B  42.0
0EC4:  RLC     W4,W4
0EC6:  RLC     W5,W5
0EC8:  RLC     W6,W6
0ECA:  RLC     W7,W7
0ECC:  RLC     W0,W0
0ECE:  RLC     W1,W1
0ED0:  RLC     W2,W2
0ED2:  RLC     W3,W3
0ED4:  DEC     W9,W9
0ED6:  BRA     NZ,EBE
0ED8:  SL      W9,#4,W9
0EDA:  BCLR.B  42.0
0EDC:  BCLR    W9.F
0EDE:  BCLR    W3.4
0EE0:  XOR     W9,W3,W3
0EE2:  BTSC    W8.0
0EE4:  BSET    W3.F
0EE6:  MOV     #12,W5
0EE8:  REPEAT  #3
0EEA:  MOV     [--W15],[W5--]
0EEC:  MOV     [--W15],W5
0EEE:  RETURN  
*
1108:  MOV     W5,[W15++]
110A:  MOV     W6,[W15++]
110C:  MOV     W3,W4
110E:  MOV     W3,W6
1110:  BCLR.B  42.0
1112:  ASR     W4,#4,W4
1114:  MOV     #7FF,W5
1116:  AND     W5,W4,W4
1118:  BRA     NZ,1120
111A:  MUL.UU  W0,#0,W0
111C:  CLR     W2
111E:  BRA     1146
1120:  SUB     #380,W4
1122:  AND     #F,W3
1124:  MOV     #3,W7
1126:  BCLR.B  42.0
1128:  RLC     W0,W0
112A:  RLC     W1,W1
112C:  RLC     W2,W2
112E:  RLC     W3,W3
1130:  DEC     W7,W7
1132:  BRA     NZ,1126
1134:  MOV     W1,W0
1136:  MOV     W2,W1
1138:  BCLR    W3.7
113A:  SWAP    W4
113C:  BCLR.B  42.0
113E:  RRC     W4,W4
1140:  BTSC    W6.F
1142:  BSET    W4.F
1144:  XOR     W4,W3,W2
1146:  MOV     [--W15],W6
1148:  MOV     [--W15],W5
114A:  RETURN  
*
14BA:  MOV     W5,[W15++]
14BC:  MOV     W6,[W15++]
14BE:  MOV     W7,[W15++]
14C0:  XOR     W1,W3,W4
14C2:  BTSS    W4.F
14C4:  BRA     14D2
14C6:  BCLR.B  42.0
14C8:  BCLR.B  42.1
14CA:  BTSS    W1.F
14CC:  BRA     151A
14CE:  BSET.B  42.0
14D0:  BRA     151A
14D2:  MOV     W1,W4
14D4:  MOV     W0,W5
14D6:  MOV     W3,W6
14D8:  MOV     W2,W7
14DA:  RLC     W1,W1
14DC:  SWAP    W1
14DE:  RLC     W3,W3
14E0:  SWAP    W3
14E2:  SUB.B   W3L,W1L,W1L
14E4:  BRA     Z,14F0
14E6:  BTSS    W4.F
14E8:  BRA     151A
14EA:  MOV     #1,W0
14EC:  XOR.B   42
14EE:  BRA     151A
14F0:  MOV.B   W4L,W1L
14F2:  MOV.B   W6L,W3L
14F4:  BCLR    W1.7
14F6:  BCLR    W3.7
14F8:  SUB.B   W3L,W1L,W1L
14FA:  BRA     Z,1506
14FC:  BTSS    W4.F
14FE:  BRA     151A
1500:  MOV     #1,W0
1502:  XOR.B   42
1504:  BRA     151A
1506:  SUB     W7,W5,W1
1508:  BRA     Z,1514
150A:  BTSS    W4.F
150C:  BRA     151A
150E:  MOV     #1,W0
1510:  XOR.B   42
1512:  BRA     151A
1514:  BCLR.B  42.0
1516:  BRA     151A
1518:  BRA     151A
151A:  MOV     [--W15],W7
151C:  MOV     [--W15],W6
151E:  MOV     [--W15],W5
1520:  RETURN  
*
1736:  MOV     W0,W2
1738:  MOV     W1,W3
173A:  MOV.B   W1L,W0L
173C:  SWAP    W0
173E:  BSET    W0.F
1740:  RLC     W1,W1
1742:  SWAP    W1
1744:  ZE      W1,W1
1746:  MOV     #8E,W4
1748:  SUB.B   W4L,W1L,W1L
174A:  BRA     Z,1758
174C:  CP0     W0
174E:  BRA     Z,1758
1750:  BCLR.B  42.0
1752:  RRC     W0,W0
1754:  DEC     W1,W1
1756:  BRA     NZ,174C
1758:  BTSS    W3.F
175A:  BRA     1760
175C:  NEG     W0,W0
175E:  BRA     1760
1760:  RETURN  
1762:  MOV     W5,[W15++]
1764:  MOV     #C,W5
1766:  REPEAT  #3
1768:  MOV     [W5++],[W15++]
176A:  BTSS    W0.F
176C:  BRA     1786
176E:  NEG     W0,W0
1770:  BSET    W4.8
1772:  BTSS    W4.F
1774:  BRA     1786
1776:  MOV     W0,[W15++]
1778:  MOV     #2D,W0
177A:  BTSC.B  223.1
177C:  BRA     177A
177E:  MOV     W0,224
1780:  MOV     [--W15],W0
1782:  BCLR    W4.8
1784:  DEC.B   0008
1786:  CLR     W5
1788:  MOV     W0,W7
178A:  MOV     W4,W9
178C:  BCLR    W4.F
178E:  CP0.B   W4L
1790:  BRA     NZ,179E
1792:  BTSC    W9.F
1794:  BRA     179A
1796:  MOV     #0,W5
1798:  BRA     17B8
179A:  MOV     #0,W5
179C:  BRA     17B8
179E:  SUB.B   W4L,#6,W5L
17A0:  BRA     NC,17B6
17A2:  MOV     #30,W0
17A4:  BTSS    W9.F
17A6:  MOV     #20,W0
17A8:  BTSC.B  223.1
17AA:  BRA     17A8
17AC:  MOV     W0,224
17AE:  DEC     W5,W5
17B0:  BRA     NN,17A8
17B2:  MOV     #5,W5
17B4:  BRA     17B8
17B6:  MOV     W4,W5
17B8:  MOV     #6,W4
17BA:  BTSC    W5.8
17BC:  INC     W4,W4
17BE:  BSET    W5.E
17C0:  BTSC    W9.F
17C2:  BSET    W5.F
17C4:  MOV     #2710,W8
17C6:  REPEAT  #11
17C8:  DIV.U   W7,W8
17CA:  CALL    180E
17CE:  MOV     W1,W7
17D0:  MOV     #3E8,W8
17D2:  REPEAT  #11
17D4:  DIV.U   W7,W8
17D6:  CALL    180E
17DA:  MOV     W1,W7
17DC:  MOV     #64,W8
17DE:  REPEAT  #11
17E0:  DIV.U   W7,W8
17E2:  CALL    180E
17E6:  MOV     W1,W7
17E8:  MOV     #A,W8
17EA:  REPEAT  #11
17EC:  DIV.U   W7,W8
17EE:  CALL    180E
17F2:  BTSS    W9.8
17F4:  BRA     1800
17F6:  MOV     #2D,W0
17F8:  BTSC.B  223.1
17FA:  BRA     17F8
17FC:  MOV     W0,224
17FE:  BCLR    W9.8
1800:  MOV     #30,W0
1802:  ADD.B   W1L,W0L,W0L
1804:  MOV     W0,2A
1806:  BTSC.B  223.1
1808:  BRA     1806
180A:  MOV     W0,224
180C:  BRA     184E
180E:  MOV     #30,W6
1810:  CP0     W0
1812:  BRA     NZ,1830
1814:  BTSS    W5.E
1816:  BRA     1844
1818:  DEC     W4,W4
181A:  CP.B    W4L,W5L
181C:  BRA     Z,1822
181E:  BTSC.B  42.0
1820:  RETURN  
1822:  CP0     W0
1824:  BRA     NZ,1830
1826:  BTSS    W5.E
1828:  BRA     1844
182A:  BTSS    W5.F
182C:  MOV     #20,W6
182E:  BRA     1844
1830:  BCLR    W5.E
1832:  BTSS    W9.8
1834:  BRA     1844
1836:  MOV     W0,W10
1838:  MOV     #2D,W0
183A:  BTSC.B  223.1
183C:  BRA     183A
183E:  MOV     W0,224
1840:  BCLR    W9.8
1842:  MOV     W10,W0
1844:  ADD.B   W6L,W0L,W0L
1846:  BTSC.B  223.1
1848:  BRA     1846
184A:  MOV     W0,224
184C:  RETURN  
184E:  MOV     #12,W5
1850:  REPEAT  #3
1852:  MOV     [--W15],[W5--]
1854:  MOV     [--W15],W5
1856:  RETURN  
*
2410:  MOV     W5,[W15++]
2412:  MOV     W6,[W15++]
2414:  MOV     #8E,W1
2416:  CP0     W0
2418:  BRA     Z,243E
241A:  BTSC    W0.F
241C:  BRA     2426
241E:  BCLR.B  42.0
2420:  RLC     W0,W0
2422:  DEC     W1,W1
2424:  BRA     241A
2426:  SWAP    W1
2428:  BCLR.B  42.0
242A:  RRC     W1,W1
242C:  BCLR    W0.F
242E:  SWAP    W0
2430:  XOR.B   W0L,W1L,W1L
2432:  AND.B   #0,W0L
2434:  BRA     2444
2436:  MOV.B   W1L,W0L
2438:  BSET    W1.7
243A:  AND.B   #0,W1L
243C:  BRA     2444
243E:  CLR     W0
2440:  CLR     W1
2442:  BRA     2444
2444:  MOV     [--W15],W6
2446:  MOV     [--W15],W5
2448:  RETURN  
....................  
.................... #list 
....................  
.................... //#include <24FJ16GA002.H> 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #DEVICE ADC=10 
.................... #fuses NOIOL1WAY, NODEBUG, NOWRT, NOPROTECT, NOJTAG, NOWDT 
.................... #fuses OSCIO 
.................... #fuses FRC_PLL 
.................... #case 
.................... #type signed 
.................... #use delay(internal=8 MHz, clock = 32000000)  
.................... #use fast_io(ALL) 
.................... #pin_select U1TX = PIN_B13 
.................... #pin_select U1RX = PIN_B12 
.................... #use RS232 (UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12, STREAM = COM_A) 
.................... #BIT TX1IF = 0x0084.12  // Tx1 Interrupt flag  IFS0.12 
....................  
.................... ////////////////////////////////////////////////// 
.................... // EXT INT pins 
.................... #if 1 
.................... // INT0 is RB7 
.................... #pin_select INT1 = PIN_B1 
.................... #pin_select INT2 = PIN_B3 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... #if 0 
....................  
.................... #pin_select U2TX = PIN_B10 
.................... #pin_select U2RX = PIN_B11 
....................  
.................... //#use RS232 (UART2, BAUD = 9600, XMIT = PIN_B9, RCV = PIN_B8, STREAM = COM_B) 
.................... //#use RS232 (BAUD = 9600, XMIT = PIN_B10, RCV = PIN_B11, STREAM = COM_B) 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... // REMAP i/o pins 
.................... #if 1 
....................  
.................... #pin_select IC1 = PIN_B4  // RP0  AX2 
.................... #pin_select IC2 = PIN_B5  // RP1  AX3 
.................... #pin_select OC1 = PIN_B2 
....................  
.................... #pin_select IC3 = PIN_B6   
.................... #pin_select IC4 = PIN_B7   
.................... #pin_select OC2 = PIN_B0 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
....................  
.................... #include <stdlib.h>   
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #if defined(__PCD__) 
....................  
.................... char * itoa(signed int48 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int48 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... char * itoa(signed int64 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int64 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................       
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1;         
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................              
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #endif 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <stdlibm.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... /*********************************************************************/ 
.................... #ifndef _STDLIBM 
.................... #define _STDLIBM 
.................... #USE DYNAMIC_MEMORY 
.................... /* Memory Management Functions*/ 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int8 next; }node_t; 
.................... #elif defined(__PCM__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCH__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCD__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #endif 
....................  
....................  
.................... #ifndef debug_stdlibm 
....................    #define debug_stdlibm(s) 
.................... #else 
....................    #define __DO_DEBUG_STDLIBM 
....................     
....................    char g_DebugStdlibmStr[50]; 
....................     
....................    #if defined(__PCD__) 
....................       #if (defined(__PIC24E__)||defined(__dsPIC33E__)) 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x800)) || bit_test(x, 0)) 
....................       #else 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x1000)) || bit_test(x, 0)) 
....................       #endif 
....................    #else 
....................       #define INVALID_MEMORY_LOCATION(x) (x >= getenv("RAM")) 
....................    #endif 
.................... #endif 
....................  
.................... #include <memmgmt.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__PCH__) 
....................  #define _MEMMGMT_CSIZE 32768 
....................  #define _MEMMGMT_POS 15 
.................... #elif defined(__PCD__) 
....................    #define _MEMMGMT_CSIZE 32768 
....................    #define _MEMMGMT_POS 15 
.................... #else 
....................    #define _MEMMGMT_CSIZE 127 
....................    #define _MEMMGMT_POS 7 
.................... #endif 
....................  
.................... node_t * create_node(unsigned int16 size, node_t *ptr) // create node at given location 
.................... { 
....................    node_t *result; 
....................    result =ptr; 
....................    result->size=size; 
....................    result->next = NULL; 
....................    return result; 
.................... } 
.................... void update_node(node_t *node, unsigned int16 size) // update the size of given node 
.................... { 
....................    node->size=size; 
.................... } 
....................  
.................... /* Insert node immediately after place */ //old,new 
.................... void insert_node_after(node_t *place, node_t *node)// place the node after another given node 
.................... { 
....................     if (place->next==NULL) 
....................        node->next= NULL; 
....................     else 
....................        node->next=place->next; 
....................     place->next=node; 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void remove_node(node_t *node) {// remove the given node from the memlist 
....................    node_t *ptr; 
....................    for(ptr=__DYNAMIC_HEAD;ptr->next!=node;ptr=ptr->next); 
....................    ptr->next=node->next; 
....................    node=NULL; 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__DO_DEBUG_STDLIBM) 
.................... void print_list() { // print the current memlist 
....................     node_t *node; 
....................     debug_stdlibm("\r\nThe list is \n\r"); 
....................     for(node = __DYNAMIC_HEAD; node != NULL; node = node->next) 
....................     { 
....................         sprintf(g_DebugStdlibmStr, "H:0x%lx S:0x%lx N:0x%lx\n\r", node, node->size, node->next); 
....................         debug_stdlibm(g_DebugStdlibmStr); 
....................         if (INVALID_MEMORY_LOCATION(node->next)) 
....................         { 
....................            debug_stdlibm("Breaking because of invalid next node\r\n"); 
....................            break; 
....................         }    
....................     } 
....................     sprintf(g_DebugStdlibmStr, "size of node_t %u\r\n",sizeof(node_t)); 
....................     debug_stdlibm(g_DebugStdlibmStr); 
.................... } 
.................... #endif 
....................  
....................  
....................  
....................  
.................... void traverse() 
.................... { 
....................    node_t *node,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    node=__DYNAMIC_HEAD; 
....................    while(node!=NULL) 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "traverse() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          break; 
....................       }    
....................      #endif 
....................      if(!bit_test(node->size,_MEMMGMT_POS))// node free 
....................       { 
....................          nsize=node->size; 
....................          temp=(unsigned int16)node->next; 
....................         #if defined(__DO_DEBUG_STDLIBM) 
....................          if (INVALID_MEMORY_LOCATION(temp)) 
....................          { 
....................             sprintf(g_DebugStdlibmStr, "traverse() invalid temp (0x%LX)\r\n", node); 
....................             debug_stdlibm(g_DebugStdlibmStr); 
....................             break; 
....................          } 
....................         #endif 
....................          if(!bit_test(temp->size,_MEMMGMT_POS)&& (temp==((unsigned int16)node+nsize+sizeof(node_t))))//next node free and consecutive, so combine 
....................          { 
....................             nextsize=temp->size; 
....................             nsize+=nextsize+sizeof(node_t); 
....................             remove_node(temp); 
....................             update_node(node,nsize); 
....................          } 
....................          else 
....................          node=node->next; 
....................       } 
....................       else 
....................       node=node->next; 
....................    } 
.................... } 
....................  
.................... char *malloc(size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize; 
....................    #if defined(__PCD__) 
....................    if (size % 2) 
....................       size++; 
....................    #endif 
....................    node=__DYNAMIC_HEAD; 
....................     
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "malloc() size=%lu\r\n", size); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................          
....................    while(node!=NULL) // chk until end of memlist 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=size) // node is free and > = req size 
....................       { 
....................          nsize=node->size;    //nsize = size of the node that "node" being pointed at 
....................          if(nsize>size +sizeof(node_t)) //node > req size, so split and add new node to memlist 
....................          { 
....................             new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
....................             insert_node_after(node,new); 
....................             update_node(node,size+_MEMMGMT_CSIZE); 
....................          } 
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
....................          //end if 
....................          break; 
....................       }//end if 
....................       node=node->next; 
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
....................    { 
....................       debug_stdlibm("Not enough memory for mallocation\r\n"); 
....................       return NULL; 
....................    } 
....................    else 
....................    return (char *)node+sizeof(node_t); // return pounsigned int8er to allocated space 
.................... } 
....................  
.................... char *calloc(size_t nmemb,size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize,resize; 
....................    node=__DYNAMIC_HEAD; 
....................    resize=nmemb*size; 
....................    #if defined(__PCD__) 
....................    if(resize%2) 
....................       resize++; 
....................    #endif 
....................    while(node!=NULL) // chk until end of memlist 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=resize)// node is free and > = req size 
....................       { 
....................          nsize=node->size; 
....................          if(nsize>resize+sizeof(node_t))//node > req size, so split and add new node to memlist 
....................          { 
....................             new=create_node(nsize-resize-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+resize); 
....................             insert_node_after(node,new); 
....................             update_node(node,resize+_MEMMGMT_CSIZE); 
....................          } 
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
....................          //end if 
....................          break; 
....................       }//end if 
....................       node=node->next; 
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
....................    { 
....................       debug_stdlibm("Not enough memory for callocation\r\n"); 
....................       return NULL; 
....................    } 
....................    else 
....................    { 
....................       memset((unsigned int16)node+sizeof(node_t),0,resize);// initialize to 0 
....................       return (char *)(unsigned int16)node+sizeof(node_t);// return pounsigned int8er to allocated space 
....................    } 
.................... } 
.................... void free( void * ptr) 
.................... { 
....................    node_t *node; 
....................    unsigned int16 nsize; 
....................  
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "free() 0x%LX\r\n", ptr); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................  
....................    if(ptr==NULL) // not a valid pounsigned int8er 
....................       return; 
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
....................       if(bit_test(node->size,_MEMMGMT_POS))// node occupied 
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
....................          update_node(node,nsize); 
....................          ptr=NULL; 
....................  
....................       } 
....................       else // wrong input, return 
....................       { 
....................          ptr=NULL; 
....................          return; 
....................       } 
....................    } 
....................    traverse(); 
.................... } 
....................  
.................... char *realloc(void *ptr,size_t size) 
.................... { 
....................    node_t *node,*new,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    char *newptr; 
....................    #if defined(__PCD__) 
....................    if(size %2) 
....................       size++; 
....................    #endif 
....................    if(ptr==NULL)// null pounsigned int8er, so malloc the req memory 
....................       return(malloc(size)); 
....................    else if(size==0) 
....................    { 
....................       free(ptr); 
....................       return(NULL); 
....................    } 
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
....................       if(bit_test(node->size,_MEMMGMT_POS))// chk if valid pounsigned int8er 
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
....................          temp=(unsigned int16)node->next; 
....................          if(nsize>size)// block > req size 
....................          { 
....................         
....................                if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   nextsize=temp->size; 
....................                   remove_node(temp); 
....................                   new=create_node(nextsize+(nsize-size),(unsigned int16)node+size+sizeof(node_t)); 
....................                   insert_node_after(node,new); 
....................                    
....................  
....................                } 
....................                else if (nsize>size +sizeof(node_t))//node > req size, so split and add new node to memlist 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
....................                   insert_node_after(node,new); 
....................                } 
....................                else//not enough space for new node so use original size 
....................                update_node(node,nsize+_MEMMGMT_CSIZE); // update block 
....................  
....................          } 
....................          else // block < req size 
....................          { 
....................             if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................             { 
....................                nextsize=temp->size; 
....................                if(nextsize>=size-nsize) // next block >=difference 
....................                { 
....................                   if(nextsize>size-nsize+sizeof(node_t))//next node > req size, so split and add new node to memlist 
....................                   { 
....................                       update_node(node,size+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                       new=create_node(nextsize-(size-nsize),(unsigned int16)node+size+sizeof(node_t)); 
....................                       insert_node_after(node,new); 
....................                   } 
....................                   else//not enough space for new node in next node, so use original size 
....................                   { 
....................                       update_node(node,nsize+nextsize+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                   } 
....................                } 
....................                else  //next block free but too small for new size 
....................                { 
....................                   newptr = malloc(size);  //use malloc to find new block 
....................                   if(newptr == NULL) 
....................                      return(NULL);        //return NULL if malloc was unable to find new block 
....................                     
....................                   memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                   free(ptr);                    //free original block 
....................                   return(newptr);               //return new pointer 
....................                } 
....................             } 
....................             else  //next block not free 
....................             { 
....................                newptr = malloc(size);  //use malloc to find new block 
....................                if(newptr == NULL)       
....................                   return(NULL);        //return NULL if malloc was unable to find new block 
....................                 
....................                memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                free(ptr);                    //free original block 
....................                return(newptr);               //return new pointer 
....................             } 
....................          } 
....................          return (char *)node+sizeof(node_t); // return pounsigned int8er to the reallocated block 
....................       } 
....................       else // not allocated use malloc 
....................       { 
....................          return(malloc(size)); 
....................       } 
....................    } 
....................  } 
.................... #ENDIF 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include "BL_support.h" 
.................... /******************************************************************************/ 
.................... /* File:    BL_Support.h													  */ 
.................... /* Author:  Dr.Santi Nuratch												  */ 
.................... /*          Embedded Computing and Control Lab., INC-KMUTT 				      */ 
.................... /* Created on 22 September 2016, 13:14										  */ 
.................... /******************************************************************************/ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... /****************************************************************************/ 
.................... // o/p pins  LED 
.................... #define  LED0  PIN_A2 
.................... #define  LED1  PIN_A4 
.................... #define  LED2  PIN_B2 
.................... #define  LED3  PIN_B3 
....................  
.................... // i/p pins  PBSW 
.................... #define  SW0  PIN_B4 
.................... #define  SW1  PIN_B5 
.................... #define  SW2  PIN_B6 
.................... #define  SW3  PIN_B7 
....................  
.................... // ADC  or  i/o pins if not use ADC 
.................... #define  AX0  PIN_A0 
.................... #define  AX1  PIN_A1 
.................... #define  AX2  PIN_B0  // RP0 remap pin 
.................... #define  AX3  PIN_B1  // RP1 remap pin 
....................  
.................... /****************************************************************************/ 
....................  
.................... #endif 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... #include "CDATPIC24.H" 
.................... /* 
.................... ***************************   C DATA TYPE   ******************************* 
.................... **                                                                              
.................... **  project     : C Data Types Extension                                                 
.................... **  filename  : CDATPIC24.H                                                                 
.................... **                                                                                                                
.................... *************************************************************************** 
.................... */ 
....................  
.................... #ifndef   CDATPIC24_INCLUDED 
.................... #define   CDATPIC24_INCLUDED 
....................  
.................... /* 
.................... *************************************************************************** 
....................                             C  TYPEDEFS                                            
.................... *************************************************************************** 
.................... */ 
....................  
.................... /**** C type extensions ****/ 
.................... typedef unsigned char      int8u; 
.................... typedef signed   char      int8s; 
.................... typedef unsigned int       int16u; 
.................... typedef signed   int       int16s; 
.................... typedef unsigned long      int32u; 
.................... typedef signed   long      int32s; 
.................... typedef unsigned long long int64u; 
.................... typedef signed   long long int64s; 
....................  
....................  
.................... #endif 
.................... /* 
.................... ************************************************************************** 
....................                                EOF                                                    
.................... /************************************************************************* 
.................... */ 
....................  
....................  
.................... #include "PIDModule.H" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CTEMPLATE.H 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx , 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  PIDModule_INCLUDED 
.................... #define  PIDModule_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... //#include <stdlib.h>  // depend on application requirements. 
.................... //#include "cdat68k.h"  // define data types 
.................... #include "CONFIG_PIC24.H" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CONFIG_PIC24.H 
.................... version   :  
.................... date      : 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  CONFIG_PIC24_INCLUDED 
.................... #define  CONFIG_PIC24_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... #include <24FJ48GA002.H> 
.................... //#include <24FJ16GA002.H> 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #DEVICE ADC=10 
.................... #fuses NOIOL1WAY, NODEBUG, NOWRT, NOPROTECT, NOJTAG, NOWDT 
.................... #fuses OSCIO 
.................... #fuses FRC_PLL 
.................... #case 
.................... #type signed 
.................... #use delay(internal=8 MHz, clock = 32000000)  
.................... #use fast_io(ALL) 
.................... #pin_select U1TX = PIN_B13 
.................... #pin_select U1RX = PIN_B12 
.................... #use RS232 (UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12, STREAM = COM_A) 
.................... #BIT TX1IF = 0x0084.12  // Tx1 Interrupt flag  IFS0.12 
....................  
.................... ////////////////////////////////////////////////// 
.................... // EXT INT pins 
.................... #if 1 
.................... // INT0 is RB7 
.................... #pin_select INT1 = PIN_B1 
.................... #pin_select INT2 = PIN_B3 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... #if 0 
....................  
.................... #pin_select U2TX = PIN_B10 
.................... #pin_select U2RX = PIN_B11 
....................  
.................... //#use RS232 (UART2, BAUD = 9600, XMIT = PIN_B9, RCV = PIN_B8, STREAM = COM_B) 
.................... //#use RS232 (BAUD = 9600, XMIT = PIN_B10, RCV = PIN_B11, STREAM = COM_B) 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... // REMAP i/o pins 
.................... #if 1 
....................  
.................... #pin_select IC1 = PIN_B4  // RP0  AX2 
.................... #pin_select IC2 = PIN_B5  // RP1  AX3 
.................... #pin_select OC1 = PIN_B2 
....................  
.................... #pin_select IC3 = PIN_B6   
.................... #pin_select IC4 = PIN_B7   
.................... #pin_select OC2 = PIN_B0 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
....................  
.................... #include <stdlib.h>   
.................... #include <stdio.h> 
.................... #include <stdlibm.h> 
.................... #include <string.h> 
.................... #include <stdint.h> 
.................... #include "BL_support.h" 
.................... /****************************************************************************/ 
.................... // o/p pins  LED 
.................... #define  LED0  PIN_A2 
.................... #define  LED1  PIN_A4 
.................... #define  LED2  PIN_B2 
.................... #define  LED3  PIN_B3 
....................  
.................... // i/p pins  PBSW 
.................... #define  SW0  PIN_B4 
.................... #define  SW1  PIN_B5 
.................... #define  SW2  PIN_B6 
.................... #define  SW3  PIN_B7 
....................  
.................... // ADC  or  i/o pins if not use ADC 
.................... #define  AX0  PIN_A0 
.................... #define  AX1  PIN_A1 
.................... #define  AX2  PIN_B0  // RP0 remap pin 
.................... #define  AX3  PIN_B1  // RP1 remap pin 
....................  
.................... /****************************************************************************/ 
....................  
.................... #endif 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... #include "CDATPIC24.H" 
.................... /* 
.................... ***************************   C DATA TYPE   ******************************* 
.................... **                                                                              
.................... **  project     : C Data Types Extension                                                 
.................... **  filename  : CDATPIC24.H                                                                 
.................... **                                                                                                                
.................... *************************************************************************** 
.................... */ 
....................  
.................... #ifndef   CDATPIC24_INCLUDED 
.................... #define   CDATPIC24_INCLUDED 
....................  
.................... /* 
.................... *************************************************************************** 
....................                             C  TYPEDEFS                                            
.................... *************************************************************************** 
.................... */ 
....................  
.................... /**** C type extensions ****/ 
.................... typedef unsigned char      int8u; 
.................... typedef signed   char      int8s; 
.................... typedef unsigned int       int16u; 
.................... typedef signed   int       int16s; 
.................... typedef unsigned long      int32u; 
.................... typedef signed   long      int32s; 
.................... typedef unsigned long long int64u; 
.................... typedef signed   long long int64s; 
....................  
....................  
.................... #endif 
.................... /* 
.................... ************************************************************************** 
....................                                EOF                                                    
.................... /************************************************************************* 
.................... */ 
....................  
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... typedef struct{ 
.................... 	float Kp; 
.................... 	float Ki; 
.................... 	float Kd; 
....................  
.................... 	float previousError; 
.................... 	float errorSummation; 
.................... 	float u; 
....................  
.................... 	// Paremeter for velocity form 
.................... 	 
.................... 	float delta_u; 
.................... 	float PreviousU1; 
.................... 	float PreviousE1; 
.................... 	float PreviousE2; 
....................  
.................... }PIDParameter; 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                         EXPORTED VARIABLES                             **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... void InitialPID(PIDParameter *MOTOR); 
.................... /******************************************* 
.................... PID Positional Form  
.................... Parameter : e 
.................... Return : u 
.................... Compute control input from error in positional form 
.................... *******************************************/ 
.................... void PIDPositionalForm(float error, PIDParameter *MOTOR); 
....................  
.................... /******************************************* 
.................... PID Velocity Form  
.................... Parameter : e 
.................... Return : u 
.................... Compute control input from error in velocity form 
.................... *******************************************/ 
.................... void PIDVelocityForm(float error, PIDParameter *MOTOR); 
....................  
....................  
.................... #ifndef PIDModule_C_SRC 
....................  
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                       EXPORTED FUNCTIONS                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #include "EVENT_DRIVEN_CCS.H" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : EVENT_DRIVEN_CCS.H 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx , 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  EVENT_DRIVEN_CCS_INCLUDED 
.................... #define  EVENT_DRIVEN_CCS_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #include "CONFIG_PIC24.h" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CONFIG_PIC24.H 
.................... version   :  
.................... date      : 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  CONFIG_PIC24_INCLUDED 
.................... #define  CONFIG_PIC24_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... #include <24FJ48GA002.H> 
.................... //#include <24FJ16GA002.H> 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #DEVICE ADC=10 
.................... #fuses NOIOL1WAY, NODEBUG, NOWRT, NOPROTECT, NOJTAG, NOWDT 
.................... #fuses OSCIO 
.................... #fuses FRC_PLL 
.................... #case 
.................... #type signed 
.................... #use delay(internal=8 MHz, clock = 32000000)  
.................... #use fast_io(ALL) 
.................... #pin_select U1TX = PIN_B13 
.................... #pin_select U1RX = PIN_B12 
.................... #use RS232 (UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12, STREAM = COM_A) 
.................... #BIT TX1IF = 0x0084.12  // Tx1 Interrupt flag  IFS0.12 
....................  
.................... ////////////////////////////////////////////////// 
.................... // EXT INT pins 
.................... #if 1 
.................... // INT0 is RB7 
.................... #pin_select INT1 = PIN_B1 
.................... #pin_select INT2 = PIN_B3 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... #if 0 
....................  
.................... #pin_select U2TX = PIN_B10 
.................... #pin_select U2RX = PIN_B11 
....................  
.................... //#use RS232 (UART2, BAUD = 9600, XMIT = PIN_B9, RCV = PIN_B8, STREAM = COM_B) 
.................... //#use RS232 (BAUD = 9600, XMIT = PIN_B10, RCV = PIN_B11, STREAM = COM_B) 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... // REMAP i/o pins 
.................... #if 1 
....................  
.................... #pin_select IC1 = PIN_B4  // RP0  AX2 
.................... #pin_select IC2 = PIN_B5  // RP1  AX3 
.................... #pin_select OC1 = PIN_B2 
....................  
.................... #pin_select IC3 = PIN_B6   
.................... #pin_select IC4 = PIN_B7   
.................... #pin_select OC2 = PIN_B0 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
....................  
.................... #include <stdlib.h>   
.................... #include <stdio.h> 
.................... #include <stdlibm.h> 
.................... #include <string.h> 
.................... #include <stdint.h> 
.................... #include "BL_support.h" 
.................... /****************************************************************************/ 
.................... // o/p pins  LED 
.................... #define  LED0  PIN_A2 
.................... #define  LED1  PIN_A4 
.................... #define  LED2  PIN_B2 
.................... #define  LED3  PIN_B3 
....................  
.................... // i/p pins  PBSW 
.................... #define  SW0  PIN_B4 
.................... #define  SW1  PIN_B5 
.................... #define  SW2  PIN_B6 
.................... #define  SW3  PIN_B7 
....................  
.................... // ADC  or  i/o pins if not use ADC 
.................... #define  AX0  PIN_A0 
.................... #define  AX1  PIN_A1 
.................... #define  AX2  PIN_B0  // RP0 remap pin 
.................... #define  AX3  PIN_B1  // RP1 remap pin 
....................  
.................... /****************************************************************************/ 
....................  
.................... #endif 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... #include "CDATPIC24.h" 
.................... /* 
.................... ***************************   C DATA TYPE   ******************************* 
.................... **                                                                              
.................... **  project     : C Data Types Extension                                                 
.................... **  filename  : CDATPIC24.H                                                                 
.................... **                                                                                                                
.................... *************************************************************************** 
.................... */ 
....................  
.................... #ifndef   CDATPIC24_INCLUDED 
.................... #define   CDATPIC24_INCLUDED 
....................  
.................... /* 
.................... *************************************************************************** 
....................                             C  TYPEDEFS                                            
.................... *************************************************************************** 
.................... */ 
....................  
.................... /**** C type extensions ****/ 
.................... typedef unsigned char      int8u; 
.................... typedef signed   char      int8s; 
.................... typedef unsigned int       int16u; 
.................... typedef signed   int       int16s; 
.................... typedef unsigned long      int32u; 
.................... typedef signed   long      int32s; 
.................... typedef unsigned long long int64u; 
.................... typedef signed   long long int64s; 
....................  
....................  
.................... #endif 
.................... /* 
.................... ************************************************************************** 
....................                                EOF                                                    
.................... /************************************************************************* 
.................... */ 
....................  
....................  
.................... #include "EVENT_TYPE_CCS.h" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CTEMPLATE.H 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx , 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  EVENT_TYPE_CCS_H_INCLUDED 
.................... #define  EVENT_TYPE_CCS_H_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... //#include <stdlib.h>  // depend on application requirements. 
.................... //#include "cdat68k.h"  // define data types 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... typedef enum  
.................... { 
.................... 	EV_NULL, 
.................... 	EV_TIMER1, 
.................... 	EV_TIMER2, 
.................... 	EV_TIMER3, 
.................... 	EV_STMR0, 
.................... 	EV_STMR1, 
.................... 	EV_STMR2, 
.................... 	EV_STMR3, 
.................... 	EV_STMR4, 
.................... 	EV_SW0, 
.................... 	EV_SW1, 
.................... 	EV_SW2, 
.................... 	EV_SW3, 
.................... 	EV_TBE1, 
.................... 	EV_RDA1, 
.................... 	EV_OC1, 
.................... 	EV_OC2, 
.................... 	EV_IC1, 
.................... 	EV_IC2, 
.................... 	EV_EXT0, 
.................... 	EV_EXT1, 
.................... 	EV_EXT2 
.................... }EV_TYPE; 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                         EXPORTED VARIABLES                             **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                       EXPORTED FUNCTIONS                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... //#include <stdlib.h>  // depend on application requirements. 
.................... //#include "cdat68k.h"  // define data types 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... #define DECLARE_MEM(BLOCK_TYPE_DEF , MEM_ARRAY, STRUCT_Q_ARRAY, N_BLOCK);\ 
.................... PTR_STRUCT STRUCT_Q_ARRAY[N_BLOCK]; \ 
.................... BLOCK_TYPE_DEF MEM_ARRAY[N_BLOCK]; 
....................  
.................... /****************************************************************************/ 
.................... // Queue error code 
.................... #define Q_OK 0 
.................... #define Q_FULL 1 
.................... #define Q_EMPTY 2 
....................  
.................... #define SINGLE 0 
.................... #define REPEAT 1 
....................  
.................... #define ON 1 
.................... #define OFF 0 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... // Data type for Tick counter 
.................... typedef volatile int32u tickType; 
....................  
.................... //Event structure 
.................... typedef volatile struct  
.................... { 
.................... 	EV_TYPE evType; 
.................... 	void *evDataPtr; 
.................... } EV_STRUCT; 
....................  
.................... typedef volatile struct  
.................... { 
.................... 	int8u evQLength; 
.................... 	int8u evQCount; 
.................... 	int8u evQPut; 
.................... 	int8u evQGet; 
.................... 	EV_STRUCT *evQArray; 
.................... }EVQ_STRUCT; 
....................  
.................... // Event Queue function error codes 
.................... typedef enum 
.................... { 
.................... 	EVQ_OK, 
.................... 	EVQ_FULL, 
.................... 	EVQ_EMPTY 
.................... } Q_ERR; 
....................  
.................... // Struct of pointer for mem qeue array  
.................... typedef volatile struct voidPtrStruct 
.................... { 
.................... 	void *blockPtr; 
.................... } PTR_STRUCT; 
....................  
.................... // Structure type for Mem Control Block 
.................... typedef volatile struct memControlStruct 
.................... { 
.................... 	void *memPtr; 
.................... 	int16u qArrayLength; 
.................... 	int16u count; 
.................... 	int16u put; 
.................... 	int16u get; 
.................... 	PTR_STRUCT *qArrayPtr; // Pointer to array of pointer to void 
.................... 	 
.................... } MCB_STRUCT; 
....................  
.................... // struct type for queue of pointer 
.................... typedef volatile struct qPtrXStruct 
.................... { 
.................... 	int16u arrayLength; 
.................... 	int16u count; 
.................... 	int16u put; 
.................... 	int16u get; 
.................... 	PTR_STRUCT *arrayPtr; // Pointer to array of pointer to void 
.................... } QPTRX_STRUCT; 
....................  
.................... // struct type for queue of int8u 
.................... typedef volatile struct q8UStruct 
.................... { 
.................... 	int16u arrayLength; 
.................... 	int16u count; 
.................... 	int16u put; 
.................... 	int16u get; 
.................... 	int8u *arrayPtr; // Pointer to array of int8u	 
.................... } Q8UX_STRUCT; 
....................  
.................... //STimer struct 
.................... typedef volatile struct  
.................... { 
.................... 	int8u tmrEnb; //enable (ON) / disable (OFF) software timer 
.................... 	int8u tmrMode; // Opareting mode : SINGLE / REPEAT 
.................... 	tickType tmrInit; // Initial value of tick count 
.................... 	tickType tmrCount; // Down counter value 
.................... 	EVQ_STRUCT *evQPtr; // Pointer to event queue 
.................... 	EV_STRUCT sTmrEvStruct; // Software Timer Event  Struct  
.................... } STMR_STRUCT; 
....................  
.................... // RX Frame State 
.................... typedef volatile enum  
.................... { 
.................... 	FRAME_WAIT, 
.................... 	FRAME_PROGRESS, 
.................... 	FRAME_PROGRESS2 
....................  
.................... } FRAME_STATE; 
....................  
.................... // Tx State 
.................... typedef volatile enum  
.................... { 
.................... 	TX1_BUSY, 
.................... 	TX1_READY 
.................... } TX1_STATUS;   
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                         EXPORTED VARIABLES                             **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #ifndef EVENT_DRIVEN_CCS_C_SRC 
.................... extern volatile int16u EvQFullCount; 
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                       EXPORTED FUNCTIONS                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //							Library Functions 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //							Event Queue Functions 
.................... /****************************************************************************/ 
.................... void EvStructInit (EVQ_STRUCT *evStruct, EV_TYPE evType, void *evDataPtr); 
....................  
.................... void EvQInit (EVQ_STRUCT *evQ, EV_STRUCT *evArray, int8u qL); 
....................  
.................... void EvQPut (EVQ_STRUCT *evQ, EV_STRUCT evSource, Q_ERR *errPtr); 
....................  
.................... void EvQGet (EVQ_STRUCT *evQ, EV_STRUCT *evDest, Q_ERR *errPtr); 
....................  
.................... int16u EVQCount (EVQ_STRUCT *evQ); 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //								Memory Functions  
.................... /****************************************************************************/ 
....................  
.................... void MemStructArrayInit (void *memArrayPtr, int16u blockByteSize, int16u nblock, PTR_STRUCT *memQArrayPtr, MCB_STRUCT *memQcbPtr); 
....................  
.................... void MemPtrPut (MCB_STRUCT *memQcbPtr, void *memBlockPtr, int8u *errPtr); 
....................  
.................... void MemPtrGet (MCB_STRUCT *memQcbPtr, PTR_STRUCT *destStructPtr, int8u *errPtr); 
....................  
.................... int16u MemQReadyCount (MCB_STRUCT *memQcbPtr); 
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //								QPTXR Functions  
.................... /****************************************************************************/ 
.................... void QPtrXInit (QPTRX_STRUCT *qStructPtr, PTR_STRUCT *buffPtr, int16u qL); 
....................  
.................... void QPtrXPut (QPTRX_STRUCT *qStructPtr, PTR_STRUCT ptrStruct, int8u *errPtr); 
....................  
.................... void QPtrXGet (QPTRX_STRUCT *qStructPtr, PTR_STRUCT *destPtr, int8u *errPtr); 
....................  
.................... int16u QPtrXCount (QPTRX_STRUCT *qStructPtr); 
....................  
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //								Q8UX Functions  
.................... /****************************************************************************/ 
....................  
.................... void Q8UXInit (Q8UX_STRUCT *qStructPtr, int8u *buffPtr, int16u qL); 
....................  
.................... void Q8UXPut (Q8UX_STRUCT *qStructPtr, int8u dataSource, int8u *errPtr); 
....................  
.................... void Q8UXGet (Q8UX_STRUCT *qStructPtr, int8u *destPtr, int8u *errPtr); 
....................  
.................... int16u Q8UXCount (Q8UX_STRUCT *qStructPtr); 
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //								Software  Timer Function 
.................... /****************************************************************************/ 
....................  
.................... void SoftwareTimer (STMR_STRUCT *sTmrPtr, int8u nMaxSTmr); 
....................  
.................... void STmrSystemDeInit (STMR_STRUCT *sTmrPtr, int8u nMaxSTmr); 
....................  
.................... void STmrInit (STMR_STRUCT *sTmrPtr, int8u z, tickType initValue, int8u mode, EV_TYPE evType, void *evDataPtr, EVQ_STRUCT *evQPtr); 
....................  
.................... void STmrStart (STMR_STRUCT *sTmrPtr, int8u z); 
....................  
.................... void STmrPause (STMR_STRUCT *sTmrPtr, int8u z); 
....................  
.................... void STmrStop (STMR_STRUCT *sTmrPtr, int8u z);	 
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... //								CPU Dependent Functions 
.................... /****************************************************************************/ 
....................  
.................... void DisableIntr (void); 
....................  
.................... void EnableIntr (void); 
....................  
.................... void CpuIdle (void); 
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                         EXPORTED VARIABLES                             **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #ifndef MainMonalisa_C_SRC 
....................  
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                       EXPORTED FUNCTIONS                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... //UART Rx frame 
.................... #define RX1Q_LN 8 
.................... #define RX_CMND_FRM_LN 16 
.................... #define START_CHR 0Xff 
.................... #define ID 1 
....................  
....................  
.................... //UART Queue 
.................... #define TX1Q_LN 128 
....................  
.................... #define CCW 0 
.................... #define CW 1 
.................... #define BREAK 2 
....................  
.................... #define MOTORINX1 PIN_A2 
.................... #define MOTORINX2 PIN_A4 
.................... #define ENABLEAX1 PIN_B2 
....................  
.................... #define MOTORINY1 PIN_A0 
.................... #define MOTORINY2 PIN_A1 
.................... #define ENABLEAY1 PIN_B0 
....................  
....................  
....................  
.................... #define RadiusOfFaulhaber 7 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                      PROTOTYPES OF LOCAL FUNCTIONS                     **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... static void HardwareInit(); 
.................... static void GlobalVarInit(); 
.................... static void DynamicMemInit(); 
.................... static void UARTQueueInit(); 
.................... static int8u SendTx1(int8u *strPtr); 
....................  
.................... void MotorMoving(int speed , int direction); 
.................... void computeInstantlyDistantX(float distance); 
.................... void computeInstantlyDistantY(float distance); 
....................  
.................... void CheckProtocal(int8u *arrayPtr); 
.................... int16u convert_8to16bit(int8u baseHightbyte, int8u baseLowbyte); 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                           EXPORTED VARIABLES                           **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                            GLOBAL VARIABLES                            **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... static volatile Q8UX_STRUCT Tx1QCB; 
.................... static volatile int8u Tx1QArray[TX1Q_LN]; 
.................... static volatile int8u *Tx1BuffPtr; 
.................... static volatile int16u Tx1BuffIdx; 
.................... static volatile TX1_STATUS Tx1Flag; 
.................... static volatile int16u Tx1FrameIn, Tx1FrameOut, Rx1FrameCount,RxCount,Tx1QFullCount, Rx1QFullCount; 
.................... static volatile int8u *RxBuffPtr; 
.................... static volatile QPTRX_STRUCT Rx1QCB; 
.................... static volatile PTR_STRUCT Rx1BuffPtrArray[RX1Q_LN]; 
.................... static volatile PTR_STRUCT DestPtrStruct; 
.................... static volatile int8u Send_Buffer[20]; 
....................  
.................... static volatile int16u MemFail,MemCount; 
....................  
.................... // int StateDirection = 1; 
.................... int countDistance = 0; 
....................  
.................... int stateCHAX = 0; 
.................... int stateCHBX = 0; 
....................  
.................... int stateCHAY = 0; 
.................... int stateCHBY = 0; 
....................  
.................... static volatile int16u timeOldX = 0; 
.................... static volatile int16u timeNewX = 0; 
.................... static volatile int16u directionReadX = 0; 
.................... static volatile int16u intervalX = 65535; 
.................... static int16u tX = 0; 
.................... static int cX = 0; 
....................  
.................... static volatile int16u timeOldY = 0; 
.................... static volatile int16u timeNewY = 0; 
.................... static volatile int16u directionReadY = 0; 
.................... static volatile int16u intervalY = 65535; 
.................... static int16u tY = 0; 
.................... static int cY = 0; 
....................  
.................... PIDParameter MotorX ,MotorY; 
.................... float referenceDesireX = 0; 
.................... float currentDistanceX = 0; 
.................... float referenceDesireY = 0; 
.................... float currentDistanceY = 0; 
....................  
.................... int16u countDistanceX = 0; 
.................... int16u countDistanceY = 0; 
....................  
.................... float errorX = 0; 
.................... float errorY = 0; 
.................... int8u distantofX = 0; 
.................... int8u distantofY = 0; 
....................  
.................... int stateBackward = 0; 
.................... int StatePID = 0; 
....................  
....................  
.................... static volatile int16u speedX = 0; 
.................... static volatile int16u speedY = 0; 
....................  
....................  
.................... //********************************* 
.................... //******** State Variable ******** 
.................... // temporary protocal  
.................... // moving desire distant pid <1 x x y y> 
.................... // moving x <2 0 or 1> 0 = CCW , 1 = CW 
.................... // moving y <3 0 or 1> 0 = CCW , 1 = CW 
.................... // break <3 0 or 1> 0 = X , 1 = Y 
.................... // Check status <4 1> 
.................... // set zero <5 0 or 1> 0 = X , 1 = Y   
.................... // static volatile int8u StatePID = 0; 
.................... static volatile int8u StateMotorX = 0; // 0 = X , 1 = Y 
.................... static volatile int8u StateMotorY = 0; 
.................... static volatile int8u StateDirectionX = 0; 
.................... static volatile int8u StateDirectionY = 0; // 0 = CCW , 1 = CW 
.................... static volatile int8u StateBreak = 0; 
.................... static volatile int8u StateBreakX = 0; // 0 = X , 1 = Y  
.................... static volatile int8u StateBreakY = 0; 
.................... static volatile int8u StateResetX = 0; 
.................... static volatile int8u StateResetY = 0; 
.................... //********************************* 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                           EXPORTED FUNCTIONS                           **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                             LOCAL FUNCTIONS                            **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... void main () 
*
2C32:  MOV     #2780,W15
2C34:  MOV     #27FF,W0
2C36:  MOV     W0,20
2C38:  NOP     
2C3A:  MOV     #4444,W0
2C3C:  MOV     W0,A8
2C3E:  BSET.B  81.7
2C40:  MOV     #46,W0
2C42:  MOV.B   W0L,742
2C44:  MOV     #57,W0
2C46:  MOV.B   W0L,742
2C48:  BCLR.B  742.6
2C4A:  MOV     #13F,W0
2C4C:  MOV     W0,680
2C4E:  MOV     #3F03,W0
2C50:  MOV     W0,682
2C52:  MOV     #504,W0
2C54:  MOV     W0,68E
2C56:  MOV     #706,W0
2C58:  MOV     W0,690
2C5A:  MOV     #3F0C,W0
2C5C:  MOV     W0,6A4
2C5E:  MOV     #13,W0
2C60:  MOV     W0,6C0
2C62:  MOV     #12,W0
2C64:  MOV     W0,6C2
2C66:  MOV     #300,W0
2C68:  MOV     W0,6CC
2C6A:  MOV     #46,W0
2C6C:  MOV.B   W0L,742
2C6E:  MOV     #57,W0
2C70:  MOV.B   W0L,742
2C72:  BSET.B  742.6
2C74:  CLR     744
2C76:  MOV     #8000,W4
2C78:  MOV     W4,220
2C7A:  MOV     #400,W4
2C7C:  MOV     W4,222
2C7E:  BSET.B  220.3
2C80:  MOV     #22,W4
2C82:  MOV     W4,228
2C84:  BRA     2CD4
2C86:  DATA    80,02,03
2C88:  DATA    2C,FF,FF
2C8A:  DATA    80,02,07
2C8C:  DATA    44,00,00
2C8E:  DATA    80,02,07
2C90:  DATA    44,00,00
2C92:  DATA    80,02,07
2C94:  DATA    44,00,00
2C96:  DATA    80,02,08
2C98:  DATA    00,00,00
2C9A:  DATA    80,02,08
2C9C:  DATA    00,00,00
2C9E:  DATA    80,02,08
2CA0:  DATA    00,00,00
2CA2:  DATA    80,02,08
2CA4:  DATA    00,00,00
2CA6:  DATA    C0,E4,08
2CA8:  DATA    08,00,00
2CAA:  DATA    02,FF,FF
2CAC:  DATA    40,0A,00
2CAE:  DATA    00,06,FF
2CB0:  DATA    FF,00,00
2CB2:  DATA    00,00,C0
2CB4:  DATA    31,09,4E
2CB6:  DATA    00,00,00
2CB8:  INC     W2,W2
2CBA:  CP      W2,#1
2CBC:  BRA     NZ,2CC6
2CBE:  TBLRDL  [W1],W3
2CC0:  TBLRDH  [W1++],W4
2CC2:  MOV.B   6,W0L
2CC4:  RETURN  
2CC6:  CP      W2,#2
2CC8:  BRA     NZ,2CCE
2CCA:  MOV.B   7,W0L
2CCC:  RETURN  
2CCE:  MOV.B   8,W0L
2CD0:  CLR     W2
2CD2:  RETURN  
2CD4:  MOV     #0,W6
2CD6:  MOV     #0,W0
2CD8:  MOV     W0,32
2CDA:  MOV     #2C86,W0
2CDC:  MOV     W0,W1
2CDE:  CLR     W2
2CE0:  CALL    2CB8
2CE4:  MOV.B   W0L,B
2CE6:  CALL    2CB8
2CEA:  MOV.B   W0L,A
2CEC:  CP0     W5
2CEE:  BRA     Z,2D22
2CF0:  BTSS    W5.F
2CF2:  BRA     2D02
2CF4:  CALL    2CB8
2CF8:  MOV.B   W0L,D
2CFA:  CALL    2CB8
2CFE:  MOV.B   W0L,C
2D00:  BCLR    W5.F
2D02:  BTSS    W5.E
2D04:  BRA     2D16
2D06:  BCLR    W5.E
2D08:  DEC     W5,W5
2D0A:  CALL    2CB8
2D0E:  MOV.B   W0L,W7L
2D10:  REPEAT  W5
2D12:  MOV.B   W7L,[W6++]
2D14:  BRA     2CE0
2D16:  CALL    2CB8
2D1A:  MOV.B   W0L,[W6++]
2D1C:  DEC     W5,W5
2D1E:  BRA     NZ,2D16
2D20:  BRA     2CE0
2D22:  MOV     #A22,W4
2D24:  MOV     W4,806
2D26:  MOV     #1D5A,W4
2D28:  MOV     W4,A22
2D2A:  CLR     A24
.................... {	 
.................... 	InitialPID(&MotorX); 
2D2C:  MOV     #8FE,W4
2D2E:  MOV     W4,982
2D30:  CALL    219A
.................... 	InitialPID(&MotorY); 
2D34:  MOV     #926,W4
2D36:  MOV     W4,982
2D38:  CALL    219A
....................  
.................... 	// MotorX.Kp = 200; 
.................... 	// MotorX.Ki = 0; 
.................... 	// MotorX.Kd = 2200 ; 
.................... 	// MotorX.Kp = 12; 
.................... 	// MotorX.Ki = 0.3; 
.................... 	// MotorX.Kd = 60 ; 
....................  
.................... 	MotorX.Kp = 30; 
2D3C:  CLR     8FE
2D3E:  MOV     #41F0,W4
2D40:  MOV     W4,900
.................... 	MotorX.Ki = 0; 
2D42:  CLR     902
2D44:  CLR     904
.................... 	MotorX.Kd = 0 ; 
2D46:  CLR     906
2D48:  CLR     908
.................... 	 
.................... 	MotorY.Kp = 10; 
2D4A:  CLR     926
2D4C:  MOV     #4120,W4
2D4E:  MOV     W4,928
.................... 	MotorY.Ki = 0; 
2D50:  CLR     92A
2D52:  CLR     92C
.................... 	MotorY.Kd = 0;	 
2D54:  CLR     92E
2D56:  CLR     930
....................  
.................... 	int8u errCode, SendTx1Count; 
.................... 	DisableIntr(); 
2D58:  CALL    222C
.................... 	clear_interrupt(INT_EXT1); 
2D5C:  BCLR.B  86.4
.................... 	enable_interrupts(INT_EXT1); 
2D5E:  BSET.B  96.4
....................     clear_interrupt(INT_EXT2); 
2D60:  BCLR.B  87.5
....................     enable_interrupts(INT_EXT2); 
2D62:  BSET.B  97.5
.................... 	ext_int_edge(1,H_TO_L); 
2D64:  BSET.B  82.1
.................... 	ext_int_edge(2,H_TO_L); 
2D66:  BSET.B  82.2
.................... 	HardwareInit(); 
2D68:  CALL    2236
.................... 	GlobalVarInit(); 
2D6C:  CALL    22A4
.................... 	DynamicMemInit(); 
2D70:  CALL    22BA
.................... 	UARTQueueInit(); 
2D74:  CALL    2362
.................... 	EnableIntr(); 
2D78:  CALL    2384
.................... 	for (;;) 
.................... 	{ 
.................... 		/* code */ 
.................... 		DisableIntr(); 
2D7C:  CALL    222C
.................... 		QPtrXGet(&Rx1QCB,&DestPtrStruct,&errCode); 
2D80:  MOV     #8A8,W4
2D82:  MOV     W4,982
2D84:  MOV     #8C2,W4
2D86:  MOV     W4,984
2D88:  MOV     #980,W4
2D8A:  MOV     W4,986
2D8C:  CALL    238C
.................... 		if(errCode == Q_OK) 
2D90:  CP0.B   980
2D92:  BRA     NZ,2DC0
.................... 		{ 
.................... 			// SendTx1Count = SendTx1((int8u *)DestPtrStruct.blockPtr); 
.................... 			CheckProtocal((int8u *)DestPtrStruct.blockPtr); 
2D94:  PUSH    8C2
2D96:  POP     982
2D98:  CALL    25F8
2D9C:  PUSH    42
2D9E:  BCLR.B  81.7
2DA0:  SETM.B  42
2DA2:  BSET.B  81.7
.................... 			free ((void *)DestPtrStruct.blockPtr); 
2DA4:  PUSH    8C2
2DA6:  POP     9F4
2DA8:  CALL    1DC0
2DAC:  BCLR.B  81.7
2DAE:  POP     42
2DB0:  BSET.B  81.7
.................... 			MemCount--; 
2DB2:  DEC     08DA
.................... 			EnableIntr(); 
2DB4:  CALL    2384
.................... 			if (SendTx1Count == 0) 
2DB8:  CP0.B   981
2DBA:  BRA     NZ,2DBE
.................... 			{ 
.................... 				/* code */ 
.................... 				output_low(LED3); 
2DBC:  BCLR.B  2CC.3
.................... 			} 
.................... 		} 
2DBE:  BRA     2DC4
.................... 		else 
.................... 		{ 
.................... 			EnableIntr(); 
2DC0:  CALL    2384
.................... 		} 
2DC4:  BRA     2D7C
.................... 	} 
.................... } 
....................  
2DC6:  PWRSAV  #0
.................... /****************************************************************************/ 
.................... static void HardwareInit() 
*
2236:  MOV     W5,[W15++]
.................... { 
.................... 	setup_adc_ports(NO_ANALOGS); 
2238:  SETM    32C
.................... 									 //  	1 2 3 4 	5 6 7 8		9 10 11 12   13 14 15 16  
.................... 	set_tris_a(get_tris_a() & 0xffe0); //   1 1 1 1     1 1 1 1     1  1  1  0    0	 0  0  0   
223A:  MOV     2C0,W5
223C:  MOV     #FFE0,W0
223E:  AND     W0,W5,W5
2240:  MOV     W5,2C0
.................... 	set_tris_b(0xfffa); 				//	1 1 1 1     1 1 1 1     1  1  1  1    1	 0  1  0 
2242:  MOV     #FFFA,W4
2244:  MOV     W4,2C8
....................  
.................... 	output_high(LED0); 
2246:  BSET.B  2C4.2
.................... 	output_high(LED1); 
2248:  BSET.B  2C4.4
.................... 	output_high(LED2); 
224A:  BSET.B  2CC.2
.................... 	output_high(LED3); 
224C:  BSET.B  2CC.3
....................  
.................... 	set_compare_time(1,0); 
224E:  CLR     182
.................... 	setup_compare(1,COMPARE_PWM | COMPARE_TIMER3); 
2250:  MOV     #E,W4
2252:  MOV     W4,184
....................  
.................... 	set_compare_time(2,0); 
2254:  CLR     188
.................... 	setup_compare(2,COMPARE_PWM | COMPARE_TIMER3); 
2256:  MOV     #E,W4
2258:  MOV     W4,18A
....................  
.................... 	set_timer3(0); 
225A:  CLR     10A
.................... 	setup_timer3(TMR_INTERNAL | TMR_DIV_BY_1 , 999); 
225C:  CLR     112
225E:  MOV     #3E7,W4
2260:  MOV     W4,10E
2262:  MOV     #8000,W4
2264:  MOV     W4,112
.................... 	/* FreqPWM = 16 MHz  / 10000 = 1.6 KHz | Now 16 KHz*/  
....................  
.................... 	setup_capture(1, CAPTURE_EE | INTERRUPT_EVERY_CAPTURE | CAPTURE_TIMER2); 
2266:  MOV     #81,W4
2268:  MOV     W4,142
.................... 	clear_interrupt(INT_IC1); 
226A:  BCLR.B  84.1
.................... 	enable_interrupts(INT_IC1); 
226C:  BSET.B  94.1
....................  
.................... 	setup_capture(2, CAPTURE_EE | INTERRUPT_EVERY_CAPTURE | CAPTURE_TIMER2); 
226E:  MOV     #81,W4
2270:  MOV     W4,146
.................... 	clear_interrupt(INT_IC2); 
2272:  BCLR.B  84.5
.................... 	enable_interrupts(INT_IC2); 
2274:  BSET.B  94.5
....................  
.................... 	setup_capture(3, CAPTURE_EE | INTERRUPT_EVERY_CAPTURE | CAPTURE_TIMER2); 
2276:  MOV     #81,W4
2278:  MOV     W4,14A
.................... 	clear_interrupt(INT_IC3); 
227A:  BCLR.B  88.5
.................... 	enable_interrupts(INT_IC3); 
227C:  BSET.B  98.5
....................  
.................... 	setup_capture(4, CAPTURE_EE | INTERRUPT_EVERY_CAPTURE | CAPTURE_TIMER2); 
227E:  MOV     #81,W4
2280:  MOV     W4,14E
.................... 	clear_interrupt(INT_IC4); 
2282:  BCLR.B  88.6
.................... 	enable_interrupts(INT_IC4); 
2284:  BSET.B  98.6
.................... 	/* INPUT CAPTURE PULSE OF ENCODER */ 
.................... 	/* Try to read encoder and on/off led represent CHA CHB */ 
....................  
.................... 	set_timer2(0); 
2286:  CLR     106
.................... 	setup_timer2(TMR_INTERNAL | TMR_DIV_BY_1 , 65535); 
2288:  CLR     110
228A:  SETM    10C
228C:  MOV     #8000,W4
228E:  MOV     W4,110
.................... 	 
....................  
.................... 	clear_interrupt(INT_TIMER5); 
2290:  BCLR.B  87.4
.................... 	set_timer5(0); 
2292:  CLR     118
.................... 	setup_timer5(TMR_INTERNAL | TMR_DIV_BY_256,6249); 
2294:  CLR     120
2296:  MOV     #1869,W4
2298:  MOV     W4,11C
229A:  MOV     #8030,W4
229C:  MOV     W4,120
.................... 	enable_interrupts(INT_TIMER5); 
229E:  BSET.B  97.4
22A0:  MOV     [--W15],W5
22A2:  RETURN  
.................... 	// disable_interrupts(INT_TIMER5); 
.................... 	// enable_interrupts(INT_TIMER5); 
....................  
.................... 	// MotorMoving(500,CCW); 
.................... } 
.................... static void GlobalVarInit() 
.................... { 
.................... 	Tx1Flag = TX1_READY; 
22A4:  BSET.B  898.0
.................... 	Tx1BuffIdx = 0; 
22A6:  CLR     896
.................... 	Tx1FrameIn = 0; 
22A8:  CLR     89A
.................... 	Tx1FrameOut = 0; 
22AA:  CLR     89C
.................... 	Tx1QFullCount = 0; 
22AC:  CLR     8A2
.................... 	Rx1FrameCount = 0; 
22AE:  CLR     89E
.................... 	RxCount = 0; 
22B0:  CLR     8A0
.................... 	Rx1QFullCount = 0; 
22B2:  CLR     8A4
.................... 	MemFail = 0; 
22B4:  CLR     8D8
.................... 	MemCount = 0; 
22B6:  CLR     8DA
.................... 	return; 
22B8:  RETURN  
.................... } 
....................  
.................... static void DynamicMemInit() 
22BA:  PUSH    42
22BC:  BCLR.B  81.7
22BE:  SETM.B  42
22C0:  BSET.B  81.7
.................... { 
.................... 	RxBuffPtr = (int8u *)malloc ((sizeof (int8u)) * RX_CMND_FRM_LN); 
22C2:  MOV     #10,W4
22C4:  MOV     W4,9F6
22C6:  CALL    1E5A
22CA:  BCLR.B  81.7
22CC:  POP     42
22CE:  BSET.B  81.7
22D0:  MOV     W0,8A6
.................... 	if (RxBuffPtr != (int8u *)NULL) 
22D2:  CP0     8A6
22D4:  BRA     Z,22E2
.................... 	{ 
.................... 		MemCount++; 
22D6:  INC     08DA
.................... 		clear_interrupt(INT_RDA); 
22D8:  REPEAT  #3
22DA:  MOV     226,W0
22DC:  BCLR.B  85.3
.................... 		enable_interrupts(INT_RDA); 
22DE:  BSET.B  95.3
.................... 	} 
22E0:  BRA     22E4
.................... 	else 
.................... 	{ 
.................... 		MemFail++; 
22E2:  INC     08D8
.................... 	} 
.................... 	return; 
22E4:  RETURN  
.................... } 
....................  
.................... static void UARTQueueInit() 
.................... { 
.................... 	QPtrXInit (&Rx1QCB, Rx1BuffPtrArray, RX1Q_LN); 
*
2362:  MOV     #8A8,W4
2364:  MOV     W4,982
2366:  MOV     #8B2,W4
2368:  MOV     W4,984
236A:  MOV     #8,W4
236C:  MOV     W4,986
236E:  CALL    22E6
.................... 	Q8UXInit(&Tx1QCB,Tx1QArray,TX1Q_LN); 
2372:  MOV     #80A,W4
2374:  MOV     W4,982
2376:  MOV     #814,W4
2378:  MOV     W4,984
237A:  MOV     #80,W4
237C:  MOV     W4,986
237E:  CALL    2324
.................... 	return; 
2382:  RETURN  
.................... } 
.................... static int8u SendTx1 (int8u *strPtr) 
*
2590:  MOV     W5,[W15++]
.................... { 
.................... 	int8u strLn; 
.................... 	int8u strIdx; 
.................... 	int16u qSpace; 
.................... 	int8u errCode; 
.................... 	int8u count; 
.................... 	count = 0; 
2592:  CLR.B   997
.................... 	strLn = strPtr[3]+4; 
2594:  MOV     #3,W0
2596:  ADD     990,W0
2598:  MOV.B   [W0],W4L
259A:  ADD.B   W4L,#4,W4L
259C:  MOV.B   W4L,W0L
259E:  MOV.B   W0L,992
.................... 	if (strLn != 0) 
25A0:  CP0.B   992
25A2:  BRA     Z,25F2
.................... 	{ 
.................... 		/* code */ 
.................... 		qSpace = TX1Q_LN - Q8UXCount(&Tx1QCB); 
25A4:  MOV     #80A,W4
25A6:  MOV     W4,99A
25A8:  CALL    2514
25AC:  MOV     #80,W4
25AE:  SUB     W4,W0,W0
25B0:  MOV     W0,994
.................... 		if (qSpace >= (int16u)strLn) 
25B2:  MOV.B   992,W0L
25B4:  CLR.B   1
25B6:  MOV     994,W4
25B8:  CP      W4,W0
25BA:  BRA     NC,25F2
.................... 		{ 
.................... 			/* code */ 
.................... 			for(strIdx = 0; strIdx < strLn; strIdx++) 
25BC:  CLR.B   993
25BE:  MOV.B   993,W0L
25C0:  MOV     992,W4
25C2:  CP.B    W4L,W0L
25C4:  BRA     LEU,25E8
.................... 			{ 
.................... 				Q8UXPut(&Tx1QCB,strPtr[strIdx],&errCode); 
25C6:  MOV     992,W4
25C8:  LSR     W4,#8,W4
25CA:  MOV     W4,W0
25CC:  ADD     990,W0
25CE:  MOV.B   [W0],W5L
25D0:  PUSH    99E
25D2:  MOV.B   W5L,[W15-#2]
25D4:  POP     99E
25D6:  MOV     #80A,W4
25D8:  MOV     W4,99C
25DA:  MOV     #996,W4
25DC:  MOV     W4,9A0
25DE:  CALL    2524
.................... 				count++; 
25E2:  INC.B   0997
25E4:  INC.B   0993
25E6:  BRA     25BE
.................... 			} 
.................... 			if(Tx1Flag == TX1_READY) 
25E8:  BTSS.B  898.0
25EA:  BRA     25F2
.................... 			{ 
.................... 				Tx1Flag = TX1_BUSY; 
25EC:  BCLR.B  898.0
.................... 				TX1IF = 1; 
25EE:  BSET.B  85.4
.................... 				enable_interrupts(INT_TBE); 
25F0:  BSET.B  95.4
.................... 			} 
.................... 		} 
.................... 	} 
.................... 	return count; 
25F2:  MOV.B   997,W0L
25F4:  MOV     [--W15],W5
25F6:  RETURN  
.................... } 
....................  
.................... void MotorMovingX(int speed , int direction) 
.................... { 
.................... 	if(speed >= 750) 
*
12A0:  MOV     9F0,W4
12A2:  MOV     #2EE,W3
12A4:  CP      W3,W4
12A6:  BRA     GT,12AC
.................... 	{ 
.................... 		speed = 750; 
12A8:  MOV     #2EE,W4
12AA:  MOV     W4,9F0
.................... 	} 
....................  
.................... 	if (direction == CCW) 
12AC:  CP0     9F2
12AE:  BRA     NZ,12BA
.................... 	{ 
.................... 		set_pwm_duty(1,speed); 
12B0:  PUSH    9F0
12B2:  POP     180
.................... 		output_high(MOTORINX1); 
12B4:  BSET.B  2C4.2
.................... 		output_low(MOTORINX2); 
12B6:  BCLR.B  2C4.4
.................... 	} 
12B8:  BRA     12D6
.................... 	else if (direction == CW) 
12BA:  MOV     9F2,W4
12BC:  CP      W4,#1
12BE:  BRA     NZ,12CA
.................... 	{ 
.................... 		set_pwm_duty(1,speed); 
12C0:  PUSH    9F0
12C2:  POP     180
.................... 		output_high(MOTORINX2); 
12C4:  BSET.B  2C4.4
.................... 		output_low(MOTORINX1); 
12C6:  BCLR.B  2C4.2
.................... 	} 
12C8:  BRA     12D6
.................... 	else if (direction == BREAK) 
12CA:  MOV     9F2,W4
12CC:  CP      W4,#2
12CE:  BRA     NZ,12D6
.................... 	{ 
.................... 		set_pwm_duty(1,0); 
12D0:  CLR     180
.................... 		output_low(MOTORINX1); 
12D2:  BCLR.B  2C4.2
.................... 		output_low(MOTORINX2); 
12D4:  BCLR.B  2C4.4
.................... 	} 
12D6:  RETURN  
....................  
.................... } 
....................  
.................... void MotorMovingY(int speed , int direction) 
.................... { 
.................... 	if(speed >= 750) 
12D8:  MOV     9EC,W4
12DA:  MOV     #2EE,W3
12DC:  CP      W3,W4
12DE:  BRA     GT,12E4
.................... 	{ 
.................... 		speed = 750; 
12E0:  MOV     #2EE,W4
12E2:  MOV     W4,9EC
.................... 	} 
....................  
.................... 	if (direction == CW) 
12E4:  MOV     9EE,W4
12E6:  CP      W4,#1
12E8:  BRA     NZ,12F4
.................... 	{ 
.................... 		set_pwm_duty(2,speed); 
12EA:  PUSH    9EC
12EC:  POP     186
.................... 		output_high(MOTORINY1); 
12EE:  BSET.B  2C4.0
.................... 		output_low(MOTORINY2); 
12F0:  BCLR.B  2C4.1
.................... 	} 
12F2:  BRA     130E
.................... 	else if (direction == CCW) 
12F4:  CP0     9EE
12F6:  BRA     NZ,1302
.................... 	{ 
.................... 		set_pwm_duty(2,speed); 
12F8:  PUSH    9EC
12FA:  POP     186
.................... 		output_high(MOTORINY2); 
12FC:  BSET.B  2C4.1
.................... 		output_low(MOTORINY1); 
12FE:  BCLR.B  2C4.0
.................... 	} 
1300:  BRA     130E
.................... 	else if (direction == BREAK) 
1302:  MOV     9EE,W4
1304:  CP      W4,#2
1306:  BRA     NZ,130E
.................... 	{ 
.................... 		set_pwm_duty(2,0); 
1308:  CLR     186
.................... 		output_low(MOTORINY1); 
130A:  BCLR.B  2C4.0
.................... 		output_low(MOTORINY2); 
130C:  BCLR.B  2C4.1
.................... 	} 
130E:  RETURN  
....................  
.................... } 
....................  
.................... void computeInstantlyDistantX() 
*
114C:  MOV     W5,[W15++]
114E:  MOV     W6,[W15++]
1150:  MOV     W7,[W15++]
1152:  MOV     W8,[W15++]
.................... { 
.................... 	currentDistanceX = (((countDistanceX*(7.5/64))*3.14)/180)*RadiusOfFaulhaber; 
1154:  MOV     95E,W0
1156:  MOV     #0,W1
1158:  MOV     #0,W2
115A:  MOV     #0,W3
115C:  CALL    E8C
1160:  MOV     #0,W4
1162:  MOV     #0,W5
1164:  MOV     #0,W6
1166:  MOV     #3FBE,W7
1168:  CALL    EF0
116C:  MOV     W0,W5
116E:  MOV     W1,W6
1170:  MOV     W2,W7
1172:  MOV     W3,W8
1174:  MOV     W5,[W15++]
1176:  MOV     W6,[W15++]
1178:  MOV     W7,[W15++]
117A:  MOV     W5,W0
117C:  MOV     W6,W1
117E:  MOV     W7,W2
1180:  MOV     W8,W3
1182:  MOV     #851F,W4
1184:  MOV     #51EB,W5
1186:  MOV     #1EB8,W6
1188:  MOV     #4009,W7
118A:  CALL    EF0
118E:  MOV     [--W15],W7
1190:  MOV     [--W15],W6
1192:  MOV     [--W15],W5
1194:  MOV     W0,W5
1196:  MOV     W1,W6
1198:  MOV     W2,W7
119A:  MOV     W3,W8
119C:  MOV     W5,[W15++]
119E:  MOV     W6,[W15++]
11A0:  MOV     W7,[W15++]
11A2:  MOV     W5,W0
11A4:  MOV     W6,W1
11A6:  MOV     W7,W2
11A8:  MOV     W8,W3
11AA:  MOV     #0,W4
11AC:  MOV     #0,W5
11AE:  MOV     #8000,W6
11B0:  MOV     #4066,W7
11B2:  CALL    1000
11B6:  MOV     [--W15],W7
11B8:  MOV     [--W15],W6
11BA:  MOV     [--W15],W5
11BC:  MOV     W0,W5
11BE:  MOV     W1,W6
11C0:  MOV     W2,W7
11C2:  MOV     W3,W8
11C4:  MOV     W5,[W15++]
11C6:  MOV     W6,[W15++]
11C8:  MOV     W7,[W15++]
11CA:  MOV     W5,W0
11CC:  MOV     W6,W1
11CE:  MOV     W7,W2
11D0:  MOV     W8,W3
11D2:  MOV     #0,W4
11D4:  MOV     #0,W5
11D6:  MOV     #0,W6
11D8:  MOV     #401C,W7
11DA:  CALL    EF0
11DE:  MOV     [--W15],W7
11E0:  MOV     [--W15],W6
11E2:  MOV     [--W15],W5
11E4:  CALL    1108
11E8:  MOV     W1,952
11EA:  MOV     W2,954
11EC:  MOV     [--W15],W8
11EE:  MOV     [--W15],W7
11F0:  MOV     [--W15],W6
11F2:  MOV     [--W15],W5
11F4:  RETURN  
.................... } 
....................  
.................... void computeInstantlyDistantY() 
11F6:  MOV     W5,[W15++]
11F8:  MOV     W6,[W15++]
11FA:  MOV     W7,[W15++]
11FC:  MOV     W8,[W15++]
.................... { 
.................... 	currentDistanceY = (((countDistanceY*(7.5/64))*3.14)/180)*RadiusOfFaulhaber; 
11FE:  MOV     960,W0
1200:  MOV     #0,W1
1202:  MOV     #0,W2
1204:  MOV     #0,W3
1206:  CALL    E8C
120A:  MOV     #0,W4
120C:  MOV     #0,W5
120E:  MOV     #0,W6
1210:  MOV     #3FBE,W7
1212:  CALL    EF0
1216:  MOV     W0,W5
1218:  MOV     W1,W6
121A:  MOV     W2,W7
121C:  MOV     W3,W8
121E:  MOV     W5,[W15++]
1220:  MOV     W6,[W15++]
1222:  MOV     W7,[W15++]
1224:  MOV     W5,W0
1226:  MOV     W6,W1
1228:  MOV     W7,W2
122A:  MOV     W8,W3
122C:  MOV     #851F,W4
122E:  MOV     #51EB,W5
1230:  MOV     #1EB8,W6
1232:  MOV     #4009,W7
1234:  CALL    EF0
1238:  MOV     [--W15],W7
123A:  MOV     [--W15],W6
123C:  MOV     [--W15],W5
123E:  MOV     W0,W5
1240:  MOV     W1,W6
1242:  MOV     W2,W7
1244:  MOV     W3,W8
1246:  MOV     W5,[W15++]
1248:  MOV     W6,[W15++]
124A:  MOV     W7,[W15++]
124C:  MOV     W5,W0
124E:  MOV     W6,W1
1250:  MOV     W7,W2
1252:  MOV     W8,W3
1254:  MOV     #0,W4
1256:  MOV     #0,W5
1258:  MOV     #8000,W6
125A:  MOV     #4066,W7
125C:  CALL    1000
1260:  MOV     [--W15],W7
1262:  MOV     [--W15],W6
1264:  MOV     [--W15],W5
1266:  MOV     W0,W5
1268:  MOV     W1,W6
126A:  MOV     W2,W7
126C:  MOV     W3,W8
126E:  MOV     W5,[W15++]
1270:  MOV     W6,[W15++]
1272:  MOV     W7,[W15++]
1274:  MOV     W5,W0
1276:  MOV     W6,W1
1278:  MOV     W7,W2
127A:  MOV     W8,W3
127C:  MOV     #0,W4
127E:  MOV     #0,W5
1280:  MOV     #0,W6
1282:  MOV     #401C,W7
1284:  CALL    EF0
1288:  MOV     [--W15],W7
128A:  MOV     [--W15],W6
128C:  MOV     [--W15],W5
128E:  CALL    1108
1292:  MOV     W1,95A
1294:  MOV     W2,95C
1296:  MOV     [--W15],W8
1298:  MOV     [--W15],W7
129A:  MOV     [--W15],W6
129C:  MOV     [--W15],W5
129E:  RETURN  
.................... } 
....................  
.................... void CheckProtocal(int8u *arrayPtr) 
*
25F8:  MOV     W5,[W15++]
25FA:  MOV     #C,W5
25FC:  REPEAT  #4
25FE:  MOV     [W5++],[W15++]
.................... { 
.................... 	StateResetX = 0; 
2600:  CLR.B   97A
.................... 	StateResetY = 0; 
2602:  CLR.B   97B
.................... 	StateBreakX = 0; 
2604:  CLR.B   978
.................... 	StateBreakY = 0; 
2606:  CLR.B   979
.................... 	StateMotorX = 0; 
2608:  CLR.B   96B
.................... 	StateMotorY = 0; 
260A:  CLR.B   974
.................... 	StatePID = 0; 
260C:  CLR     96E
.................... 	if(arrayPtr[0] == 0xff) 
260E:  MOV     #0,W0
2610:  ADD     982,W0
2612:  MOV.B   [W0],W4L
2614:  XOR.B   #FF,W4L
2616:  BRA     NZ,2C28
.................... 	{ 
.................... 		if(arrayPtr[1] == 0xff) 
2618:  MOV     #1,W0
261A:  ADD     982,W0
261C:  MOV.B   [W0],W4L
261E:  XOR.B   #FF,W4L
2620:  BRA     NZ,2C28
.................... 		{ 
.................... 			if(arrayPtr[2] == 0x01) 
2622:  MOV     #2,W0
2624:  ADD     982,W0
2626:  MOV.B   [W0],W4L
2628:  CP.B    W4L,#1
262A:  BRA     NZ,2C28
.................... 			{ 
.................... 				if(arrayPtr[4] == 0) 
262C:  MOV     #4,W0
262E:  ADD     982,W0
2630:  CP0.B   [W0]
2632:  BRA     NZ,2650
.................... 				{ 
.................... 					// printf("Monalisa Activate\n"); 
.................... 					// printf("Reset!\n"); 
.................... 					// StateResetX = 1; 
.................... 					// StateResetY = 1; 
.................... 					StateMotorX = 1; 
2634:  MOV.B   #1,W0L
2636:  MOV.B   W0L,96B
.................... 					StateBreakX = 0; 
2638:  CLR.B   978
.................... 					StateDirectionX = 1; 
263A:  MOV.B   #1,W0L
263C:  MOV.B   W0L,975
.................... 					speedX = 300; 
263E:  MOV     #12C,W4
2640:  MOV     W4,970
.................... 					StateMotorY = 1; 
2642:  MOV.B   #1,W0L
2644:  MOV.B   W0L,974
.................... 					StateBreakY = 0; 
2646:  CLR.B   979
.................... 					StateDirectionY = 1; 
2648:  MOV.B   #1,W0L
264A:  MOV.B   W0L,976
.................... 					speedY = 500; 
264C:  MOV     #1F4,W4
264E:  MOV     W4,972
.................... 				} 
....................  
.................... 				if(arrayPtr[4] == 9) 
2650:  MOV     #4,W0
2652:  ADD     982,W0
2654:  MOV.B   [W0],W4L
2656:  CP.B    W4L,#9
2658:  BRA     NZ,269A
.................... 				{ 
.................... 					speedX = convert_8to16bit(arrayPtr[5],arrayPtr[6]); 
265A:  MOV     #5,W0
265C:  ADD     982,W0
265E:  MOV.B   [W0],W5L
2660:  MOV     #6,W0
2662:  ADD     982,W0
2664:  MOV.B   [W0],W6L
2666:  PUSH    994
2668:  MOV.B   W5L,[W15-#2]
266A:  POP     994
266C:  PUSH    994
266E:  MOV.B   W6L,[W15-#1]
2670:  POP     994
2672:  CALL    23F6
2676:  MOV     W0,970
.................... 					StateMotorX = 1; 
2678:  MOV.B   #1,W0L
267A:  MOV.B   W0L,96B
.................... 					StateBreakX = 0; 
267C:  CLR.B   978
.................... 					if(arrayPtr[7] == 0) 
267E:  MOV     #7,W0
2680:  ADD     982,W0
2682:  CP0.B   [W0]
2684:  BRA     NZ,268A
.................... 					{ 
.................... 						StateDirectionX = 0; 
2686:  CLR.B   975
.................... 					} 
2688:  BRA     2698
.................... 					else if(arrayPtr[7] == 1) 
268A:  MOV     #7,W0
268C:  ADD     982,W0
268E:  MOV.B   [W0],W4L
2690:  CP.B    W4L,#1
2692:  BRA     NZ,2698
.................... 					{ 
.................... 						StateDirectionX = 1; 
2694:  MOV.B   #1,W0L
2696:  MOV.B   W0L,975
.................... 					} 
.................... 				} 
2698:  BRA     26E2
.................... 				else if(arrayPtr[4] == 10) 
269A:  MOV     #4,W0
269C:  ADD     982,W0
269E:  MOV.B   [W0],W4L
26A0:  CP.B    W4L,#A
26A2:  BRA     NZ,26E2
.................... 				{ 
.................... 					speedY = convert_8to16bit(arrayPtr[5],arrayPtr[6]); 
26A4:  MOV     #5,W0
26A6:  ADD     982,W0
26A8:  MOV.B   [W0],W5L
26AA:  MOV     #6,W0
26AC:  ADD     982,W0
26AE:  MOV.B   [W0],W6L
26B0:  PUSH    994
26B2:  MOV.B   W5L,[W15-#2]
26B4:  POP     994
26B6:  PUSH    994
26B8:  MOV.B   W6L,[W15-#1]
26BA:  POP     994
26BC:  CALL    23F6
26C0:  MOV     W0,972
.................... 					StateMotorY = 1; 
26C2:  MOV.B   #1,W0L
26C4:  MOV.B   W0L,974
.................... 					StateBreakY = 0; 
26C6:  CLR.B   979
.................... 					if(arrayPtr[7] == 0) 
26C8:  MOV     #7,W0
26CA:  ADD     982,W0
26CC:  CP0.B   [W0]
26CE:  BRA     NZ,26D4
.................... 					{ 
.................... 						StateDirectionY = 0; 
26D0:  CLR.B   976
.................... 					} 
26D2:  BRA     26E2
.................... 					else if(arrayPtr[7] == 1) 
26D4:  MOV     #7,W0
26D6:  ADD     982,W0
26D8:  MOV.B   [W0],W4L
26DA:  CP.B    W4L,#1
26DC:  BRA     NZ,26E2
.................... 					{ 
.................... 						StateDirectionY = 1; 
26DE:  MOV.B   #1,W0L
26E0:  MOV.B   W0L,976
.................... 					} 
.................... 				} 
....................  
.................... 				if(arrayPtr[4] == 12) 
26E2:  MOV     #4,W0
26E4:  ADD     982,W0
26E6:  MOV.B   [W0],W4L
26E8:  CP.B    W4L,#C
26EA:  BRA     NZ,2742
.................... 				{ 
.................... 					// StateDirectionX = 2; 
.................... 					// StateMotor = 2; 
.................... 					if(arrayPtr[5] == 9) 
26EC:  MOV     #5,W0
26EE:  ADD     982,W0
26F0:  MOV.B   [W0],W4L
26F2:  CP.B    W4L,#9
26F4:  BRA     NZ,2718
.................... 					{ 
.................... 						StateBreakX = 1; 
26F6:  MOV.B   #1,W0L
26F8:  MOV.B   W0L,978
.................... 						StateMotorX = 0; 
26FA:  CLR.B   96B
.................... 						speedX = 0; 
26FC:  CLR     970
26FE:  PUSH    42
2700:  BCLR.B  81.7
2702:  SETM.B  42
2704:  BSET.B  81.7
.................... 						MotorMovingX(0,BREAK); 
2706:  CLR     9F0
2708:  MOV     #2,W4
270A:  MOV     W4,9F2
270C:  CALL    12A0
2710:  BCLR.B  81.7
2712:  POP     42
2714:  BSET.B  81.7
.................... 					} 
2716:  BRA     2742
.................... 					else if(arrayPtr[5] == 10) 
2718:  MOV     #5,W0
271A:  ADD     982,W0
271C:  MOV.B   [W0],W4L
271E:  CP.B    W4L,#A
2720:  BRA     NZ,2742
.................... 					{ 
.................... 						StateBreakY = 1; 
2722:  MOV.B   #1,W0L
2724:  MOV.B   W0L,979
.................... 						StateMotorY = 0; 
2726:  CLR.B   974
.................... 						speedY = 0; 
2728:  CLR     972
272A:  PUSH    42
272C:  BCLR.B  81.7
272E:  SETM.B  42
2730:  BSET.B  81.7
.................... 						MotorMovingY(0,BREAK); 
2732:  CLR     9EC
2734:  MOV     #2,W4
2736:  MOV     W4,9EE
2738:  CALL    12D8
273C:  BCLR.B  81.7
273E:  POP     42
2740:  BSET.B  81.7
.................... 					} 
.................... 				} 
.................... 				if(arrayPtr[4] == 7) 
2742:  MOV     #4,W0
2744:  ADD     982,W0
2746:  MOV.B   [W0],W4L
2748:  CP.B    W4L,#7
274A:  BRA     NZ,27E8
.................... 				{ 
.................... 					referenceDesireX = ((float)convert_8to16bit(arrayPtr[5], arrayPtr[6])/10.0); 
274C:  MOV     #5,W0
274E:  ADD     982,W0
2750:  MOV.B   [W0],W5L
2752:  MOV     #6,W0
2754:  ADD     982,W0
2756:  MOV.B   [W0],W6L
2758:  PUSH    994
275A:  MOV.B   W5L,[W15-#2]
275C:  POP     994
275E:  PUSH    994
2760:  MOV.B   W6L,[W15-#1]
2762:  POP     994
2764:  CALL    23F6
2768:  CALL    2410
276C:  MOV     W0,W5
276E:  MOV     W1,W6
2770:  MOV     W5,W0
2772:  MOV     W6,W1
2774:  MOV     #0,W2
2776:  MOV     #4120,W3
2778:  CALL    244A
277C:  MOV     W0,94E
277E:  MOV     W1,950
.................... 					referenceDesireY = ((float)convert_8to16bit(arrayPtr[7], arrayPtr[8])/10.0); 
2780:  MOV     #7,W0
2782:  ADD     982,W0
2784:  MOV.B   [W0],W5L
2786:  MOV     #8,W0
2788:  ADD     982,W0
278A:  MOV.B   [W0],W6L
278C:  PUSH    994
278E:  MOV.B   W5L,[W15-#2]
2790:  POP     994
2792:  PUSH    994
2794:  MOV.B   W6L,[W15-#1]
2796:  POP     994
2798:  CALL    23F6
279C:  CALL    2410
27A0:  MOV     W0,W5
27A2:  MOV     W1,W6
27A4:  MOV     W5,W0
27A6:  MOV     W6,W1
27A8:  MOV     #0,W2
27AA:  MOV     #4120,W3
27AC:  CALL    244A
27B0:  MOV     W0,956
27B2:  MOV     W1,958
.................... 					StatePID = 1; 
27B4:  MOV     #1,W4
27B6:  MOV     W4,96E
27B8:  PUSH    42
27BA:  BCLR.B  81.7
27BC:  SETM.B  42
27BE:  BSET.B  81.7
.................... 					MotorMovingX(0, BREAK); 
27C0:  CLR     9F0
27C2:  MOV     #2,W4
27C4:  MOV     W4,9F2
27C6:  CALL    12A0
27CA:  BCLR.B  81.7
27CC:  POP     42
27CE:  BSET.B  81.7
27D0:  PUSH    42
27D2:  BCLR.B  81.7
27D4:  SETM.B  42
27D6:  BSET.B  81.7
.................... 					MotorMovingY(0, BREAK); 
27D8:  CLR     9EC
27DA:  MOV     #2,W4
27DC:  MOV     W4,9EE
27DE:  CALL    12D8
27E2:  BCLR.B  81.7
27E4:  POP     42
27E6:  BSET.B  81.7
.................... 				} 
.................... 				if(arrayPtr[4] == 8) 
27E8:  MOV     #4,W0
27EA:  ADD     982,W0
27EC:  MOV.B   [W0],W4L
27EE:  CP.B    W4L,#8
27F0:  BRA     NZ,28AA
.................... 				{ 
.................... 					int16u high_byteX,low_byteX,high_byteY,low_byteY; 
.................... 					high_byteX = ((int16u)currentDistanceX & 0xff00)>>8; 
27F2:  PUSH    42
27F4:  BCLR.B  81.7
27F6:  SETM.B  42
27F8:  BSET.B  81.7
27FA:  MOV     952,W0
27FC:  MOV     954,W1
27FE:  CALL    1736
2802:  BCLR.B  81.7
2804:  POP     42
2806:  BSET.B  81.7
2808:  MOV     W0,W5
280A:  MOV     #FF00,W0
280C:  AND     W0,W5,W5
280E:  MOV.B   B,W0L
2810:  MOV.B   W0L,984
2812:  CLR.B   985
.................... 					low_byteX = ((int16u)currentDistanceX & 0x00ff); 
2814:  PUSH    42
2816:  BCLR.B  81.7
2818:  SETM.B  42
281A:  BSET.B  81.7
281C:  MOV     952,W0
281E:  MOV     954,W1
2820:  CALL    1736
2824:  BCLR.B  81.7
2826:  POP     42
2828:  BSET.B  81.7
282A:  MOV     W0,W5
282C:  MOV     W5,W4
282E:  AND     #FF,W4
2830:  MOV     W4,986
.................... 					high_byteY = ((int16u)currentDistanceY & 0xff00)>>8; 
2832:  PUSH    42
2834:  BCLR.B  81.7
2836:  SETM.B  42
2838:  BSET.B  81.7
283A:  MOV     95A,W0
283C:  MOV     95C,W1
283E:  CALL    1736
2842:  BCLR.B  81.7
2844:  POP     42
2846:  BSET.B  81.7
2848:  MOV     W0,W5
284A:  MOV     #FF00,W0
284C:  AND     W0,W5,W5
284E:  MOV.B   B,W0L
2850:  MOV.B   W0L,988
2852:  CLR.B   989
.................... 					low_byteY = ((int16u)currentDistanceY & 0x00ff); 
2854:  PUSH    42
2856:  BCLR.B  81.7
2858:  SETM.B  42
285A:  BSET.B  81.7
285C:  MOV     95A,W0
285E:  MOV     95C,W1
2860:  CALL    1736
2864:  BCLR.B  81.7
2866:  POP     42
2868:  BSET.B  81.7
286A:  MOV     W0,W5
286C:  MOV     W5,W4
286E:  AND     #FF,W4
2870:  MOV     W4,98A
.................... 					Send_Buffer[0] = 255; 
2872:  SETM.B  8C4
.................... 					Send_Buffer[1] = 255; 
2874:  MOV.B   #FF,W0L
2876:  MOV.B   W0L,8C5
.................... 					Send_Buffer[2] = 1; 
2878:  MOV.B   #1,W0L
287A:  MOV.B   W0L,8C6
.................... 					Send_Buffer[3] = 7; 
287C:  MOV.B   #7,W0L
287E:  MOV.B   W0L,8C7
.................... 					Send_Buffer[4] = 8; 
2880:  MOV.B   #8,W0L
2882:  MOV.B   W0L,8C8
.................... 					Send_Buffer[5] = (int8u)high_byteX; 
2884:  MOV.B   984,W0L
2886:  MOV.B   W0L,8C9
.................... 					Send_Buffer[6] = (int8u)low_byteX; 
2888:  MOV.B   986,W0L
288A:  MOV.B   W0L,8CA
.................... 					Send_Buffer[7] = (int8u)high_byteY; 
288C:  MOV.B   988,W0L
288E:  MOV.B   W0L,8CB
.................... 					Send_Buffer[8] = (int8u)low_byteY; 
2890:  MOV.B   98A,W0L
2892:  MOV.B   W0L,8CC
.................... 					Send_Buffer[9] = (input_b () & 0xff00)>>8; 
2894:  MOV     2CA,W5
2896:  MOV     #FF00,W0
2898:  AND     W0,W5,W5
289A:  MOV.B   B,W0L
289C:  MOV.B   W0L,8CD
.................... 					Send_Buffer[10] = 0x0f; 
289E:  MOV.B   #F,W0L
28A0:  MOV.B   W0L,8CE
.................... 					SendTx1(Send_Buffer); 
28A2:  MOV     #8C4,W4
28A4:  MOV     W4,990
28A6:  CALL    2590
.................... 				} 
....................  
.................... 				if(arrayPtr[4] == 55) 
28AA:  MOV     #4,W0
28AC:  ADD     982,W0
28AE:  MOV.B   [W0],W4L
28B0:  XOR.B   #37,W4L
28B2:  BRA     NZ,2C28
.................... 				{ 
.................... 					if(arrayPtr[5] == 0) 
28B4:  MOV     #5,W0
28B6:  ADD     982,W0
28B8:  CP0.B   [W0]
28BA:  BRA     NZ,2A6E
.................... 					{ 
.................... 						MotorX.Kp = (float)arrayPtr[6] + ((float)arrayPtr[7]/100); 
28BC:  MOV     #6,W0
28BE:  ADD     982,W0
28C0:  MOV     W0,W4
28C2:  MOV.B   [W4],W0L
28C4:  CLR.B   1
28C6:  CALL    2410
28CA:  MOV     W0,W5
28CC:  MOV     W1,W6
28CE:  MOV     #7,W0
28D0:  ADD     982,W0
28D2:  MOV     W0,W4
28D4:  MOV.B   [W4],W0L
28D6:  CLR.B   1
28D8:  CALL    2410
28DC:  MOV     W0,W7
28DE:  MOV     W1,W8
28E0:  MOV     W7,W0
28E2:  MOV     W8,W1
28E4:  MOV     #0,W2
28E6:  MOV     #42C8,W3
28E8:  CALL    244A
28EC:  BCLR.B  43.0
28EE:  PUSH    42
28F0:  BCLR.B  81.7
28F2:  SETM.B  42
28F4:  BSET.B  81.7
28F6:  MOV     W0,W2
28F8:  MOV     W1,W3
28FA:  MOV     W5,W0
28FC:  MOV     W6,W1
28FE:  CALL    1310
2902:  BCLR.B  81.7
2904:  POP     42
2906:  BSET.B  81.7
2908:  MOV     W0,8FE
290A:  MOV     W1,900
.................... 						MotorX.Ki = (float)arrayPtr[8] + ((float)arrayPtr[9]/100); 
290C:  MOV     #8,W0
290E:  ADD     982,W0
2910:  MOV     W0,W4
2912:  MOV.B   [W4],W0L
2914:  CLR.B   1
2916:  CALL    2410
291A:  MOV     W0,W5
291C:  MOV     W1,W6
291E:  MOV     #9,W0
2920:  ADD     982,W0
2922:  MOV     W0,W4
2924:  MOV.B   [W4],W0L
2926:  CLR.B   1
2928:  CALL    2410
292C:  MOV     W0,W7
292E:  MOV     W1,W8
2930:  MOV     W7,W0
2932:  MOV     W8,W1
2934:  MOV     #0,W2
2936:  MOV     #42C8,W3
2938:  CALL    244A
293C:  BCLR.B  43.0
293E:  PUSH    42
2940:  BCLR.B  81.7
2942:  SETM.B  42
2944:  BSET.B  81.7
2946:  MOV     W0,W2
2948:  MOV     W1,W3
294A:  MOV     W5,W0
294C:  MOV     W6,W1
294E:  CALL    1310
2952:  BCLR.B  81.7
2954:  POP     42
2956:  BSET.B  81.7
2958:  MOV     W0,902
295A:  MOV     W1,904
.................... 						MotorX.Kd = (float)arrayPtr[10] + ((float)arrayPtr[11]/100); 
295C:  MOV     #A,W0
295E:  ADD     982,W0
2960:  MOV     W0,W4
2962:  MOV.B   [W4],W0L
2964:  CLR.B   1
2966:  CALL    2410
296A:  MOV     W0,W5
296C:  MOV     W1,W6
296E:  MOV     #B,W0
2970:  ADD     982,W0
2972:  MOV     W0,W4
2974:  MOV.B   [W4],W0L
2976:  CLR.B   1
2978:  CALL    2410
297C:  MOV     W0,W7
297E:  MOV     W1,W8
2980:  MOV     W7,W0
2982:  MOV     W8,W1
2984:  MOV     #0,W2
2986:  MOV     #42C8,W3
2988:  CALL    244A
298C:  BCLR.B  43.0
298E:  PUSH    42
2990:  BCLR.B  81.7
2992:  SETM.B  42
2994:  BSET.B  81.7
2996:  MOV     W0,W2
2998:  MOV     W1,W3
299A:  MOV     W5,W0
299C:  MOV     W6,W1
299E:  CALL    1310
29A2:  BCLR.B  81.7
29A4:  POP     42
29A6:  BSET.B  81.7
29A8:  MOV     W0,906
29AA:  MOV     W1,908
.................... 						printf("X : Kp = %d.%d , Kd = %d.%d\n , Ki = %d.%d", arrayPtr[6],arrayPtr[7],arrayPtr[8],arrayPtr[9],arrayPtr[10],arrayPtr[11]); 
29AC:  MOV     #6,W0
29AE:  ADD     982,W0
29B0:  MOV.B   [W0],W5L
29B2:  MOV     #7,W0
29B4:  ADD     982,W0
29B6:  MOV.B   [W0],W6L
29B8:  MOV     #8,W0
29BA:  ADD     982,W0
29BC:  MOV.B   [W0],W7L
29BE:  MOV     #9,W0
29C0:  ADD     982,W0
29C2:  MOV.B   [W0],W8L
29C4:  MOV     #A,W0
29C6:  ADD     982,W0
29C8:  MOV.B   [W0],W9L
29CA:  MOV     #B,W0
29CC:  ADD     982,W0
29CE:  MOV.B   [W0],W10L
29D0:  MOV     #0,W1
29D2:  MOV     W1,W0
29D4:  CLR.B   1
29D6:  CALL    DFC
29DA:  INC     W1,W1
29DC:  BTSC.B  223.1
29DE:  BRA     29DC
29E0:  MOV     W0,224
29E2:  MOV     #8,W0
29E4:  CPSGT   W1,W0
29E6:  BRA     29D2
29E8:  MOV.B   W5L,W0L
29EA:  CLR.B   1
29EC:  MOV     #0,W4
29EE:  CALL    1762
29F2:  BTSC.B  223.1
29F4:  BRA     29F2
29F6:  MOV     #2E,W4
29F8:  MOV     W4,224
29FA:  MOV.B   W6L,W0L
29FC:  CLR.B   1
29FE:  MOV     #0,W4
2A00:  CALL    1762
2A04:  MOV     #E,W1
2A06:  MOV     W1,W0
2A08:  CLR.B   1
2A0A:  CALL    DFC
2A0E:  INC     W1,W1
2A10:  BTSC.B  223.1
2A12:  BRA     2A10
2A14:  MOV     W0,224
2A16:  MOV     #15,W0
2A18:  CPSGT   W1,W0
2A1A:  BRA     2A06
2A1C:  MOV.B   W7L,W0L
2A1E:  CLR.B   1
2A20:  MOV     #0,W4
2A22:  CALL    1762
2A26:  BTSC.B  223.1
2A28:  BRA     2A26
2A2A:  MOV     #2E,W4
2A2C:  MOV     W4,224
2A2E:  MOV.B   W8L,W0L
2A30:  CLR.B   1
2A32:  MOV     #0,W4
2A34:  CALL    1762
2A38:  MOV     #1B,W1
2A3A:  MOV     W1,W0
2A3C:  CLR.B   1
2A3E:  CALL    DFC
2A42:  INC     W1,W1
2A44:  BTSC.B  223.1
2A46:  BRA     2A44
2A48:  MOV     W0,224
2A4A:  MOV     #23,W0
2A4C:  CPSGT   W1,W0
2A4E:  BRA     2A3A
2A50:  MOV.B   W9L,W0L
2A52:  CLR.B   1
2A54:  MOV     #0,W4
2A56:  CALL    1762
2A5A:  BTSC.B  223.1
2A5C:  BRA     2A5A
2A5E:  MOV     #2E,W4
2A60:  MOV     W4,224
2A62:  MOV.B   W10L,W0L
2A64:  CLR.B   1
2A66:  MOV     #0,W4
2A68:  CALL    1762
.................... 					} 
2A6C:  BRA     2C28
.................... 					else if(arrayPtr[5] == 1) 
2A6E:  MOV     #5,W0
2A70:  ADD     982,W0
2A72:  MOV.B   [W0],W4L
2A74:  CP.B    W4L,#1
2A76:  BRA     NZ,2C28
.................... 					{ 
.................... 						MotorY.Kp = (float)arrayPtr[6] + ((float)arrayPtr[7]/100); 
2A78:  MOV     #6,W0
2A7A:  ADD     982,W0
2A7C:  MOV     W0,W4
2A7E:  MOV.B   [W4],W0L
2A80:  CLR.B   1
2A82:  CALL    2410
2A86:  MOV     W0,W5
2A88:  MOV     W1,W6
2A8A:  MOV     #7,W0
2A8C:  ADD     982,W0
2A8E:  MOV     W0,W4
2A90:  MOV.B   [W4],W0L
2A92:  CLR.B   1
2A94:  CALL    2410
2A98:  MOV     W0,W7
2A9A:  MOV     W1,W8
2A9C:  MOV     W7,W0
2A9E:  MOV     W8,W1
2AA0:  MOV     #0,W2
2AA2:  MOV     #42C8,W3
2AA4:  CALL    244A
2AA8:  BCLR.B  43.0
2AAA:  PUSH    42
2AAC:  BCLR.B  81.7
2AAE:  SETM.B  42
2AB0:  BSET.B  81.7
2AB2:  MOV     W0,W2
2AB4:  MOV     W1,W3
2AB6:  MOV     W5,W0
2AB8:  MOV     W6,W1
2ABA:  CALL    1310
2ABE:  BCLR.B  81.7
2AC0:  POP     42
2AC2:  BSET.B  81.7
2AC4:  MOV     W0,926
2AC6:  MOV     W1,928
.................... 						MotorY.Ki = (float)arrayPtr[8] + ((float)arrayPtr[9]/100); 
2AC8:  MOV     #8,W0
2ACA:  ADD     982,W0
2ACC:  MOV     W0,W4
2ACE:  MOV.B   [W4],W0L
2AD0:  CLR.B   1
2AD2:  CALL    2410
2AD6:  MOV     W0,W5
2AD8:  MOV     W1,W6
2ADA:  MOV     #9,W0
2ADC:  ADD     982,W0
2ADE:  MOV     W0,W4
2AE0:  MOV.B   [W4],W0L
2AE2:  CLR.B   1
2AE4:  CALL    2410
2AE8:  MOV     W0,W7
2AEA:  MOV     W1,W8
2AEC:  MOV     W7,W0
2AEE:  MOV     W8,W1
2AF0:  MOV     #0,W2
2AF2:  MOV     #42C8,W3
2AF4:  CALL    244A
2AF8:  BCLR.B  43.0
2AFA:  PUSH    42
2AFC:  BCLR.B  81.7
2AFE:  SETM.B  42
2B00:  BSET.B  81.7
2B02:  MOV     W0,W2
2B04:  MOV     W1,W3
2B06:  MOV     W5,W0
2B08:  MOV     W6,W1
2B0A:  CALL    1310
2B0E:  BCLR.B  81.7
2B10:  POP     42
2B12:  BSET.B  81.7
2B14:  MOV     W0,92A
2B16:  MOV     W1,92C
.................... 						MotorY.Kd = (float)arrayPtr[10] + ((float)arrayPtr[11]/100); 
2B18:  MOV     #A,W0
2B1A:  ADD     982,W0
2B1C:  MOV     W0,W4
2B1E:  MOV.B   [W4],W0L
2B20:  CLR.B   1
2B22:  CALL    2410
2B26:  MOV     W0,W5
2B28:  MOV     W1,W6
2B2A:  MOV     #B,W0
2B2C:  ADD     982,W0
2B2E:  MOV     W0,W4
2B30:  MOV.B   [W4],W0L
2B32:  CLR.B   1
2B34:  CALL    2410
2B38:  MOV     W0,W7
2B3A:  MOV     W1,W8
2B3C:  MOV     W7,W0
2B3E:  MOV     W8,W1
2B40:  MOV     #0,W2
2B42:  MOV     #42C8,W3
2B44:  CALL    244A
2B48:  BCLR.B  43.0
2B4A:  PUSH    42
2B4C:  BCLR.B  81.7
2B4E:  SETM.B  42
2B50:  BSET.B  81.7
2B52:  MOV     W0,W2
2B54:  MOV     W1,W3
2B56:  MOV     W5,W0
2B58:  MOV     W6,W1
2B5A:  CALL    1310
2B5E:  BCLR.B  81.7
2B60:  POP     42
2B62:  BSET.B  81.7
2B64:  MOV     W0,92E
2B66:  MOV     W1,930
.................... 						printf("Y : Kp = %d.%d , Kd = %d.%d\n , Ki = %d.%d", arrayPtr[6],arrayPtr[7],arrayPtr[8],arrayPtr[9],arrayPtr[10],arrayPtr[11]); 
2B68:  MOV     #6,W0
2B6A:  ADD     982,W0
2B6C:  MOV.B   [W0],W5L
2B6E:  MOV     #7,W0
2B70:  ADD     982,W0
2B72:  MOV.B   [W0],W6L
2B74:  MOV     #8,W0
2B76:  ADD     982,W0
2B78:  MOV.B   [W0],W7L
2B7A:  MOV     #9,W0
2B7C:  ADD     982,W0
2B7E:  MOV.B   [W0],W8L
2B80:  MOV     #A,W0
2B82:  ADD     982,W0
2B84:  MOV.B   [W0],W9L
2B86:  MOV     #B,W0
2B88:  ADD     982,W0
2B8A:  MOV.B   [W0],W10L
2B8C:  MOV     #0,W1
2B8E:  MOV     W1,W0
2B90:  CLR.B   1
2B92:  CALL    E34
2B96:  INC     W1,W1
2B98:  BTSC.B  223.1
2B9A:  BRA     2B98
2B9C:  MOV     W0,224
2B9E:  MOV     #8,W0
2BA0:  CPSGT   W1,W0
2BA2:  BRA     2B8E
2BA4:  MOV.B   W5L,W0L
2BA6:  CLR.B   1
2BA8:  MOV     #0,W4
2BAA:  CALL    1762
2BAE:  BTSC.B  223.1
2BB0:  BRA     2BAE
2BB2:  MOV     #2E,W4
2BB4:  MOV     W4,224
2BB6:  MOV.B   W6L,W0L
2BB8:  CLR.B   1
2BBA:  MOV     #0,W4
2BBC:  CALL    1762
2BC0:  MOV     #E,W1
2BC2:  MOV     W1,W0
2BC4:  CLR.B   1
2BC6:  CALL    E34
2BCA:  INC     W1,W1
2BCC:  BTSC.B  223.1
2BCE:  BRA     2BCC
2BD0:  MOV     W0,224
2BD2:  MOV     #15,W0
2BD4:  CPSGT   W1,W0
2BD6:  BRA     2BC2
2BD8:  MOV.B   W7L,W0L
2BDA:  CLR.B   1
2BDC:  MOV     #0,W4
2BDE:  CALL    1762
2BE2:  BTSC.B  223.1
2BE4:  BRA     2BE2
2BE6:  MOV     #2E,W4
2BE8:  MOV     W4,224
2BEA:  MOV.B   W8L,W0L
2BEC:  CLR.B   1
2BEE:  MOV     #0,W4
2BF0:  CALL    1762
2BF4:  MOV     #1B,W1
2BF6:  MOV     W1,W0
2BF8:  CLR.B   1
2BFA:  CALL    E34
2BFE:  INC     W1,W1
2C00:  BTSC.B  223.1
2C02:  BRA     2C00
2C04:  MOV     W0,224
2C06:  MOV     #23,W0
2C08:  CPSGT   W1,W0
2C0A:  BRA     2BF6
2C0C:  MOV.B   W9L,W0L
2C0E:  CLR.B   1
2C10:  MOV     #0,W4
2C12:  CALL    1762
2C16:  BTSC.B  223.1
2C18:  BRA     2C16
2C1A:  MOV     #2E,W4
2C1C:  MOV     W4,224
2C1E:  MOV.B   W10L,W0L
2C20:  CLR.B   1
2C22:  MOV     #0,W4
2C24:  CALL    1762
.................... 					} 
.................... 				} 
.................... 			} 
.................... 		} 
.................... 	} 
2C28:  MOV     #14,W5
2C2A:  REPEAT  #4
2C2C:  MOV     [--W15],[W5--]
2C2E:  MOV     [--W15],W5
2C30:  RETURN  
.................... } 
....................  
.................... int16u convert_8to16bit(int8u baseHightbyte, int8u baseLowbyte) 
*
23F6:  MOV     W5,[W15++]
.................... {	 
.................... 	return ((int16u)baseHightbyte<<8) | ((int16u)baseLowbyte); 
23F8:  MOV.B   994,W0L
23FA:  MOV.B   W0L,A
23FC:  CLR.B   B
23FE:  MOV.B   W5L,W0L
2400:  MOV.B   W0L,B
2402:  CLR.B   W5
2404:  MOV.B   995,W0L
2406:  CLR.B   1
2408:  IOR      W5,  W0,W0
240A:  MOV     W0,0
240C:  MOV     [--W15],W5
240E:  RETURN  
.................... } 
....................  
.................... #INT_TIMER5 
.................... void INT_TMR5() 
*
1858:  PUSH    42
185A:  PUSH    36
185C:  PUSH    32
185E:  MOV     W0,[W15++]
1860:  MOV     #2,W0
1862:  REPEAT  #C
1864:  MOV     [W0++],[W15++]
.................... { 
.................... 	computeInstantlyDistantX(); 
1866:  CALL    114C
.................... 	computeInstantlyDistantY(); 
186A:  CALL    11F6
.................... 	if(StateResetX == 1) 
186E:  MOV     97A,W4
1870:  CP.B    W4L,#1
1872:  BRA     NZ,1880
.................... 	{ 
.................... 		MotorMovingX(300,CW); 
1874:  MOV     #12C,W4
1876:  MOV     W4,9F0
1878:  MOV     #1,W4
187A:  MOV     W4,9F2
187C:  CALL    12A0
.................... 	} 
.................... 	if(StateResetY == 1) 
1880:  MOV     97A,W4
1882:  LSR     W4,#8,W4
1884:  CP.B    W4L,#1
1886:  BRA     NZ,1894
.................... 	{ 
.................... 		MotorMovingY(500,CW); 
1888:  MOV     #1F4,W4
188A:  MOV     W4,9EC
188C:  MOV     #1,W4
188E:  MOV     W4,9EE
1890:  CALL    12D8
.................... 	} 
....................  
.................... 	if(StateMotorX == 1) 
1894:  MOV     96A,W4
1896:  LSR     W4,#8,W4
1898:  CP.B    W4L,#1
189A:  BRA     NZ,18C0
.................... 	{ 
.................... 		if(StateDirectionX == 0) 
189C:  CP0.B   975
189E:  BRA     NZ,18AC
.................... 		{ 
.................... 			MotorMovingX(speedX,CCW); 
18A0:  PUSH    970
18A2:  POP     9F0
18A4:  CLR     9F2
18A6:  CALL    12A0
.................... 		} 
18AA:  BRA     18C0
.................... 		else if(StateDirectionX == 1) 
18AC:  MOV     974,W4
18AE:  LSR     W4,#8,W4
18B0:  CP.B    W4L,#1
18B2:  BRA     NZ,18C0
.................... 		{ 
.................... 			MotorMovingX(speedX,CW); 
18B4:  PUSH    970
18B6:  POP     9F0
18B8:  MOV     #1,W4
18BA:  MOV     W4,9F2
18BC:  CALL    12A0
.................... 		} 
.................... 	} 
.................... 	 
.................... 	if(StateMotorY == 1) 
18C0:  MOV     974,W4
18C2:  CP.B    W4L,#1
18C4:  BRA     NZ,18E8
.................... 	{ 
.................... 		if(StateDirectionY == 0) 
18C6:  CP0.B   976
18C8:  BRA     NZ,18D6
.................... 		{ 
.................... 			MotorMovingY(speedY,CCW); 
18CA:  PUSH    972
18CC:  POP     9EC
18CE:  CLR     9EE
18D0:  CALL    12D8
.................... 		} 
18D4:  BRA     18E8
.................... 		else if(StateDirectionY == 1) 
18D6:  MOV     976,W4
18D8:  CP.B    W4L,#1
18DA:  BRA     NZ,18E8
.................... 		{ 
.................... 			MotorMovingY(speedY,CW); 
18DC:  PUSH    972
18DE:  POP     9EC
18E0:  MOV     #1,W4
18E2:  MOV     W4,9EE
18E4:  CALL    12D8
.................... 		} 
.................... 	} 
....................  
.................... 	if(StateBreakX == 1) 
18E8:  MOV     978,W4
18EA:  CP.B    W4L,#1
18EC:  BRA     NZ,18F8
.................... 	{ 
.................... 		MotorMovingX(0,BREAK); 
18EE:  CLR     9F0
18F0:  MOV     #2,W4
18F2:  MOV     W4,9F2
18F4:  CALL    12A0
.................... 	} 
.................... 	if(StateBreakY == 1) 
18F8:  MOV     978,W4
18FA:  LSR     W4,#8,W4
18FC:  CP.B    W4L,#1
18FE:  BRA     NZ,190A
.................... 	{ 
.................... 		MotorMovingY(0,BREAK); 
1900:  CLR     9EC
1902:  MOV     #2,W4
1904:  MOV     W4,9EE
1906:  CALL    12D8
.................... 	} 
....................  
.................... 	if(StatePID == 1) 
190A:  MOV     96E,W4
190C:  CP      W4,#1
190E:  BRA     NZ,1A34
.................... 	{ 
....................  
.................... 		errorX = referenceDesireX - currentDistanceX; 
1910:  BSET.B  43.0
1912:  MOV     94E,W0
1914:  MOV     950,W1
1916:  MOV     952,W2
1918:  MOV     954,W3
191A:  CALL    1310
191E:  MOV     W0,962
1920:  MOV     W1,964
.................... 		errorY = referenceDesireY - currentDistanceY; 
1922:  BSET.B  43.0
1924:  MOV     956,W0
1926:  MOV     958,W1
1928:  MOV     95A,W2
192A:  MOV     95C,W3
192C:  CALL    1310
1930:  MOV     W0,966
1932:  MOV     W1,968
....................  
.................... 		if( abs(errorX) > 0.5) 
1934:  MOV     962,W0
1936:  MOV     964,W1
1938:  BCLR    W1.F
193A:  MOV     W0,W5
193C:  MOV     W1,W6
193E:  MOV     #0,W0
1940:  MOV     #3F00,W1
1942:  MOV     W5,W2
1944:  MOV     W6,W3
1946:  CALL    14BA
194A:  BRA     NC,19A8
.................... 		{ 
.................... 			PIDVelocityForm(errorX,&MotorX); 
194C:  PUSH    962
194E:  POP     9D6
1950:  PUSH    964
1952:  POP     9D8
1954:  MOV     #8FE,W4
1956:  MOV     W4,9DA
1958:  CALL    15E6
.................... 			if(MotorX.u >= 0) 
195C:  MOV     #0,W0
195E:  MOV     #0,W1
1960:  MOV     912,W2
1962:  MOV     914,W3
1964:  CALL    14BA
1968:  BRA     C,196C
196A:  BRA     NZ,1980
.................... 			{ 
.................... 				MotorMovingX((int16)MotorX.u,CCW); 
196C:  MOV     912,W0
196E:  MOV     914,W1
1970:  CALL    1736
1974:  MOV     W0,W5
1976:  MOV     W5,9F0
1978:  CLR     9F2
197A:  CALL    12A0
.................... 			} 
197E:  BRA     19A6
.................... 			else if(MotorX.u < 0) 
1980:  MOV     912,W0
1982:  MOV     914,W1
1984:  MOV     #0,W2
1986:  MOV     #0,W3
1988:  CALL    14BA
198C:  BRA     NC,19A6
.................... 			{ 
.................... 				MotorMovingX(-1*(int16)MotorX.u,CW); 
198E:  MOV     912,W0
1990:  MOV     914,W1
1992:  CALL    1736
1996:  MOV     #FFFF,W4
1998:  MUL.SS  W4,W0,W0
199A:  MOV     W0,W5
199C:  MOV     W5,9F0
199E:  MOV     #1,W3
19A0:  MOV     W3,9F2
19A2:  CALL    12A0
.................... 			} 
.................... 		} 
19A6:  BRA     19B2
.................... 		else 
.................... 		{ 
.................... 			MotorMovingX(0,BREAK); 
19A8:  CLR     9F0
19AA:  MOV     #2,W4
19AC:  MOV     W4,9F2
19AE:  CALL    12A0
....................  
.................... 		} 
....................  
.................... 		if( abs(errorY) > 0.5) 
19B2:  MOV     966,W0
19B4:  MOV     968,W1
19B6:  BCLR    W1.F
19B8:  MOV     W0,W5
19BA:  MOV     W1,W6
19BC:  MOV     #0,W0
19BE:  MOV     #3F00,W1
19C0:  MOV     W5,W2
19C2:  MOV     W6,W3
19C4:  CALL    14BA
19C8:  BRA     NC,1A2A
.................... 		{ 
.................... 			PIDVelocityForm(errorY,&MotorY); 
19CA:  PUSH    966
19CC:  POP     9D6
19CE:  PUSH    968
19D0:  POP     9D8
19D2:  MOV     #926,W4
19D4:  MOV     W4,9DA
19D6:  CALL    15E6
.................... 			if(MotorY.u >= 0) 
19DA:  MOV     #0,W0
19DC:  MOV     #0,W1
19DE:  MOV     93A,W2
19E0:  MOV     93C,W3
19E2:  CALL    14BA
19E6:  BRA     C,19EA
19E8:  BRA     NZ,19FE
.................... 			{ 
.................... 				MotorMovingY((int16)MotorY.u,CCW); 
19EA:  MOV     93A,W0
19EC:  MOV     93C,W1
19EE:  CALL    1736
19F2:  MOV     W0,W5
19F4:  MOV     W5,9EC
19F6:  CLR     9EE
19F8:  CALL    12D8
.................... 			} 
19FC:  BRA     1A28
.................... 			else if(MotorY.u < 0) 
19FE:  MOV     93A,W0
1A00:  MOV     93C,W1
1A02:  MOV     #0,W2
1A04:  MOV     #0,W3
1A06:  CALL    14BA
1A0A:  BRA     NC,1A28
.................... 			{ 
.................... 				MotorMovingY((int16)(-1*MotorY.u),CW); 
1A0C:  MOV     #0,W0
1A0E:  MOV     #BF80,W1
1A10:  MOV     93A,W2
1A12:  MOV     93C,W3
1A14:  CALL    1522
1A18:  CALL    1736
1A1C:  MOV     W0,W5
1A1E:  MOV     W5,9EC
1A20:  MOV     #1,W4
1A22:  MOV     W4,9EE
1A24:  CALL    12D8
.................... 			} 
.................... 		} 
1A28:  BRA     1A34
.................... 		else 
.................... 		{ 
.................... 			MotorMovingY(0,BREAK); 
1A2A:  CLR     9EC
1A2C:  MOV     #2,W4
1A2E:  MOV     W4,9EE
1A30:  CALL    12D8
.................... 		} 
.................... 	} 
....................  
.................... 	printf("X : %d,%d,%d,%d,%d\n", (int16)MotorX.u,(int16)errorX,(int16)referenceDesireX,(int16)currentDistanceX,(int16)countDistanceX); 
1A34:  MOV     912,W0
1A36:  MOV     914,W1
1A38:  CALL    1736
1A3C:  MOV     W0,W5
1A3E:  MOV     962,W0
1A40:  MOV     964,W1
1A42:  CALL    1736
1A46:  MOV     W0,W6
1A48:  MOV     94E,W0
1A4A:  MOV     950,W1
1A4C:  CALL    1736
1A50:  MOV     W0,W7
1A52:  MOV     952,W0
1A54:  MOV     954,W1
1A56:  CALL    1736
1A5A:  MOV     W0,W8
1A5C:  MOV     #0,W1
1A5E:  MOV     W1,W0
1A60:  CLR.B   1
1A62:  CALL    E6C
1A66:  INC     W1,W1
1A68:  BTSC.B  223.1
1A6A:  BRA     1A68
1A6C:  MOV     W0,224
1A6E:  MOV     #3,W0
1A70:  CPSGT   W1,W0
1A72:  BRA     1A5E
1A74:  MOV     W5,W0
1A76:  MOV     #0,W4
1A78:  CALL    1762
1A7C:  BTSC.B  223.1
1A7E:  BRA     1A7C
1A80:  MOV     #2C,W4
1A82:  MOV     W4,224
1A84:  MOV     W6,W0
1A86:  MOV     #0,W4
1A88:  CALL    1762
1A8C:  BTSC.B  223.1
1A8E:  BRA     1A8C
1A90:  MOV     #2C,W4
1A92:  MOV     W4,224
1A94:  MOV     W7,W0
1A96:  MOV     #0,W4
1A98:  CALL    1762
1A9C:  BTSC.B  223.1
1A9E:  BRA     1A9C
1AA0:  MOV     #2C,W4
1AA2:  MOV     W4,224
1AA4:  MOV     W8,W0
1AA6:  MOV     #0,W4
1AA8:  CALL    1762
1AAC:  BTSC.B  223.1
1AAE:  BRA     1AAC
1AB0:  MOV     #2C,W4
1AB2:  MOV     W4,224
1AB4:  MOV     95E,W0
1AB6:  MOV     #0,W4
1AB8:  CALL    1762
1ABC:  BTSC.B  223.1
1ABE:  BRA     1ABC
1AC0:  MOV     #A,W4
1AC2:  MOV     W4,224
....................  
.................... 	// printf("Y:%d,%d,%d,%d\n", (int16)MotorY.u,(int16)errorY,(int16)referenceDesireY,(int16)countDistanceY); 
....................  
....................  
.................... } 
....................  
....................  
1AC4:  BCLR.B  87.4
1AC6:  MOV     #1A,W0
1AC8:  REPEAT  #C
1ACA:  MOV     [--W15],[W0--]
1ACC:  MOV     [--W15],W0
1ACE:  POP     32
1AD0:  POP     36
1AD2:  POP     42
1AD4:  RETFIE  
.................... #INT_IC1 
.................... void testIC1() 
1AD6:  PUSH    42
1AD8:  PUSH    36
1ADA:  PUSH    32
1ADC:  MOV     W0,[W15++]
1ADE:  MOV     #2,W0
1AE0:  REPEAT  #C
1AE2:  MOV     [W0++],[W15++]
1AE4:  MOV     2CA,W5
1AE6:  MOV     W5,W4
1AE8:  AND     #30,W4
1AEA:  MOV     W4,9D6
.................... {	 
.................... 	int16u ipX = (input_b () & 0x0030); 
....................  
.................... 	timeNewX = get_capture (1); 
1AEC:  PUSH    140
1AEE:  POP     8E8
.................... 	intervalX = timeNewX - timeOldX; 
1AF0:  MOV     8E8,W4
1AF2:  MOV     8E6,W3
1AF4:  SUB     W4,W3,W0
1AF6:  MOV     W0,8EC
.................... 	stateCHAX = ~(((ipX & 0x10)>>4) ^ ((ipX & 0x20)>>5)) & 0x01; 
1AF8:  MOV     9D6,W0
1AFA:  AND     W0,#10,W5
1AFC:  LSR     W5,#4,W5
1AFE:  MOV     9D6,W6
1B00:  AND     #20,W6
1B02:  LSR     W6,#5,W0
1B04:  XOR     W5,W0,W0
1B06:  COM     W0,W0
1B08:  MOV     W0,W5
1B0A:  AND     W5,#1,W0
1B0C:  MOV     W0,8DE
.................... 	if ( (ipX & 0x10)>>4 == (ipX & 0x20)>>5 ) { 
1B0E:  MOV     9D6,W0
1B10:  AND     W0,#10,W5
1B12:  LSR     W5,#4,W5
1B14:  MOV     9D6,W6
1B16:  AND     #20,W6
1B18:  LSR     W6,#5,W0
1B1A:  CP      W5,W0
1B1C:  BRA     NZ,1B2A
.................... 		directionReadX = 1; 
1B1E:  MOV     #1,W4
1B20:  MOV     W4,8EA
.................... 		countDistanceX += 1; 
1B22:  MOV     95E,W4
1B24:  ADD     W4,#1,W4
1B26:  MOV     W4,95E
.................... 	} 
1B28:  BRA     1B34
.................... 	else{ 
.................... 		directionReadX = 2; 
1B2A:  MOV     #2,W4
1B2C:  MOV     W4,8EA
.................... 		countDistanceX -= 1; 
1B2E:  MOV     95E,W4
1B30:  SUB     W4,#1,W0
1B32:  MOV     W0,95E
.................... 	} 
.................... 	timeOldX = timeNewX; 
1B34:  PUSH    8E8
1B36:  POP     8E6
.................... 	// computeInstantlyDistantX(); 
....................  
.................... } 
....................  
1B38:  BCLR.B  84.1
1B3A:  MOV     #1A,W0
1B3C:  REPEAT  #C
1B3E:  MOV     [--W15],[W0--]
1B40:  MOV     [--W15],W0
1B42:  POP     32
1B44:  POP     36
1B46:  POP     42
1B48:  RETFIE  
.................... #INT_IC2 
.................... void testIC2() 
1B4A:  PUSH    42
1B4C:  PUSH    36
1B4E:  PUSH    32
1B50:  MOV     W0,[W15++]
1B52:  MOV     #2,W0
1B54:  REPEAT  #C
1B56:  MOV     [W0++],[W15++]
1B58:  MOV     2CA,W5
1B5A:  MOV     W5,W4
1B5C:  AND     #30,W4
1B5E:  MOV     W4,9D6
.................... { 
.................... 	int16u ipX = (input_b () & 0x0030); 
.................... 	timeNewX = get_capture(2); 
1B60:  PUSH    144
1B62:  POP     8E8
....................  
.................... 	intervalX = timeNewX - timeOldX; 
1B64:  MOV     8E8,W4
1B66:  MOV     8E6,W3
1B68:  SUB     W4,W3,W0
1B6A:  MOV     W0,8EC
.................... 	stateCHBX = ((ipX & 0x10)>>4) ^ ((ipX & 0x20)>>5); 
1B6C:  MOV     9D6,W0
1B6E:  AND     W0,#10,W5
1B70:  LSR     W5,#4,W5
1B72:  MOV     9D6,W6
1B74:  AND     #20,W6
1B76:  LSR     W6,#5,W0
1B78:  XOR     W5,W0,W0
1B7A:  MOV     W0,8E0
.................... 	if ( (ipX & 0x10)>>4 != (ipX & 0x20)>>5 ){ 
1B7C:  MOV     9D6,W0
1B7E:  AND     W0,#10,W5
1B80:  LSR     W5,#4,W5
1B82:  MOV     9D6,W6
1B84:  AND     #20,W6
1B86:  LSR     W6,#5,W0
1B88:  CP      W5,W0
1B8A:  BRA     Z,1B98
.................... 		directionReadX = 1; 
1B8C:  MOV     #1,W4
1B8E:  MOV     W4,8EA
.................... 		countDistanceX += 1; 
1B90:  MOV     95E,W4
1B92:  ADD     W4,#1,W4
1B94:  MOV     W4,95E
.................... 	} 
1B96:  BRA     1BA2
.................... 	else{ 
.................... 		directionReadX = 2; 
1B98:  MOV     #2,W4
1B9A:  MOV     W4,8EA
.................... 		countDistanceX -= 1; 
1B9C:  MOV     95E,W4
1B9E:  SUB     W4,#1,W0
1BA0:  MOV     W0,95E
.................... 	} 
....................  
.................... 	timeOldX = timeNewX; 
1BA2:  PUSH    8E8
1BA4:  POP     8E6
.................... 	// computeInstantlyDistantX(); 
....................  
.................... } 
....................  
1BA6:  BCLR.B  84.5
1BA8:  MOV     #1A,W0
1BAA:  REPEAT  #C
1BAC:  MOV     [--W15],[W0--]
1BAE:  MOV     [--W15],W0
1BB0:  POP     32
1BB2:  POP     36
1BB4:  POP     42
1BB6:  RETFIE  
.................... #INT_IC3 
.................... void testIC3() 
1BB8:  PUSH    42
1BBA:  PUSH    36
1BBC:  PUSH    32
1BBE:  MOV     W0,[W15++]
1BC0:  MOV     #2,W0
1BC2:  REPEAT  #C
1BC4:  MOV     [W0++],[W15++]
1BC6:  MOV     2CA,W5
1BC8:  MOV     W5,W4
1BCA:  AND     #C0,W4
1BCC:  MOV     W4,9D6
.................... {	 
.................... 	int16u ipY = (input_b () & 0x00c0); 
....................  
.................... 	timeNewY = get_capture (3); 
1BCE:  PUSH    148
1BD0:  POP     8F4
.................... 	intervalY = timeNewY - timeOldY; 
1BD2:  MOV     8F4,W4
1BD4:  MOV     8F2,W3
1BD6:  SUB     W4,W3,W0
1BD8:  MOV     W0,8F8
.................... 	stateCHAY = ~(((ipY & 0x80)>>4) ^ ((ipY & 0x40)>>5)) & 0x01; 
1BDA:  MOV     9D6,W5
1BDC:  AND     #80,W5
1BDE:  LSR     W5,#4,W5
1BE0:  MOV     9D6,W6
1BE2:  AND     #40,W6
1BE4:  LSR     W6,#5,W0
1BE6:  XOR     W5,W0,W0
1BE8:  COM     W0,W0
1BEA:  MOV     W0,W5
1BEC:  AND     W5,#1,W0
1BEE:  MOV     W0,8E2
.................... 	if ( (ipY & 0x80)>>7 == (ipY & 0x40)>>6 ) { 
1BF0:  MOV     9D6,W5
1BF2:  AND     #80,W5
1BF4:  LSR     W5,#7,W5
1BF6:  MOV     9D6,W6
1BF8:  AND     #40,W6
1BFA:  LSR     W6,#6,W0
1BFC:  CP      W5,W0
1BFE:  BRA     NZ,1C0C
.................... 		directionReadY = 1; 
1C00:  MOV     #1,W4
1C02:  MOV     W4,8F6
.................... 		countDistanceY -= 1; 
1C04:  MOV     960,W4
1C06:  SUB     W4,#1,W0
1C08:  MOV     W0,960
.................... 	} 
1C0A:  BRA     1C16
.................... 	else{ 
.................... 		directionReadY = 2; 
1C0C:  MOV     #2,W4
1C0E:  MOV     W4,8F6
.................... 		countDistanceY += 1; 
1C10:  MOV     960,W4
1C12:  ADD     W4,#1,W4
1C14:  MOV     W4,960
.................... 	} 
.................... 	timeOldY = timeNewY; 
1C16:  PUSH    8F4
1C18:  POP     8F2
....................  
.................... 	// printf("Interrupt IC3\n"); 
.................... 	// computeInstantlyDistantY(); 
....................  
.................... } 
....................  
1C1A:  BCLR.B  88.5
1C1C:  MOV     #1A,W0
1C1E:  REPEAT  #C
1C20:  MOV     [--W15],[W0--]
1C22:  MOV     [--W15],W0
1C24:  POP     32
1C26:  POP     36
1C28:  POP     42
1C2A:  RETFIE  
.................... #INT_IC4 
.................... void testIC4() 
1C2C:  PUSH    42
1C2E:  PUSH    36
1C30:  PUSH    32
1C32:  MOV     W0,[W15++]
1C34:  MOV     #2,W0
1C36:  REPEAT  #C
1C38:  MOV     [W0++],[W15++]
1C3A:  MOV     2CA,W5
1C3C:  MOV     W5,W4
1C3E:  AND     #C0,W4
1C40:  MOV     W4,9D6
.................... { 
.................... 	int16u ipY = (input_b () & 0x00c0); 
.................... 	timeNewY = get_capture(4); 
1C42:  PUSH    14C
1C44:  POP     8F4
....................  
.................... 	intervalY = timeNewY - timeOldY; 
1C46:  MOV     8F4,W4
1C48:  MOV     8F2,W3
1C4A:  SUB     W4,W3,W0
1C4C:  MOV     W0,8F8
.................... 	stateCHBY = ((ipY & 0x80)>>4) ^ ((ipY & 0x40)>>5); 
1C4E:  MOV     9D6,W5
1C50:  AND     #80,W5
1C52:  LSR     W5,#4,W5
1C54:  MOV     9D6,W6
1C56:  AND     #40,W6
1C58:  LSR     W6,#5,W0
1C5A:  XOR     W5,W0,W0
1C5C:  MOV     W0,8E4
.................... 	if ( (ipY & 0x80)>>7 != (ipY & 0x40)>>6 ){ 
1C5E:  MOV     9D6,W5
1C60:  AND     #80,W5
1C62:  LSR     W5,#7,W5
1C64:  MOV     9D6,W6
1C66:  AND     #40,W6
1C68:  LSR     W6,#6,W0
1C6A:  CP      W5,W0
1C6C:  BRA     Z,1C7A
.................... 		directionReadY = 1; 
1C6E:  MOV     #1,W4
1C70:  MOV     W4,8F6
.................... 		countDistanceY -= 1; 
1C72:  MOV     960,W4
1C74:  SUB     W4,#1,W0
1C76:  MOV     W0,960
.................... 	} 
1C78:  BRA     1C84
.................... 	else{ 
.................... 		directionReadY = 2; 
1C7A:  MOV     #2,W4
1C7C:  MOV     W4,8F6
.................... 		countDistanceY += 1; 
1C7E:  MOV     960,W4
1C80:  ADD     W4,#1,W4
1C82:  MOV     W4,960
.................... 	} 
....................  
.................... 	timeOldY = timeNewY; 
1C84:  PUSH    8F4
1C86:  POP     8F2
....................  
.................... 	// printf("Interrupt IC4\n"); 
.................... 	// computeInstantlyDistantY(); 
....................  
.................... } 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                                 Interrupt Functions                                   **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
1C88:  BCLR.B  88.6
1C8A:  MOV     #1A,W0
1C8C:  REPEAT  #C
1C8E:  MOV     [--W15],[W0--]
1C90:  MOV     [--W15],W0
1C92:  POP     32
1C94:  POP     36
1C96:  POP     42
1C98:  RETFIE  
.................... #INT_RDA 
.................... void RDA1() 
*
1F0C:  PUSH    42
1F0E:  PUSH    36
1F10:  PUSH    32
1F12:  MOV     W0,[W15++]
1F14:  MOV     #2,W0
1F16:  REPEAT  #C
1F18:  MOV     [W0++],[W15++]
.................... { 
.................... 	static FRAME_STATE FrameState = FRAME_WAIT; 
.................... 	static int8u FrmIdx = 0; 
.................... 	static int8u Lenght = 0; 
.................... 	int8u Chr; 
.................... 	int8u *errCode; 
.................... 	Chr = getc(); 
1F1A:  BTSS.B  222.0
1F1C:  BRA     1F1A
1F1E:  MOV     226,W0
1F20:  MOV.B   W0L,9DC
.................... 	RxCount++; 
1F22:  INC     08A0
.................... 	switch(FrameState) 
1F24:  MOV.B   97C,W0L
1F26:  CLR.B   1
1F28:  XOR     #0,W0
1F2A:  BRA     Z,1F36
1F2C:  XOR     #1,W0
1F2E:  BRA     Z,1F52
1F30:  XOR     #3,W0
1F32:  BRA     Z,1F74
1F34:  BRA     203A
.................... 	{ 
.................... 		case FRAME_WAIT: 
.................... 			if(Chr == START_CHR) 
1F36:  MOV     9DC,W4
1F38:  XOR.B   #FF,W4L
1F3A:  BRA     NZ,1F50
.................... 			{ 
.................... 				RxBuffPtr[FrmIdx] = Chr; 
1F3C:  MOV     97C,W4
1F3E:  LSR     W4,#8,W4
1F40:  MOV     W4,W0
1F42:  ADD     8A6,W0
1F44:  MOV     W0,W5
1F46:  MOV     9DC,W0
1F48:  MOV.B   W0L,[W5+#0]
.................... 				FrmIdx++; 
1F4A:  INC.B   097D
.................... 				FrameState = FRAME_PROGRESS; 
1F4C:  MOV.B   #1,W0L
1F4E:  MOV.B   W0L,97C
.................... 			} 
.................... 			break; 
1F50:  BRA     203C
.................... 		case  FRAME_PROGRESS: 
.................... 			if(Chr == START_CHR) 
1F52:  MOV     9DC,W4
1F54:  XOR.B   #FF,W4L
1F56:  BRA     NZ,1F6E
.................... 			{ 
.................... 				RxBuffPtr[FrmIdx] = Chr; 
1F58:  MOV     97C,W4
1F5A:  LSR     W4,#8,W4
1F5C:  MOV     W4,W0
1F5E:  ADD     8A6,W0
1F60:  MOV     W0,W5
1F62:  MOV     9DC,W0
1F64:  MOV.B   W0L,[W5+#0]
.................... 				FrmIdx++; 
1F66:  INC.B   097D
.................... 				FrameState = FRAME_PROGRESS2; 
1F68:  MOV.B   #2,W0L
1F6A:  MOV.B   W0L,97C
.................... 			} 
1F6C:  BRA     1F72
.................... 			else 
.................... 			{ 
.................... 				FrmIdx = 0; 
1F6E:  CLR.B   97D
.................... 				FrameState = FRAME_WAIT; 
1F70:  CLR.B   97C
.................... 			} 
.................... 			break; 
1F72:  BRA     203C
.................... 		case FRAME_PROGRESS2: 
.................... 			if(FrmIdx == 2) 
1F74:  MOV     97C,W4
1F76:  LSR     W4,#8,W4
1F78:  CP.B    W4L,#2
1F7A:  BRA     NZ,1F9A
.................... 			{ 
.................... 				if(Chr == 0x01) 
1F7C:  MOV     9DC,W4
1F7E:  CP.B    W4L,#1
1F80:  BRA     NZ,1F94
.................... 				// if(1) 
.................... 				{ 
.................... 					RxBuffPtr[FrmIdx] = Chr; 
1F82:  MOV     97C,W4
1F84:  LSR     W4,#8,W4
1F86:  MOV     W4,W0
1F88:  ADD     8A6,W0
1F8A:  MOV     W0,W5
1F8C:  MOV     9DC,W0
1F8E:  MOV.B   W0L,[W5+#0]
.................... 					FrmIdx++; 
1F90:  INC.B   097D
.................... 				} 
1F92:  BRA     1F98
.................... 				else 
.................... 				{ 
.................... 					FrmIdx = 0; 
1F94:  CLR.B   97D
.................... 					FrameState = FRAME_WAIT; 
1F96:  CLR.B   97C
.................... 				}	 
.................... 			} 
1F98:  BRA     2038
.................... 			else if(FrmIdx == 3) 
1F9A:  MOV     97C,W4
1F9C:  LSR     W4,#8,W4
1F9E:  CP.B    W4L,#3
1FA0:  BRA     NZ,1FB8
.................... 			{ 
.................... 				RxBuffPtr[FrmIdx] = Chr; 
1FA2:  MOV     97C,W4
1FA4:  LSR     W4,#8,W4
1FA6:  MOV     W4,W0
1FA8:  ADD     8A6,W0
1FAA:  MOV     W0,W5
1FAC:  MOV     9DC,W0
1FAE:  MOV.B   W0L,[W5+#0]
.................... 				Lenght = Chr; 
1FB0:  MOV.B   9DC,W0L
1FB2:  MOV.B   W0L,97E
.................... 				FrmIdx++; 
1FB4:  INC.B   097D
.................... 			} 
1FB6:  BRA     2038
.................... 			else if(FrmIdx < 3+Lenght) 
1FB8:  MOV     97E,W4
1FBA:  CLR.B   9
1FBC:  MOV     #3,W3
1FBE:  ADD     W3,W4,W0
1FC0:  MOV     97C,W4
1FC2:  LSR     W4,#8,W4
1FC4:  CP      W4,W0
1FC6:  BRA     C,1FDA
.................... 			{ 
.................... 				RxBuffPtr[FrmIdx] = Chr; 
1FC8:  MOV     97C,W4
1FCA:  LSR     W4,#8,W4
1FCC:  MOV     W4,W0
1FCE:  ADD     8A6,W0
1FD0:  MOV     W0,W5
1FD2:  MOV     9DC,W0
1FD4:  MOV.B   W0L,[W5+#0]
.................... 				FrmIdx++; 
1FD6:  INC.B   097D
.................... 			} 
1FD8:  BRA     2038
.................... 			else if(FrmIdx == 3+Lenght) 
1FDA:  MOV     97E,W4
1FDC:  CLR.B   9
1FDE:  MOV     #3,W3
1FE0:  ADD     W3,W4,W0
1FE2:  MOV     97C,W4
1FE4:  LSR     W4,#8,W4
1FE6:  CP      W0,W4
1FE8:  BRA     NZ,2038
.................... 			{ 
.................... 				RxBuffPtr[FrmIdx] = Chr; 
1FEA:  MOV     97C,W4
1FEC:  LSR     W4,#8,W4
1FEE:  MOV     W4,W0
1FF0:  ADD     8A6,W0
1FF2:  MOV     W0,W5
1FF4:  MOV     9DC,W0
1FF6:  MOV.B   W0L,[W5+#0]
.................... 				FrmIdx = 0; 
1FF8:  CLR.B   97D
.................... 				Lenght = 0; 
1FFA:  CLR.B   97E
.................... 				Rx1FrameCount++; 
1FFC:  INC     089E
....................  
.................... 				QPtrXPut(&Rx1QCB,(void *)RxBuffPtr, &errCode); 
1FFE:  MOV     #8A8,W4
2000:  MOV     W4,9E6
2002:  PUSH    8A6
2004:  POP     9E8
2006:  MOV     #9DE,W4
2008:  MOV     W4,9EA
200A:  CALL    1C9A
.................... 				if (errCode == Q_FULL) 
200E:  MOV     9DE,W4
2010:  CP      W4,#1
2012:  BRA     NZ,2020
.................... 				{ 
.................... 					/* code */ 
.................... 					free((void *)RxBuffPtr); 
2014:  PUSH    8A6
2016:  POP     9F4
2018:  CALL    1DC0
.................... 					MemCount--; 
201C:  DEC     08DA
.................... 					Rx1QFullCount++; 
201E:  INC     08A4
.................... 				} 
.................... 				FrameState = FRAME_WAIT; 
2020:  CLR.B   97C
....................  
.................... 				RxBuffPtr = (int8u *)malloc((sizeof (int8u)) * RX_CMND_FRM_LN); 
2022:  MOV     #10,W4
2024:  MOV     W4,9F6
2026:  CALL    1E5A
202A:  MOV     W0,8A6
.................... 				if(RxBuffPtr == (int8u *)NULL) 
202C:  CP0     8A6
202E:  BRA     NZ,2036
.................... 				{ 
.................... 					disable_interrupts(INT_RDA); 
2030:  BCLR.B  95.3
.................... 					MemFail++; 
2032:  INC     08D8
.................... 				} 
2034:  BRA     2038
.................... 				else 
.................... 				{ 
.................... 					MemCount++; 
2036:  INC     08DA
.................... 				} 
.................... 			} 
.................... 			 
.................... 			break; 
2038:  BRA     203C
.................... 		default: 
.................... 			break; 
203A:  BRA     203C
.................... 	} 
.................... 	return; 
.................... } 
....................  
203C:  BCLR.B  85.3
203E:  MOV     #1A,W0
2040:  REPEAT  #C
2042:  MOV     [--W15],[W0--]
2044:  MOV     [--W15],W0
2046:  POP     32
2048:  POP     36
204A:  POP     42
204C:  RETFIE  
.................... #INT_TBE 
.................... void TBE1ISR() 
*
20B2:  BCLR.B  85.4
20B4:  PUSH    42
20B6:  PUSH    36
20B8:  PUSH    32
20BA:  MOV     W0,[W15++]
20BC:  MOV     #2,W0
20BE:  REPEAT  #C
20C0:  MOV     [W0++],[W15++]
.................... { 
.................... 	int8u destChr; 
.................... 	Q_ERR errCode; 
.................... 	Q8UXGet (&Tx1QCB, &destChr,&errCode); 
20C2:  MOV     #80A,W4
20C4:  MOV     W4,9DE
20C6:  MOV     #9D6,W4
20C8:  MOV     W4,9E0
20CA:  MOV     #9D7,W4
20CC:  MOV     W4,9E2
20CE:  CALL    204E
.................... 	if (errCode == Q_OK) 
20D2:  CP0.B   9D7
20D4:  BRA     NZ,20E2
.................... 	{ 
.................... 		/* code */ 
.................... 		putc(destChr); 
20D6:  MOV.B   9D6,W0L
20D8:  BTSC.B  223.1
20DA:  BRA     20D8
20DC:  MOV.B   W0L,224
20DE:  CLR.B   225
.................... 	} 
20E0:  BRA     20E6
.................... 	else 
.................... 	{ 
.................... 		disable_interrupts(INT_TBE); 
20E2:  BCLR.B  95.4
.................... 		Tx1Flag = TX1_READY; 
20E4:  BSET.B  898.0
.................... 	} 
.................... 	return; 
.................... } 
....................  
20E6:  MOV     #1A,W0
20E8:  REPEAT  #C
20EA:  MOV     [--W15],[W0--]
20EC:  MOV     [--W15],W0
20EE:  POP     32
20F0:  POP     36
20F2:  POP     42
20F4:  RETFIE  
.................... #INT_EXT2 
.................... void ResetX() 
20F6:  PUSH    42
20F8:  PUSH    36
20FA:  PUSH    32
20FC:  MOV     W0,[W15++]
20FE:  MOV     #2,W0
2100:  REPEAT  #C
2102:  MOV     [W0++],[W15++]
.................... { 
.................... 	MotorMovingX(0,BREAK); 
2104:  CLR     9F0
2106:  MOV     #2,W4
2108:  MOV     W4,9F2
210A:  CALL    12A0
.................... 	StateResetX = 0; 
210E:  CLR.B   97A
.................... 	countDistanceX = 0; 
2110:  CLR     95E
.................... 	currentDistanceX = 0;	 
2112:  CLR     952
2114:  CLR     954
.................... 	//  
.................... 	speedX = 300; 
2116:  MOV     #12C,W4
2118:  MOV     W4,970
.................... 	if(((input_b () & 0x08)>>3)>0) 
211A:  MOV     2CA,W5
211C:  AND     W5,#8,W5
211E:  LSR     W5,#3,W5
2120:  CP0     W5
2122:  BRA     Z,212E
.................... 	{ 
.................... 		// printf("FUCK X1"); 
.................... 		// disable_interrupts( INT_EXT1 ); 
.................... 		ext_int_edge(2, H_TO_L); 
2124:  BSET.B  82.2
.................... 		StateMotorX = 0; 
2126:  CLR.B   96B
.................... 		StateBreakX = 1; 
2128:  MOV.B   #1,W0L
212A:  MOV.B   W0L,978
.................... 	} 
212C:  BRA     2136
.................... 	else 
.................... 	{ 
.................... 		// printf("FUCK X0"); 
.................... 		ext_int_edge(2, L_TO_H); 
212E:  BCLR.B  82.2
.................... 		StateMotorX = 1; 
2130:  MOV.B   #1,W0L
2132:  MOV.B   W0L,96B
.................... 		StateDirectionX = 0; 
2134:  CLR.B   975
.................... 		// MotorMovingX(300, CCW); 
.................... 	} 
....................  
.................... } 
....................  
2136:  BCLR.B  87.5
2138:  MOV     #1A,W0
213A:  REPEAT  #C
213C:  MOV     [--W15],[W0--]
213E:  MOV     [--W15],W0
2140:  POP     32
2142:  POP     36
2144:  POP     42
2146:  RETFIE  
.................... #INT_EXT1 
.................... void ResetY() 
2148:  PUSH    42
214A:  PUSH    36
214C:  PUSH    32
214E:  MOV     W0,[W15++]
2150:  MOV     #2,W0
2152:  REPEAT  #C
2154:  MOV     [W0++],[W15++]
.................... { 
.................... 	MotorMovingY(0,BREAK); 
2156:  CLR     9EC
2158:  MOV     #2,W4
215A:  MOV     W4,9EE
215C:  CALL    12D8
.................... 	StateResetY = 0; 
2160:  CLR.B   97B
.................... 	countDistanceY = 0; 
2162:  CLR     960
.................... 	currentDistanceY = 0; 
2164:  CLR     95A
2166:  CLR     95C
.................... 	// ext_int_edge(2, L_TO_H); 
.................... 	speedY = 500; 
2168:  MOV     #1F4,W4
216A:  MOV     W4,972
.................... 	if(((input_b () & 0x02)>>1)>0) 
216C:  MOV     2CA,W5
216E:  AND     W5,#2,W5
2170:  LSR     W5,#1,W5
2172:  CP0     W5
2174:  BRA     Z,2180
.................... 	{ 
.................... 		// disable_interrupts( INT_EXT2 ); 
.................... 		// printf("FUCK Y1"); 
.................... 		ext_int_edge(1, H_TO_L); 
2176:  BSET.B  82.1
.................... 		StateMotorY = 0; 
2178:  CLR.B   974
.................... 		StateBreakY = 1; 
217A:  MOV.B   #1,W0L
217C:  MOV.B   W0L,979
.................... 	} 
217E:  BRA     2188
.................... 	else 
.................... 	{ 
.................... 		// printf("FUCK Y0"); 
.................... 		ext_int_edge(1, L_TO_H); 
2180:  BCLR.B  82.1
.................... 		// ext_int_edge(2, L_TO_H) 
.................... 		StateMotorY = 1; 
2182:  MOV.B   #1,W0L
2184:  MOV.B   W0L,974
.................... 		StateDirectionY = 0; 
2186:  CLR.B   976
.................... 		// StateMotorX = 1; 
.................... 		// StateDirectionX = 0; 
.................... 		// speedY = 500; 
.................... 	} 
2188:  BCLR.B  86.4
218A:  MOV     #1A,W0
218C:  REPEAT  #C
218E:  MOV     [--W15],[W0--]
2190:  MOV     [--W15],W0
2192:  POP     32
2194:  POP     36
2196:  POP     42
2198:  RETFIE  
.................... } 
.................... // /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                                 EOF                                    **/ 
.................... /**                                                                        **/ 
.................... /***************************************************************************/ 
....................  
.................... #import(file="PIDModule.o") 
.................... /* 
.................... *************************** C SOURCE FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CTEMPLATE.C 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #define PIDModule_C_SRC 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                             MODULES USED                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #include "PIDModule.H" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CTEMPLATE.H 
.................... version   : 2 
.................... date      : 
....................  
.................... ****************************************************************************** 
....................  
.................... Copyright (c) 20xx , 
.................... All rights reserved. 
....................  
.................... ****************************************************************************** 
....................  
.................... VERSION HISTORY: 
.................... ---------------------------- 
.................... Version      : 1 
.................... Date         : 
.................... Revised by   : 
.................... Description  : 
....................  
.................... Version      : 2 
.................... Date         : 
.................... Revised by   : 
.................... Description  : * 
....................                * 
....................                * 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  PIDModule_INCLUDED 
.................... #define  PIDModule_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... //#include <stdlib.h>  // depend on application requirements. 
.................... //#include "cdat68k.h"  // define data types 
.................... #include "CONFIG_PIC24.H" 
.................... /* 
.................... *************************** C HEADER FILE ************************************ 
....................  
.................... project   : 
.................... filename  : CONFIG_PIC24.H 
.................... version   :  
.................... date      : 
....................  
.................... ****************************************************************************** 
.................... */ 
....................  
.................... #ifndef  CONFIG_PIC24_INCLUDED 
.................... #define  CONFIG_PIC24_INCLUDED 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              MODULES USED                              **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... #include <24FJ48GA002.H> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
....................  
.................... #list 
....................  
.................... //#include <24FJ16GA002.H> 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... #DEVICE ADC=10 
.................... #fuses NOIOL1WAY, NODEBUG, NOWRT, NOPROTECT, NOJTAG, NOWDT 
.................... #fuses OSCIO 
.................... #fuses FRC_PLL 
.................... #case 
.................... #type signed 
.................... #use delay(internal=8 MHz, clock = 32000000)  
.................... #use fast_io(ALL) 
.................... #pin_select U1TX = PIN_B13 
.................... #pin_select U1RX = PIN_B12 
.................... #use RS232 (UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12, STREAM = COM_A) 
.................... #BIT TX1IF = 0x0084.12  // Tx1 Interrupt flag  IFS0.12 
....................  
.................... ////////////////////////////////////////////////// 
.................... // EXT INT pins 
.................... #if 1 
.................... // INT0 is RB7 
.................... #pin_select INT1 = PIN_B1 
.................... #pin_select INT2 = PIN_B3 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... #if 0 
....................  
.................... #pin_select U2TX = PIN_B10 
.................... #pin_select U2RX = PIN_B11 
....................  
.................... //#use RS232 (UART2, BAUD = 9600, XMIT = PIN_B9, RCV = PIN_B8, STREAM = COM_B) 
.................... //#use RS232 (BAUD = 9600, XMIT = PIN_B10, RCV = PIN_B11, STREAM = COM_B) 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
.................... // REMAP i/o pins 
.................... #if 1 
....................  
.................... #pin_select IC1 = PIN_B4  // RP0  AX2 
.................... #pin_select IC2 = PIN_B5  // RP1  AX3 
.................... #pin_select OC1 = PIN_B2 
....................  
.................... #pin_select IC3 = PIN_B6   
.................... #pin_select IC4 = PIN_B7   
.................... #pin_select OC2 = PIN_B0 
....................  
.................... #endif 
.................... ////////////////////////////////////////////////// 
....................  
.................... #include <stdlib.h>   
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #if defined(__PCD__) 
....................  
.................... char * itoa(signed int48 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int48 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... char * itoa(signed int64 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int64 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................       
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1;         
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................              
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #endif 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <stdlibm.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... /*********************************************************************/ 
.................... #ifndef _STDLIBM 
.................... #define _STDLIBM 
.................... #USE DYNAMIC_MEMORY 
.................... /* Memory Management Functions*/ 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int8 next; }node_t; 
.................... #elif defined(__PCM__) 
.................... typedef struct nodet { 
....................    unsigned int8 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCH__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #elif defined(__PCD__) 
.................... typedef struct nodet { 
....................    unsigned int16 size; 
....................    unsigned int16 next; }node_t; 
.................... #endif 
....................  
....................  
.................... #ifndef debug_stdlibm 
....................    #define debug_stdlibm(s) 
.................... #else 
....................    #define __DO_DEBUG_STDLIBM 
....................     
....................    char g_DebugStdlibmStr[50]; 
....................     
....................    #if defined(__PCD__) 
....................       #if (defined(__PIC24E__)||defined(__dsPIC33E__)) 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x800)) || bit_test(x, 0)) 
....................       #else 
....................          #define INVALID_MEMORY_LOCATION(x) ((x >= (getenv("RAM")+0x1000)) || bit_test(x, 0)) 
....................       #endif 
....................    #else 
....................       #define INVALID_MEMORY_LOCATION(x) (x >= getenv("RAM")) 
....................    #endif 
.................... #endif 
....................  
.................... #include <memmgmt.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__PCH__) 
....................  #define _MEMMGMT_CSIZE 32768 
....................  #define _MEMMGMT_POS 15 
.................... #elif defined(__PCD__) 
....................    #define _MEMMGMT_CSIZE 32768 
....................    #define _MEMMGMT_POS 15 
.................... #else 
....................    #define _MEMMGMT_CSIZE 127 
....................    #define _MEMMGMT_POS 7 
.................... #endif 
....................  
.................... node_t * create_node(unsigned int16 size, node_t *ptr) // create node at given location 
.................... { 
....................    node_t *result; 
....................    result =ptr; 
....................    result->size=size; 
....................    result->next = NULL; 
....................    return result; 
.................... } 
.................... void update_node(node_t *node, unsigned int16 size) // update the size of given node 
.................... { 
....................    node->size=size; 
.................... } 
....................  
.................... /* Insert node immediately after place */ //old,new 
.................... void insert_node_after(node_t *place, node_t *node)// place the node after another given node 
.................... { 
....................     if (place->next==NULL) 
....................        node->next= NULL; 
....................     else 
....................        node->next=place->next; 
....................     place->next=node; 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void remove_node(node_t *node) {// remove the given node from the memlist 
....................    node_t *ptr; 
....................    for(ptr=__DYNAMIC_HEAD;ptr->next!=node;ptr=ptr->next); 
....................    ptr->next=node->next; 
....................    node=NULL; 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #if defined(__DO_DEBUG_STDLIBM) 
.................... void print_list() { // print the current memlist 
....................     node_t *node; 
....................     debug_stdlibm("\r\nThe list is \n\r"); 
....................     for(node = __DYNAMIC_HEAD; node != NULL; node = node->next) 
....................     { 
....................         sprintf(g_DebugStdlibmStr, "H:0x%lx S:0x%lx N:0x%lx\n\r", node, node->size, node->next); 
....................         debug_stdlibm(g_DebugStdlibmStr); 
....................         if (INVALID_MEMORY_LOCATION(node->next)) 
....................         { 
....................            debug_stdlibm("Breaking because of invalid next node\r\n"); 
....................            break; 
....................         }    
....................     } 
....................     sprintf(g_DebugStdlibmStr, "size of node_t %u\r\n",sizeof(node_t)); 
....................     debug_stdlibm(g_DebugStdlibmStr); 
.................... } 
.................... #endif 
....................  
....................  
....................  
....................  
.................... void traverse() 
.................... { 
....................    node_t *node,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    node=__DYNAMIC_HEAD; 
....................    while(node!=NULL) 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "traverse() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          break; 
....................       }    
....................      #endif 
....................      if(!bit_test(node->size,_MEMMGMT_POS))// node free 
....................       { 
....................          nsize=node->size; 
....................          temp=(unsigned int16)node->next; 
....................         #if defined(__DO_DEBUG_STDLIBM) 
....................          if (INVALID_MEMORY_LOCATION(temp)) 
....................          { 
....................             sprintf(g_DebugStdlibmStr, "traverse() invalid temp (0x%LX)\r\n", node); 
....................             debug_stdlibm(g_DebugStdlibmStr); 
....................             break; 
....................          } 
....................         #endif 
....................          if(!bit_test(temp->size,_MEMMGMT_POS)&& (temp==((unsigned int16)node+nsize+sizeof(node_t))))//next node free and consecutive, so combine 
....................          { 
....................             nextsize=temp->size; 
....................             nsize+=nextsize+sizeof(node_t); 
....................             remove_node(temp); 
....................             update_node(node,nsize); 
....................          } 
....................          else 
....................          node=node->next; 
....................       } 
....................       else 
....................       node=node->next; 
....................    } 
.................... } 
....................  
.................... char *malloc(size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize; 
....................    #if defined(__PCD__) 
....................    if (size % 2) 
....................       size++; 
....................    #endif 
....................    node=__DYNAMIC_HEAD; 
....................     
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "malloc() size=%lu\r\n", size); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................          
....................    while(node!=NULL) // chk until end of memlist 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=size) // node is free and > = req size 
....................       { 
....................          nsize=node->size;    //nsize = size of the node that "node" being pointed at 
....................          if(nsize>size +sizeof(node_t)) //node > req size, so split and add new node to memlist 
....................          { 
....................             new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
....................             insert_node_after(node,new); 
....................             update_node(node,size+_MEMMGMT_CSIZE); 
....................          } 
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
....................          //end if 
....................          break; 
....................       }//end if 
....................       node=node->next; 
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
....................    { 
....................       debug_stdlibm("Not enough memory for mallocation\r\n"); 
....................       return NULL; 
....................    } 
....................    else 
....................    return (char *)node+sizeof(node_t); // return pounsigned int8er to allocated space 
.................... } 
....................  
.................... char *calloc(size_t nmemb,size_t size) 
.................... { 
....................    node_t *node,*new; 
....................    unsigned int16 nsize,resize; 
....................    node=__DYNAMIC_HEAD; 
....................    resize=nmemb*size; 
....................    #if defined(__PCD__) 
....................    if(resize%2) 
....................       resize++; 
....................    #endif 
....................    while(node!=NULL) // chk until end of memlist 
....................    { 
....................      #if defined(__DO_DEBUG_STDLIBM) 
....................       if (INVALID_MEMORY_LOCATION(node)) 
....................       { 
....................          sprintf(g_DebugStdlibmStr, "malloc() invalid node (0x%LX)\r\n", node); 
....................          debug_stdlibm(g_DebugStdlibmStr); 
....................          print_list(); 
....................          return(0); 
....................       } 
....................      #endif 
....................       if(!bit_test(node->size,_MEMMGMT_POS) && node->size >=resize)// node is free and > = req size 
....................       { 
....................          nsize=node->size; 
....................          if(nsize>resize+sizeof(node_t))//node > req size, so split and add new node to memlist 
....................          { 
....................             new=create_node(nsize-resize-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+resize); 
....................             insert_node_after(node,new); 
....................             update_node(node,resize+_MEMMGMT_CSIZE); 
....................          } 
....................          else//not enough space for new node so use original size 
....................          update_node(node,nsize+_MEMMGMT_CSIZE); 
....................          //end if 
....................          break; 
....................       }//end if 
....................       node=node->next; 
....................    }//end while 
....................    if(node==NULL)// reached end without finding an appropriate node 
....................    { 
....................       debug_stdlibm("Not enough memory for callocation\r\n"); 
....................       return NULL; 
....................    } 
....................    else 
....................    { 
....................       memset((unsigned int16)node+sizeof(node_t),0,resize);// initialize to 0 
....................       return (char *)(unsigned int16)node+sizeof(node_t);// return pounsigned int8er to allocated space 
....................    } 
.................... } 
.................... void free( void * ptr) 
.................... { 
....................    node_t *node; 
....................    unsigned int16 nsize; 
....................  
....................   #if defined(__DO_DEBUG_STDLIBM) 
....................    sprintf(g_DebugStdlibmStr, "free() 0x%LX\r\n", ptr); 
....................    debug_stdlibm(g_DebugStdlibmStr); 
....................   #endif 
....................  
....................    if(ptr==NULL) // not a valid pounsigned int8er 
....................       return; 
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
....................       if(bit_test(node->size,_MEMMGMT_POS))// node occupied 
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
....................          update_node(node,nsize); 
....................          ptr=NULL; 
....................  
....................       } 
....................       else // wrong input, return 
....................       { 
....................          ptr=NULL; 
....................          return; 
....................       } 
....................    } 
....................    traverse(); 
.................... } 
....................  
.................... char *realloc(void *ptr,size_t size) 
.................... { 
....................    node_t *node,*new,*temp; 
....................    unsigned int16 nsize,nextsize; 
....................    char *newptr; 
....................    #if defined(__PCD__) 
....................    if(size %2) 
....................       size++; 
....................    #endif 
....................    if(ptr==NULL)// null pounsigned int8er, so malloc the req memory 
....................       return(malloc(size)); 
....................    else if(size==0) 
....................    { 
....................       free(ptr); 
....................       return(NULL); 
....................    } 
....................    else 
....................    { 
....................       node=ptr-sizeof(node_t); 
....................       if(bit_test(node->size,_MEMMGMT_POS))// chk if valid pounsigned int8er 
....................       { 
....................          nsize=node->size-_MEMMGMT_CSIZE; 
....................          temp=(unsigned int16)node->next; 
....................          if(nsize>size)// block > req size 
....................          { 
....................         
....................                if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   nextsize=temp->size; 
....................                   remove_node(temp); 
....................                   new=create_node(nextsize+(nsize-size),(unsigned int16)node+size+sizeof(node_t)); 
....................                   insert_node_after(node,new); 
....................                    
....................  
....................                } 
....................                else if (nsize>size +sizeof(node_t))//node > req size, so split and add new node to memlist 
....................                { 
....................                   update_node(node,size+_MEMMGMT_CSIZE); // update block 
....................                   new=create_node(nsize-size-sizeof(node_t),(unsigned int16)node+sizeof(node_t)+size); 
....................                   insert_node_after(node,new); 
....................                } 
....................                else//not enough space for new node so use original size 
....................                update_node(node,nsize+_MEMMGMT_CSIZE); // update block 
....................  
....................          } 
....................          else // block < req size 
....................          { 
....................             if(!bit_test(temp->size,_MEMMGMT_POS) && (temp==((unsigned int16)node+nsize+sizeof(node_t))))// next block free and consecutive 
....................             { 
....................                nextsize=temp->size; 
....................                if(nextsize>=size-nsize) // next block >=difference 
....................                { 
....................                   if(nextsize>size-nsize+sizeof(node_t))//next node > req size, so split and add new node to memlist 
....................                   { 
....................                       update_node(node,size+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                       new=create_node(nextsize-(size-nsize),(unsigned int16)node+size+sizeof(node_t)); 
....................                       insert_node_after(node,new); 
....................                   } 
....................                   else//not enough space for new node in next node, so use original size 
....................                   { 
....................                       update_node(node,nsize+nextsize+_MEMMGMT_CSIZE);// update block 
....................                       remove_node(temp); 
....................                   } 
....................                } 
....................                else  //next block free but too small for new size 
....................                { 
....................                   newptr = malloc(size);  //use malloc to find new block 
....................                   if(newptr == NULL) 
....................                      return(NULL);        //return NULL if malloc was unable to find new block 
....................                     
....................                   memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                   free(ptr);                    //free original block 
....................                   return(newptr);               //return new pointer 
....................                } 
....................             } 
....................             else  //next block not free 
....................             { 
....................                newptr = malloc(size);  //use malloc to find new block 
....................                if(newptr == NULL)       
....................                   return(NULL);        //return NULL if malloc was unable to find new block 
....................                 
....................                memcpy(newptr, ptr, nsize);   //copy original data to new block 
....................                free(ptr);                    //free original block 
....................                return(newptr);               //return new pointer 
....................             } 
....................          } 
....................          return (char *)node+sizeof(node_t); // return pounsigned int8er to the reallocated block 
....................       } 
....................       else // not allocated use malloc 
....................       { 
....................          return(malloc(size)); 
....................       } 
....................    } 
....................  } 
.................... #ENDIF 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include "BL_support.h" 
.................... /******************************************************************************/ 
.................... /* File:    BL_Support.h													  */ 
.................... /* Author:  Dr.Santi Nuratch												  */ 
.................... /*          Embedded Computing and Control Lab., INC-KMUTT 				      */ 
.................... /* Created on 22 September 2016, 13:14										  */ 
.................... /******************************************************************************/ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... /****************************************************************************/ 
.................... // o/p pins  LED 
.................... #define  LED0  PIN_A2 
.................... #define  LED1  PIN_A4 
.................... #define  LED2  PIN_B2 
.................... #define  LED3  PIN_B3 
....................  
.................... // i/p pins  PBSW 
.................... #define  SW0  PIN_B4 
.................... #define  SW1  PIN_B5 
.................... #define  SW2  PIN_B6 
.................... #define  SW3  PIN_B7 
....................  
.................... // ADC  or  i/o pins if not use ADC 
.................... #define  AX0  PIN_A0 
.................... #define  AX1  PIN_A1 
.................... #define  AX2  PIN_B0  // RP0 remap pin 
.................... #define  AX3  PIN_B1  // RP1 remap pin 
....................  
.................... /****************************************************************************/ 
....................  
.................... #endif 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
....................  
.................... #include "CDATPIC24.H" 
.................... /* 
.................... ***************************   C DATA TYPE   ******************************* 
.................... **                                                                              
.................... **  project     : C Data Types Extension                                                 
.................... **  filename  : CDATPIC24.H                                                                 
.................... **                                                                                                                
.................... *************************************************************************** 
.................... */ 
....................  
.................... #ifndef   CDATPIC24_INCLUDED 
.................... #define   CDATPIC24_INCLUDED 
....................  
.................... /* 
.................... *************************************************************************** 
....................                             C  TYPEDEFS                                            
.................... *************************************************************************** 
.................... */ 
....................  
.................... /**** C type extensions ****/ 
.................... typedef unsigned char      int8u; 
.................... typedef signed   char      int8s; 
.................... typedef unsigned int       int16u; 
.................... typedef signed   int       int16s; 
.................... typedef unsigned long      int32u; 
.................... typedef signed   long      int32s; 
.................... typedef unsigned long long int64u; 
.................... typedef signed   long long int64s; 
....................  
....................  
.................... #endif 
.................... /* 
.................... ************************************************************************** 
....................                                EOF                                                    
.................... /************************************************************************* 
.................... */ 
....................  
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... typedef struct{ 
.................... 	float Kp; 
.................... 	float Ki; 
.................... 	float Kd; 
....................  
.................... 	float previousError; 
.................... 	float errorSummation; 
.................... 	float u; 
....................  
.................... 	// Paremeter for velocity form 
.................... 	 
.................... 	float delta_u; 
.................... 	float PreviousU1; 
.................... 	float PreviousE1; 
.................... 	float PreviousE2; 
....................  
.................... }PIDParameter; 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                         EXPORTED VARIABLES                             **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
.................... void InitialPID(PIDParameter *MOTOR); 
.................... /******************************************* 
.................... PID Positional Form  
.................... Parameter : e 
.................... Return : u 
.................... Compute control input from error in positional form 
.................... *******************************************/ 
.................... void PIDPositionalForm(float error, PIDParameter *MOTOR); 
....................  
.................... /******************************************* 
.................... PID Velocity Form  
.................... Parameter : e 
.................... Return : u 
.................... Compute control input from error in velocity form 
.................... *******************************************/ 
.................... void PIDVelocityForm(float error, PIDParameter *MOTOR); 
....................  
....................  
.................... #ifndef PIDModule_C_SRC 
....................  
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                       EXPORTED FUNCTIONS                               **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... #endif 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                              EOF                                       **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        DEFINITIONS AND MACROS                          **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                        TYPEDEFS AND STRUCTURES                         **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                      PROTOTYPES OF LOCAL FUNCTIONS                     **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                           EXPORTED VARIABLES                           **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                            GLOBAL VARIABLES                            **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                           EXPORTED FUNCTIONS                           **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
.................... void InitialPID(PIDParameter *MOTOR) 
219A:  MOV     W5,[W15++]
.................... { 
.................... 	 
.................... 	MOTOR->previousError = 0; 
219C:  MOV     #C,W0
219E:  ADD     982,W0
21A0:  MOV     W0,W5
21A2:  CLR.B   [W5]
21A4:  MOV.B   #0,W0L
21A6:  MOV.B   W0L,[W5+#1]
21A8:  MOV.B   #0,W0L
21AA:  MOV.B   W0L,[W5+#2]
21AC:  MOV.B   #0,W0L
21AE:  MOV.B   W0L,[W5+#3]
.................... 	MOTOR->errorSummation = 0; 
21B0:  MOV     #10,W0
21B2:  ADD     982,W0
21B4:  MOV     W0,W5
21B6:  CLR.B   [W5]
21B8:  MOV.B   #0,W0L
21BA:  MOV.B   W0L,[W5+#1]
21BC:  MOV.B   #0,W0L
21BE:  MOV.B   W0L,[W5+#2]
21C0:  MOV.B   #0,W0L
21C2:  MOV.B   W0L,[W5+#3]
.................... 	MOTOR->u = 0; 
21C4:  MOV     #14,W0
21C6:  ADD     982,W0
21C8:  MOV     W0,W5
21CA:  CLR.B   [W5]
21CC:  MOV.B   #0,W0L
21CE:  MOV.B   W0L,[W5+#1]
21D0:  MOV.B   #0,W0L
21D2:  MOV.B   W0L,[W5+#2]
21D4:  MOV.B   #0,W0L
21D6:  MOV.B   W0L,[W5+#3]
....................  
.................... 	// Paremeter for velocity form 
.................... 	 
.................... 	MOTOR->delta_u = 0; 
21D8:  MOV     #18,W0
21DA:  ADD     982,W0
21DC:  MOV     W0,W5
21DE:  CLR.B   [W5]
21E0:  MOV.B   #0,W0L
21E2:  MOV.B   W0L,[W5+#1]
21E4:  MOV.B   #0,W0L
21E6:  MOV.B   W0L,[W5+#2]
21E8:  MOV.B   #0,W0L
21EA:  MOV.B   W0L,[W5+#3]
.................... 	MOTOR->PreviousU1 = 0; 
21EC:  MOV     #1C,W0
21EE:  ADD     982,W0
21F0:  MOV     W0,W5
21F2:  CLR.B   [W5]
21F4:  MOV.B   #0,W0L
21F6:  MOV.B   W0L,[W5+#1]
21F8:  MOV.B   #0,W0L
21FA:  MOV.B   W0L,[W5+#2]
21FC:  MOV.B   #0,W0L
21FE:  MOV.B   W0L,[W5+#3]
.................... 	MOTOR->PreviousE1 = 0; 
2200:  MOV     #20,W0
2202:  ADD     982,W0
2204:  MOV     W0,W5
2206:  CLR.B   [W5]
2208:  MOV.B   #0,W0L
220A:  MOV.B   W0L,[W5+#1]
220C:  MOV.B   #0,W0L
220E:  MOV.B   W0L,[W5+#2]
2210:  MOV.B   #0,W0L
2212:  MOV.B   W0L,[W5+#3]
.................... 	MOTOR->PreviousE2 = 0; 
2214:  MOV     #24,W0
2216:  ADD     982,W0
2218:  MOV     W0,W5
221A:  CLR.B   [W5]
221C:  MOV.B   #0,W0L
221E:  MOV.B   W0L,[W5+#1]
2220:  MOV.B   #0,W0L
2222:  MOV.B   W0L,[W5+#2]
2224:  MOV.B   #0,W0L
2226:  MOV.B   W0L,[W5+#3]
2228:  MOV     [--W15],W5
222A:  RETURN  
.................... } 
....................  
....................  
.................... void PIDPositionalForm(float error, PIDParameter *MOTOR) 
.................... { 
.................... 	MOTOR->errorSummation += error; 
.................... 	MOTOR->previousError = error; 
....................  
.................... 	MOTOR->u = (MOTOR->Kp * error) + (MOTOR->Ki * MOTOR->errorSummation) + (MOTOR->Kd*(error - MOTOR->previousError)); 
.................... } 
....................  
.................... void PIDVelocityForm(float error , PIDParameter *MOTOR) 
*
15E6:  MOV     W5,[W15++]
15E8:  MOV     #C,W5
15EA:  REPEAT  #3
15EC:  MOV     [W5++],[W15++]
.................... { 
....................  
.................... 	MOTOR->delta_u = ((MOTOR->Kp + MOTOR->Ki + MOTOR->Kd)*error)-((MOTOR->Kp+2*MOTOR->Kd)*MOTOR->PreviousE1) + MOTOR->Kd*MOTOR->PreviousE2; 
15EE:  MOV     #18,W0
15F0:  ADD     9DA,W0
15F2:  MOV     W0,W5
15F4:  MOV     #0,W0
15F6:  ADD     9DA,W0
15F8:  MOV     #C,W4
15FA:  MOV     [W0++],[W4++]
15FC:  MOV     [W0++],[W4++]
15FE:  MOV     #4,W0
1600:  ADD     9DA,W0
1602:  MOV     W0,W4
1604:  MOV     #0,W3
1606:  MOV     [W4++],[W3++]
1608:  MOV     [W4++],[W3++]
160A:  BCLR.B  43.0
160C:  MOV     W0,W2
160E:  MOV     W1,W3
1610:  MOV     W6,W0
1612:  MOV     W7,W1
1614:  CALL    1310
1618:  MOV.D   W0,W6
161A:  MOV     #8,W0
161C:  ADD     9DA,W0
161E:  MOV     W0,W4
1620:  MOV     #0,W3
1622:  MOV     [W4++],[W3++]
1624:  MOV     [W4++],[W3++]
1626:  BCLR.B  43.0
1628:  MOV     W0,W2
162A:  MOV     W1,W3
162C:  MOV     W6,W0
162E:  MOV     W7,W1
1630:  CALL    1310
1634:  MOV.D   W0,W6
1636:  MOV     W6,W0
1638:  MOV     W7,W1
163A:  MOV     9D6,W2
163C:  MOV     9D8,W3
163E:  CALL    1522
1642:  MOV.D   W0,W6
1644:  MOV     #0,W0
1646:  ADD     9DA,W0
1648:  MOV     #10,W4
164A:  MOV     [W0++],[W4++]
164C:  MOV     [W0++],[W4++]
164E:  MOV     #8,W0
1650:  ADD     9DA,W0
1652:  MOV     W0,W4
1654:  MOV     #0,W3
1656:  MOV     [W4++],[W3++]
1658:  MOV     [W4++],[W3++]
165A:  MOV     W0,W2
165C:  MOV     W1,W3
165E:  MOV     #0,W0
1660:  MOV     #4000,W1
1662:  CALL    1522
1666:  BCLR.B  43.0
1668:  MOV     W0,W2
166A:  MOV     W1,W3
166C:  MOV     W8,W0
166E:  MOV     W9,W1
1670:  CALL    1310
1674:  MOV.D   W0,W8
1676:  MOV     #20,W0
1678:  ADD     9DA,W0
167A:  MOV     W0,W4
167C:  MOV     #0,W3
167E:  MOV     [W4++],[W3++]
1680:  MOV     [W4++],[W3++]
1682:  MOV     W0,W2
1684:  MOV     W1,W3
1686:  MOV     W8,W0
1688:  MOV     W9,W1
168A:  CALL    1522
168E:  BSET.B  43.0
1690:  MOV     W0,W2
1692:  MOV     W1,W3
1694:  MOV     W6,W0
1696:  MOV     W7,W1
1698:  CALL    1310
169C:  MOV.D   W0,W6
169E:  MOV     #8,W0
16A0:  ADD     9DA,W0
16A2:  MOV     #10,W4
16A4:  MOV     [W0++],[W4++]
16A6:  MOV     [W0++],[W4++]
16A8:  MOV     #24,W0
16AA:  ADD     9DA,W0
16AC:  MOV     W0,W4
16AE:  MOV     #0,W3
16B0:  MOV     [W4++],[W3++]
16B2:  MOV     [W4++],[W3++]
16B4:  MOV     W0,W2
16B6:  MOV     W1,W3
16B8:  MOV     W8,W0
16BA:  MOV     W9,W1
16BC:  CALL    1522
16C0:  BCLR.B  43.0
16C2:  MOV     W0,W2
16C4:  MOV     W1,W3
16C6:  MOV     W6,W0
16C8:  MOV     W7,W1
16CA:  CALL    1310
16CE:  MOV     #0,W4
16D0:  MOV     [W4++],[W5++]
16D2:  MOV     [W4++],[W5++]
.................... 	MOTOR->u = MOTOR->PreviousU1 + MOTOR->delta_u; 
16D4:  MOV     #14,W0
16D6:  ADD     9DA,W0
16D8:  MOV     W0,W5
16DA:  MOV     #1C,W0
16DC:  ADD     9DA,W0
16DE:  MOV     #C,W4
16E0:  MOV     [W0++],[W4++]
16E2:  MOV     [W0++],[W4++]
16E4:  MOV     #18,W0
16E6:  ADD     9DA,W0
16E8:  MOV     W0,W4
16EA:  MOV     #0,W3
16EC:  MOV     [W4++],[W3++]
16EE:  MOV     [W4++],[W3++]
16F0:  BCLR.B  43.0
16F2:  MOV     W0,W2
16F4:  MOV     W1,W3
16F6:  MOV     W6,W0
16F8:  MOV     W7,W1
16FA:  CALL    1310
16FE:  MOV     #0,W4
1700:  MOV     [W4++],[W5++]
1702:  MOV     [W4++],[W5++]
.................... 	// if(MOTOR->u > 750) 
.................... 	// { 
.................... 	// 	MOTOR->u = 750; 
.................... 	// } 
.................... 	MOTOR->PreviousU1 = MOTOR->u; 
1704:  MOV     #1C,W0
1706:  ADD     9DA,W0
1708:  MOV     W0,W5
170A:  MOV     #14,W0
170C:  ADD     9DA,W0
170E:  MOV     [W0++],[W5++]
1710:  MOV     [W0++],[W5++]
.................... 	MOTOR->PreviousE2 = MOTOR->PreviousE1; 
1712:  MOV     #24,W0
1714:  ADD     9DA,W0
1716:  MOV     W0,W5
1718:  MOV     #20,W0
171A:  ADD     9DA,W0
171C:  MOV     [W0++],[W5++]
171E:  MOV     [W0++],[W5++]
.................... 	MOTOR->PreviousE1 = error; 
1720:  MOV     #20,W0
1722:  ADD     9DA,W0
1724:  MOV     W0,W5
1726:  MOV     #9D6,W4
1728:  MOV     [W4++],[W5++]
172A:  MOV     [W4++],[W5++]
172C:  MOV     #12,W5
172E:  REPEAT  #3
1730:  MOV     [--W15],[W5--]
1732:  MOV     [--W15],W5
1734:  RETURN  
....................  
.................... } 
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                             LOCAL FUNCTIONS                            **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  
....................  
.................... /****************************************************************************/ 
....................  
.................... /****************************************************************************/ 
.................... /**                                                                        **/ 
.................... /**                                 EOF                                    **/ 
.................... /**                                                                        **/ 
.................... /****************************************************************************/ 
....................  

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9C7   NOPR NOALTI2C1 NOIOL1WAY OSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
